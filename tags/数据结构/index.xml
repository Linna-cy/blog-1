<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>数据结构 on Linner&#39;s Blog</title>
        <link>https://blog.linner.asia/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
        <description>Recent content in 数据结构 on Linner&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Sat, 08 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.linner.asia/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据结构（软件设计师）</title>
        <link>https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</link>
        <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</guid>
        <description>&lt;h1 id=&#34;复杂度&#34;&gt;复杂度&lt;/h1&gt;
&lt;h2 id=&#34;大o表示法&#34;&gt;大O表示法&lt;/h2&gt;
&lt;p&gt;算法时间复杂度以算法中基本操附重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，只要大致计算出相应的数量级即可，使用大$O$表示法表示（空间复杂度也是）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/1681099842666.png&#34;
	width=&#34;1014&#34;
	height=&#34;100&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/1681099842666_hu8fb0d0a3c83abecf36c375990db2efe0_51379_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/1681099842666_hu8fb0d0a3c83abecf36c375990db2efe0_51379_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1014&#34;
		data-flex-basis=&#34;2433px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法规则：多项相加，保留最高阶项，并将系数化为1；&lt;/li&gt;
&lt;li&gt;乘法规则：多项相乘都保留，并将系数化为1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;递归式的时间（空间）复杂度：&lt;/p&gt;
&lt;p&gt;$$
递归的次数 \times 每次递归的时间（空间）复杂度
$$&lt;/p&gt;
&lt;h2 id=&#34;渐进符号&#34;&gt;渐进符号&lt;/h2&gt;
&lt;p&gt;可以用渐进符号来表示渐进复杂度。&lt;/p&gt;
&lt;p&gt;渐进符号包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$O$：算法运行时间的渐进上界。&lt;/p&gt;
&lt;p&gt;给定一个函数$g(n)$，$O\big( g(n) \big) = \{ f(n):\exists 正常数c和n_0,使得\forall n \ge n_0, 有 0 \le f(n) \le cg(n) \}$。&lt;/p&gt;
&lt;p&gt;即，当$n \ge n_0$时，$f(n) \le c \cdot g(n)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Omega$：算法运行时间的渐进下界。&lt;/p&gt;
&lt;p&gt;给定一个函数$g(n)$，$O\big( g(n) \big) = \{ f(n):\exists 正常数c和n_0,使得\forall n \ge n_0, 有 0 \le cg(n) \le f(n) \}$。&lt;/p&gt;
&lt;p&gt;即，当$n \ge n_0$时，$c \cdot g(n) \le f(n)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Theta$：算法运行时间的渐进上界和渐进下界，即渐进紧致界（又叫紧缺界）。&lt;/p&gt;
&lt;p&gt;给定一个函数$g(n)$，$O\big( g(n) \big) = \{ f(n):\exists 正常数c_1、c_2和n_0,使得\forall n \ge n_0, 有 0 \le c_1g(n) \le f(n) \le c_2g(n) \}$。&lt;/p&gt;
&lt;p&gt;即，当$n \ge n_0$时，$c_1g(n) \le f(n) \le c_2g(n)$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681110832416.png&#34;
	width=&#34;966&#34;
	height=&#34;1204&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681110832416_hud8e84328d379d2eda520e5c710188239_380512_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681110832416_hud8e84328d379d2eda520e5c710188239_380512_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;递归式主方法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;192px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;逻辑结构分类&#34;&gt;逻辑结构分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;线性结构
&lt;ul&gt;
&lt;li&gt;线性表（一般线性表）&lt;/li&gt;
&lt;li&gt;特殊线性表
&lt;ul&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线性表的推广
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;广义表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性结构
&lt;ul&gt;
&lt;li&gt;树结构
&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;多叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图结构
&lt;ul&gt;
&lt;li&gt;有向图&lt;/li&gt;
&lt;li&gt;无向图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;线性表&#34;&gt;线性表&lt;/h1&gt;
&lt;p&gt;&lt;u&gt;由 $n(n\geq 0)$ 个&lt;strong&gt;数据特性相同&lt;/strong&gt;的元素构成的&lt;strong&gt;有限序列&lt;/strong&gt;称为&lt;strong&gt;线性表&lt;/strong&gt;&lt;/u&gt;。$n=0$ 时，称为空表。非空表的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在唯一一个“第一个”元素。&lt;/li&gt;
&lt;li&gt;存在唯一一个“最后一个”元素。&lt;/li&gt;
&lt;li&gt;相邻元素之间存在序偶关系：
&lt;ul&gt;
&lt;li&gt;除第一个之外，结构中的每个数据元素均只有一个&lt;strong&gt;前驱&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;除最后一个之外，结构中的每个数据元素均只有一个&lt;strong&gt;后继&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性表的存储结构分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序存储；&lt;/li&gt;
&lt;li&gt;链式存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;顺序存储结构&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;线性表的&lt;strong&gt;顺序存储&lt;/strong&gt;是指用一组&lt;strong&gt;地址连续的存储单元&lt;/strong&gt;依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。在这种存储方式下，元素间的逻辑关系无须占用额外的空间来存储。&lt;/p&gt;
&lt;p&gt;其存储结构如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610120418.png&#34;
	width=&#34;130&#34;
	height=&#34;266&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610120418_hu2b33a584fc5a2d635ec65d6abeb2f0a4_3927_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610120418_hu2b33a584fc5a2d635ec65d6abeb2f0a4_3927_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;顺序表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;48&#34;
		data-flex-basis=&#34;117px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;假设线性表的每个元素占用的存储空间为$L$，$LOC(a_i)$为第$i$个元素的存储位置（$0 \le i \le n-1$，$n$为线性表的长度）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第$i+1$个元素和第$i$个元素的存储位置满足：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i+1})=LOC(a_i)+L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第$i$个元素的存储位置：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_i)=LOC(a_0) + i \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_i)=LOC(a_1) + (i-1) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序存储结构的线性表的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：&lt;strong&gt;可以随机存取表中的元素&lt;/strong&gt;，不需要额外的存储空间来表达元素之间的逻辑关系；&lt;/li&gt;
&lt;li&gt;缺点：&lt;strong&gt;插入和删除操作不方便、效率低、比较耗时&lt;/strong&gt;（&lt;strong&gt;插入和删除操作需要移动元素&lt;/strong&gt;），顺序表的长度是固定的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表厂为$n$的线性表中，有$n+1$个插入位置（不考虑插入是否会导致溢出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在第$i$个插入位置插入，需要移动$n+1-i$个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第1个位置插入（$a_1$）需要移动$n$个元素；&lt;/li&gt;
&lt;li&gt;在第$n+1$个位置插入（$a_n$后面）不需要移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设在第$i$个插入位置插入的概率为$p_i$，&lt;u&gt;等概率下&lt;/u&gt;（假如这$n+1$个插入位置插入的概率相同）&lt;u&gt;插入&lt;/u&gt;一个新元素需要移动的元素个数的&lt;u&gt;期望值$E_{insert}$&lt;/u&gt;为：&lt;/p&gt;
&lt;p&gt;$$
E_{insert} = \sum_{i=1}^{n+1}{ \Big( p_i \times (n-i+1) \Big) } = \cfrac{1}{n+1} \sum_{i=1}^{n+1}{(n-i+1)} = \cfrac{n+1}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
p_i = \cfrac{1}{n+1}
$$&lt;/p&gt;
&lt;p&gt;即，$E_{insert} = \cfrac{插入位置数-1}{2} = \cfrac{n+1}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表长为$n$的线性表中删除元素时，共有$n$个可删除的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除第$i$个元素$a_i$需要移动$n-i$个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除元素$a_1$需要移动$n-1$个元素；&lt;/li&gt;
&lt;li&gt;删除元素$a_n$不需要移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设$a_i$被删除的概率为$q_i$，&lt;u&gt;等概率下删除元素&lt;/u&gt;时需要移动的元素个数的&lt;u&gt;期望值$E_{delete}$&lt;/u&gt;为：&lt;/p&gt;
&lt;p&gt;$$
E_{delete} = \sum_{i=1}^{n}{\Big( q_i \times (n-i) \Big)} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i)} = \cfrac{n-1}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
q_i = \cfrac{1}{n}
$$&lt;/p&gt;
&lt;p&gt;即，$E_{delete} = \cfrac{删除位置数}{2} = \cfrac{n-1}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;插入操作时间复杂度&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况（在第$n+1$个位置插入）：$O(1)$；&lt;/li&gt;
&lt;li&gt;最坏情况（在第1个位置插入）：$O(n)$；&lt;/li&gt;
&lt;li&gt;平均复杂度：$O(n)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查找元素时间复杂度&lt;/strong&gt;（根据下标查找）：$O(1)$。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;线性表的&lt;strong&gt;链式存储&lt;/strong&gt;是指&lt;strong&gt;通过指针链接起来&lt;/strong&gt;的结点来存储数据元素。&lt;/p&gt;
&lt;p&gt;其存储结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610469403.png&#34;
	width=&#34;403&#34;
	height=&#34;49&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610469403_hueeee19018a01756f2e48de06f8910c88_6757_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610469403_hueeee19018a01756f2e48de06f8910c88_6757_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;链式表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;822&#34;
		data-flex-basis=&#34;1973px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据域&lt;/strong&gt;：用于存储数据元素的&lt;strong&gt;值&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指针域&lt;/strong&gt;：用于存储当前元素的直接前驱或直接后继的&lt;strong&gt;位置信息&lt;/strong&gt;（直接前或后驱的&lt;strong&gt;指针&lt;/strong&gt;，称其为指针或链）。&lt;/p&gt;
&lt;p&gt;存储各数据元素的结点的&lt;u&gt;地址并不要求是连续的&lt;/u&gt;，因此存储数据元素的同时必须存储元素之间的逻辑关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链式表的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;结点空间只有在需要的时候才申请&lt;/u&gt;，无须事先分配；&lt;/li&gt;
&lt;li&gt;长度不固定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链式表结点之间通过指针域构成一个链表，&lt;u&gt;若结点中只有一个指针域，则称为线性链表&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610514354.png&#34;
	width=&#34;685&#34;
	height=&#34;64&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610514354_hu9c9f9d7fee45544c6864faab3f820061_7122_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680610514354_hu9c9f9d7fee45544c6864faab3f820061_7122_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;链式表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1070&#34;
		data-flex-basis=&#34;2568px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上图中的Head：一个指向链表第一个结点的针，称为头指针。使用它就可以顺序地访问到表中的任意一个元素。&lt;/p&gt;
&lt;p&gt;插入和删除操作时间复杂度（带不带头节点的复杂度都一样）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况（在$i=1$位置）：$O(1)$；&lt;/li&gt;
&lt;li&gt;最坏情况（在$n+1$位置插入/删除$n$位置）：$O(n)$&lt;/li&gt;
&lt;li&gt;平均复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链表操作的时间复杂度取决于指针遍历。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;栈&#34;&gt;栈&lt;/h1&gt;
&lt;p&gt;栈是一种&lt;strong&gt;后入先出&lt;/strong&gt;（Last In First Out，LIFO）的线性表。&lt;u&gt;栈只能通过访问它的一端来实现数据存储和检索。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;栈的基本操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入栈&lt;/strong&gt;：将元素置入栈顶；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出栈&lt;/strong&gt;：将元素从栈顶中取出。&lt;/li&gt;
&lt;li&gt;读取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;栈的出栈顺序一定和入栈顺序&lt;strong&gt;相反&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;顺序存储结构-1&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;栈的顺序存储结构也称为&lt;strong&gt;顺序栈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;顺序栈使用一个栈顶指针标记栈顶元素的索引位置。每次出栈时都需要重置栈顶指针，将栈顶指针向下移动，标记到新的栈顶元素。&lt;/p&gt;
&lt;p&gt;顺序栈的空间容量有限，所以每次入栈时都需要判断栈是否为满。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-1&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;栈的链式存储结构称为&lt;strong&gt;链栈&lt;/strong&gt;。链栈的头指针就是栈顶指针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680676944766.png&#34;
	width=&#34;238&#34;
	height=&#34;265&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680676944766_hu1bea4090283c9929deed80a707d4d0a3_11895_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680676944766_hu1bea4090283c9929deed80a707d4d0a3_11895_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;链栈的存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;215px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;栈的应用&#34;&gt;栈的应用&lt;/h2&gt;
&lt;p&gt;栈的典型应用包括&lt;strong&gt;表达式求值、括号匹配&lt;/strong&gt;等，在计算机语言的实现以及将递归过程转变为非递归过程的处理中，栈有重要的作用。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;队列&#34;&gt;队列&lt;/h1&gt;
&lt;p&gt;队列是一种&lt;strong&gt;先入先出&lt;/strong&gt;（First In First Out，FIFO）的线性表。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;队列只允许在表的一端插入元素，在表的另一端删除元素。&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;队头&lt;/strong&gt;（Front）：允许&lt;strong&gt;删除&lt;/strong&gt;元素的一端；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队尾&lt;/strong&gt;（Rear）：允许&lt;strong&gt;插入&lt;/strong&gt;元素的一端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;队列的基本操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入队&lt;/strong&gt;：将元素加入到队尾；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出队&lt;/strong&gt;：将元素加入到对头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;队列的入队顺序一定&lt;strong&gt;等于&lt;/strong&gt;出队顺序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用两个栈可以来模拟一个队列（从一个栈出栈后的元素入另一个栈后再出栈）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;顺序存储结构-2&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;队列的顺序存储结构称为&lt;strong&gt;顺序队列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;顺序队列设置两个指针：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队头指针：指向对头元素的下标；&lt;/li&gt;
&lt;li&gt;队尾指针：指向队尾元素的下标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果顺序队列只按照数组下标大小顺序来设置指针（对头指针的值永不大于队尾指针），那么在经过一段时间的操作后，对头指针有可能指向的并不是数组的第一个元素，此时队列的长度永远都到达不了数组的长度（空间无法被充分利用，实际使用的长度和逻辑长度不符）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680677900098.png&#34;
	width=&#34;959&#34;
	height=&#34;323&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680677900098_hua0e0c24049b10a1b1a22eff29a314663_53364_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680677900098_hua0e0c24049b10a1b1a22eff29a314663_53364_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;队列操作&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;296&#34;
		data-flex-basis=&#34;712px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们可以把数组想象为一个环型的结构（将最后一个元素和第一个元素连接起来，队头指针可以比队尾指针大）。如果此时队列的状态是上图中步骤$(e)$的状态，此时再插入元素，可以将元素放在数组索引0的位置，再让队尾指针始终保持在队列最后一个元素的索引之后即可。将这种队列称为&lt;strong&gt;循环队列&lt;/strong&gt;，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680678225885.png&#34;
	width=&#34;907&#34;
	height=&#34;202&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680678225885_hu78897751e6ca29164f26d83cde2f776e_48040_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680678225885_hu78897751e6ca29164f26d83cde2f776e_48040_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;循环队列&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;449&#34;
		data-flex-basis=&#34;1077px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-2&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;队列的链式存储也称为&lt;strong&gt;链队列&lt;/strong&gt;（&lt;strong&gt;链队&lt;/strong&gt;）。这里为了便于操作，可以给链队列添加一个头结点，并令头指针指向头结点。因此，队列为空的判定条件是头指针和尾指针的值相同，且
均指向头结点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680678441791.png&#34;
	width=&#34;278&#34;
	height=&#34;340&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680678441791_hud106655f2d3cb3393c4501ce0717f1de_16473_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680678441791_hud106655f2d3cb3393c4501ce0717f1de_16473_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;196px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;队列的应用&#34;&gt;队列的应用&lt;/h2&gt;
&lt;p&gt;队列结构常用于处理需要排队的场合，例如操作系统中处理打印任务的打印队列、离散事件的计算机模拟等。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;串&#34;&gt;串&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;串&lt;/strong&gt;（&lt;strong&gt;字符串&lt;/strong&gt;）是一种&lt;strong&gt;特殊的线性表&lt;/strong&gt;，其&lt;strong&gt;数据元素为字符&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;串具有自身的特性，运算时常常把一个串作为一个整体来处理。&lt;/p&gt;
&lt;p&gt;串的基本概念和操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空串&lt;/strong&gt;：长度为0的串；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子串&lt;/strong&gt;：由串中任意长度的连续字符构成的序列称为子串。含有子串的串称为主串。子串在主串中的位置是指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;串相等&lt;/strong&gt;：指两个串长度相等且对应序号的字符也相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;串比较&lt;/strong&gt;：两个串比较大小时以字符的ASCⅡ码值（或其他字符编码集合）作为依据。&lt;/p&gt;
&lt;p&gt;实质上，比较操作从两个串的第一个字符开始进行，字符的码值大者所在的串为大；若其中一个串先结束，则以串长较大者为大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝赋值：将一个串的值赋给另一个串；&lt;/li&gt;
&lt;li&gt;引用（地址）赋值：将一个串的引用（地址）赋给另一个串。那么这个串可以使用另一个串中的值，但是对这个串所做的操作，也会作用到另一个串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接串&lt;/strong&gt;：将一个串插入到另一个串尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;插入串&lt;/strong&gt;：将一个串插入到另一个串的任意位置中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;顺序存储结构-3&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;串的顺序存储结构是一种定长的串（类似顺序表）。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-3&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;串的链式存储结构可以方便地对串进行插入删除操作（类似链表）。&lt;/p&gt;
&lt;h2 id=&#34;串的模式匹配&#34;&gt;串的模式匹配&lt;/h2&gt;
&lt;p&gt;子串的定位操作通常称为串的模式匹配。子串也称为模式串。&lt;/p&gt;
&lt;p&gt;有关串模式匹配算法的详细讲解可以查看：&lt;a class=&#34;link&#34; href=&#34;../%e7%bb%8f%e5%85%b8%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d&#34; &gt;经典字符串匹配&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;朴素的模式匹配算法&#34;&gt;朴素的模式匹配算法&lt;/h3&gt;
&lt;p&gt;朴素的模式匹配算法也称为布鲁特一福斯算法（即暴力匹配算法），其基本思想是从主串的第一个字符起与模式串的第一个字符比较，若相等，则继续逐一对字符进行后续的比较，否则从主串第二个字符起与模式串的第一个字符重新比较，直到模式串中每个字符依次和主串中一个连续的字符序列相等时为止，此时称为匹配成功。如果不能在主串中找到与模式串相同的子串，则匹配失败。&lt;/p&gt;
&lt;p&gt;设主串和模式串的长度分别为$n$和$m$，算法时间复杂度和比较次数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最好情况：$O(m)$，次数为$m$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最坏情况：$O(n \times m)$，次数为$\cfrac{1}{2} m(n-m+2)$：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-m}{p_i\big( (i+1) \times m \big)} = \cfrac{m}{n-m+1} \sum_{i=0}^{n-m}{(i+1)} = \cfrac{1}{2} m(n-m+2)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均：$O(n+m)$，次数为$\cfrac{1}{2} (n+m)$：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-m}{p_i(i+m)} = \cfrac{1}{n-m+1} \sum_{i=0}^{n-m}{i+m} = \cfrac{1}{2} (n+m)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kmp-算法&#34;&gt;KMP 算法&lt;/h3&gt;
&lt;p&gt;KMP算法又称为改进的模式匹配算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;串的&lt;strong&gt;前缀&lt;/strong&gt;：包含第一个字符，且不包含最后一个字符的子串；&lt;/li&gt;
&lt;li&gt;串的&lt;strong&gt;后缀&lt;/strong&gt;：包含最后一个字符，且不包含第一个字符的子串。&lt;/li&gt;
&lt;li&gt;前缀集合：包含串的所有前缀的集合；&lt;/li&gt;
&lt;li&gt;后缀集合：包含串的所有后缀的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KMP的重点是求模式串字符的next值（失配指针$Next[\ i\ ]$），假设$a_{i-1}$为当前要求next值的模式串字符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前缀集合：&lt;/p&gt;
&lt;p&gt;$$
Prefix=\{p_0,p_0p_1,\cdots,p_0&amp;hellip;p_{i-1}\}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后缀集合：&lt;/p&gt;
&lt;p&gt;$$
Postfix=\{p_{i-1},p_{i-2}p_{i-1},\cdots,p_1&amp;hellip;p_{i-1}\}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;失配指针：&lt;/p&gt;
&lt;p&gt;$$
Next[i] =
\begin{cases}
-1 &amp;amp; 当\ i=0 时 \\
max &amp;amp; \{ k|0&amp;lt;k&amp;lt;i 且 &amp;ldquo;p_0\cdots p_{k-1}&amp;rdquo; = &amp;ldquo;p_{i-k}\cdots p_{i-1}&amp;rdquo; \} \\
0 &amp;amp; 其他情况
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Next[0] = -1$；&lt;/li&gt;
&lt;li&gt;$Next[i] = maxLen(Prefix \cap Postfix)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以解释为：&lt;/p&gt;
&lt;p&gt;$$
Next[\ i\ ] = 前i个子串的最长相同前后缀的长度
$$&lt;/p&gt;
&lt;p&gt;特殊情况：$Next[\ 1\ ] = 0$，因为其前缀集合和后缀集合都为空。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;失配表是用来指示匹配失败后指针该如何移动的。&lt;/p&gt;
&lt;p&gt;失配表的建立跟要匹配的串没有任何关系，仅跟模式串有关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;多维数组&#34;&gt;多维数组&lt;/h1&gt;
&lt;p&gt;多维数组是定长线性表在维数上的扩展，即线性表中的元素又是一个线性表。多维数组是一种“同构”的数据结构，其每个数据元素类型相同、结构一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一维数组：即线性表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二维数组（仅讨论顺序存储结构）：&lt;/p&gt;
&lt;p&gt;二维数组的存储结构（如下图），可以分为以行为主序（下图左边）和以列为主序（下图右边）两种。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680693946560.png&#34;
	width=&#34;451&#34;
	height=&#34;448&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680693946560_hu1932cb3790ae3468aeeee7cc636c93c8_34859_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680693946560_hu1932cb3790ae3468aeeee7cc636c93c8_34859_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;241px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二维数组为$A[n,m]$，$n$为行数，$m$为列数；&lt;/li&gt;
&lt;li&gt;数组元素$a_{i,j},\ 0 \le i \le n-1,\ 0 \le j \le m-1$；&lt;/li&gt;
&lt;li&gt;$LOC(a_{i,j})$为元素$a_{i,j}$的地址；&lt;/li&gt;
&lt;li&gt;$L$为单个元素的存储空间大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以行为主序优先存储：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i \times n + j) \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) \times n + (j-1) \big) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以列为主序优先存储：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i + j \times m) \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) + (j-1) \times m \big) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优先存储说法问题：&lt;/p&gt;
&lt;p&gt;以行为主序优先存储的意思应该是在内存中按行存储。以列为主序优先存储的意思应该是在内存中按列存储。&lt;/p&gt;
&lt;p&gt;假设一个二维数组为：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; a_{13} &amp;amp; a_{14} \\
a_{21} &amp;amp; a_{22} &amp;amp; a_{23} &amp;amp; a_{24} \\
a_{31} &amp;amp; a_{32} &amp;amp; a_{33} &amp;amp; a_{34} \\
a_{41} &amp;amp; a_{42} &amp;amp; a_{43} &amp;amp; a_{44} \\
a_{51} &amp;amp; a_{52} &amp;amp; a_{53} &amp;amp; a_{54}
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;按照以行为主序优先存储的公式，它在内存中应该是分为了5个地址连续的数组来存储。即内存中，$[a_{11},a_{12},a_{13},a_{14}]$为一个数组，其后再接一个数组$[a_{12},a_{22},a_{23},a_{24}]$，以此类推，在内存中按照列的元素作为一个连续的一维数组单位，再按照第1行后接第2行作为整个连续的二维数组。它们在内存中的地址顺序是：&lt;/p&gt;
&lt;p&gt;$$
a_{11},a_{12},&amp;hellip;,a_{14},\\
a_{21},&amp;hellip;,a_{24},\\
a_{31},&amp;hellip;,a_{34},\\
a_{41},&amp;hellip;,a_{44},\\
a_{51},&amp;hellip;,a_{54}
$$&lt;/p&gt;
&lt;p&gt;那么以列为主序优先存储的地址顺序就为：&lt;/p&gt;
&lt;p&gt;$$
a_{11},a_{21},&amp;hellip;,a_{51},\\
a_{12},&amp;hellip;,a_{52},\\
a_{13},&amp;hellip;,a_{53},\\
a_{14},&amp;hellip;,a_{54}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般矩阵都用二维数组来表示，但是对于一些特殊矩阵，如对称矩阵、三角矩阵和对角矩阵。它们的非0元素的分布存在一定规律，所以可以将其压缩存储在一维数组中，并且它们的多个值相同的元素（按照对应特殊矩阵定义上的值相同，并非简单的值相同）只分配一个存储单位。&lt;/p&gt;
&lt;h2 id=&#34;对称矩阵&#34;&gt;对称矩阵&lt;/h2&gt;
&lt;p&gt;若矩阵$A_{n \times n}$中的元素特点为$a_{ij}=a_{ji}\ (1 \le i,j \le n)$，则称之为$n$阶对称矩阵。&lt;/p&gt;
&lt;p&gt;对称矩阵$A_{n \times n}$：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; \cdots &amp;amp; a_{1n} \\
a_{21} &amp;amp; a_{22} &amp;amp; \cdots &amp;amp; a_{2n} \\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
a_{n1} &amp;amp; a_{n2} &amp;amp; \cdots &amp;amp; a_{nn}
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;其中以对角线划分为三个区域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主对角线&lt;/strong&gt;：$a{11},a_{22},\cdots,a_{nn}$，共有$n$个元素；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上三角区&lt;/strong&gt;：对角线以上的所有元素，即：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
0 &amp;amp; a_{12} &amp;amp; a_{13} &amp;amp; \cdots &amp;amp; a_{1n} \\
0 &amp;amp; 0 &amp;amp; a_{23} &amp;amp; \cdots &amp;amp; a_{2n} \\
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; a_{(n-1)n} \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0
\end{vmatrix}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下三角区&lt;/strong&gt;：对角线以下的所有元素，和上三角区的个数相等并且重复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以将对称矩阵中，$n^2$个元素压缩存储到$\cfrac{n(n+1)}{2}$个元素的存储空间中。一般是存储下三角区和对角线。&lt;/p&gt;
&lt;p&gt;假设将$n$阶对称矩阵$A_{n \times n}$压缩存储到一维数组$B\left[ \cfrac{n(n+1)}{2} \right]$，则$B[k]\ (1 \le k \le \cfrac{n(n+1)}{2})$与矩阵元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$之间存在一一对应关系（以行为主序）：&lt;/p&gt;
&lt;p&gt;$$
k =
\begin{cases}
\cfrac{i(i-1)}{2} + j, &amp;amp; 当\ i \ge j \\
\cfrac{j(j-1)}{2} + i, &amp;amp; 当\ i &amp;lt; j
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;如果下标从0开始（第一个元素为$a_{00}$，$0 \le k \le \cfrac{n(n+1)}{2} - 1$，并且$0 \le i,j \le n-1$）：&lt;/p&gt;
&lt;p&gt;$$
k =
\begin{cases}
\cfrac{i(i+1)}{2} + j + 1, &amp;amp; 当\ i \ge j \\
\cfrac{j(j+1)}{2} + i + 1, &amp;amp; 当\ i &amp;lt; j
\end{cases}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么$length(B) = \cfrac{n(n+1)}{2}$（压缩存储的一维数组大小）：&lt;/p&gt;
&lt;p&gt;主对角线的元素的大小为$n$，下三角区的对角线大小分别为$n-1,n-2,&amp;hellip;,1$。即：
$$
length(B) = \sum_{i=1}^{n}{i} = \cfrac{n(n+1)}{2}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：《软件设计师教程（第五版）》中一维数组的下标$k$的取值范围错了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/1680698007514.png&#34;
	width=&#34;999&#34;
	height=&#34;344&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/1680698007514_hud68653e5fe46341035cf0f04b58f1fb8_157083_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/1680698007514_hud68653e5fe46341035cf0f04b58f1fb8_157083_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对称矩阵&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;696px&#34;
	
&gt;
很明显不是$\left[ 1, \cfrac{n(n+1)}{2} \right)$，而应该是$\left[ 1, \cfrac{n(n+1)}{2} \right]$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;三对角矩阵&#34;&gt;三对角矩阵&lt;/h2&gt;
&lt;p&gt;对角矩阵是指矩阵中的&lt;u&gt;非0元素都集中在以主对角线为中心的带状区域中&lt;/u&gt;，即除了主对角线上和直接在对角线上、下方若干条对角线上的元素外，其余的矩阵元素都为0。三对角矩阵是对角矩阵中的一种，包括主对角线和在主对角线上、下方的各一条对角为非0元素：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; 0      &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
a_{21} &amp;amp; a_{22} &amp;amp; a_{23} &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
0      &amp;amp; a_{32} &amp;amp; a_{33} &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
0      &amp;amp; 0      &amp;amp; a_{43} &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots         &amp;amp; \vdots     \\
0      &amp;amp; 0      &amp;amp; 0      &amp;amp; \cdots &amp;amp; a_{(n-1)(n-1)} &amp;amp; a_{(n-1)n} \\
0      &amp;amp; 0      &amp;amp; 0      &amp;amp; \cdots &amp;amp; a_{n(n-1)}     &amp;amp; a_{nn}
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;设有$n$阶三对角矩阵$A_{n \times n}$，将其非0元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$存储在一维数组$B[k](1 \le k \le 3 \times n - 2)$中，则元素位置之间的对应关系为：&lt;/p&gt;
&lt;p&gt;$$
k = 3 \times (i-1) - 1 + j - i + 1 + 1 = 2i + j -2
$$&lt;/p&gt;
&lt;p&gt;如果下标从0开始（$0 \le k \le 3(n-1)$，并且$0 \le i,j \le n-1$）：&lt;/p&gt;
&lt;p&gt;$$
k = 3 \times i - 1 + j - i + 1 + 1 = 2i + j + 1
$$&lt;/p&gt;
&lt;h2 id=&#34;稀疏矩阵&#34;&gt;稀疏矩阵&lt;/h2&gt;
&lt;p&gt;在一个矩阵中，若&lt;u&gt;非0元素的个数远远少于0元素的个数，且非0元素的分布&lt;strong&gt;没有规律&lt;/strong&gt;&lt;/u&gt;，则称之为稀疏矩阵。&lt;/p&gt;
&lt;p&gt;对于稀疏矩阵，存储非0元素时&lt;strong&gt;必须同时存储其位置&lt;/strong&gt;（即行号和列号），用&lt;u&gt;三元组$(i,j,a_{ij})$可唯一确定矩阵$A$中的一个元素&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用三元组表来存储这些三元组。稀疏矩阵的三元组表的顺序存储结构称为&lt;strong&gt;三元组顺序表&lt;/strong&gt;，常用的三元组表的链式存储结构是&lt;strong&gt;十字链表&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;树&#34;&gt;树&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;结构是一种&lt;strong&gt;非线性结构&lt;/strong&gt;，该结构中的一个数据元素可以有&lt;strong&gt;两个或两个以上的直接后继&lt;/strong&gt;元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;（Tree）是 $n(n\ge0)$ 个结点的有限集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空树&lt;/strong&gt;：$n=0$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非空树&lt;/strong&gt;：$n&amp;gt;0$，
&lt;ul&gt;
&lt;li&gt;有且仅有一个&lt;strong&gt;根结点&lt;/strong&gt;，&lt;/li&gt;
&lt;li&gt;除根节点外的其余结点可分为 $m(m&amp;gt;0)$ 个互不相交的集合，即&lt;strong&gt;子树&lt;/strong&gt;（SubTree）$T_1,T_2,\cdots,T_m$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;树的定义是&lt;strong&gt;递归&lt;/strong&gt;的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一棵树由若干棵子树构成；&lt;/li&gt;
&lt;li&gt;子树又由更小的子树构成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;h3 id=&#34;术语&#34;&gt;术语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;度&lt;/strong&gt;：结点拥有的子树数。整个树的度是树内各结点度的最大值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;叶结点&lt;/strong&gt;：度为 0 的结点，也称&lt;strong&gt;终端结点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非终端结点&lt;/strong&gt;：度不为 0 的结点，也称&lt;strong&gt;分支结点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部结点&lt;/strong&gt;：除根节点外的非终端结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子节点&lt;/strong&gt;：结点&lt;u&gt;子树的根结点&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;父结点&lt;/strong&gt;：与子结点相连的上一层的唯一一个结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兄弟结点&lt;/strong&gt;：同一个父节点的子节点之间互为兄弟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;祖先结点&lt;/strong&gt;：从根结点到该结点所经分支上的所有结点（包括其父节点，但不包括其本身）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子孙结点&lt;/strong&gt;：以某结点为根的子树中的所有结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堂兄弟结点&lt;/strong&gt;：父节点在同一层（但不是同一个）的结点互为堂兄弟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层次&lt;/strong&gt;：以根结点为第一层，根的子节点为第二层 …… 树中任意结点的层次等于其父节点的层次加 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树的高度&lt;/strong&gt;：树中结点的最大层次，也称&lt;strong&gt;树的深度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;森林&lt;/strong&gt;：是 $m(m\ge0)$ 棵互不相交的树的集合。树中每个结点的子树的集合即为森林。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树的类型&#34;&gt;树的类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有序树&lt;/strong&gt;：树中结点的各子树从左到右是有次序的，即不能互换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无序树&lt;/strong&gt;：树中结点的各子树相互之间可以互换，没有次序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树的性质&#34;&gt;树的性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设$n$个结点的树，$d_i \ (1 \le i \le n)$为该树中结点的度：&lt;/p&gt;
&lt;p&gt;$$
n = (\sum_{i=1}^{n}{d_i})+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;度为$m$的树中第$i$层上至多有$m^{i-1}$个结点（$i \ge 1$）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度为$h$的$m$度树至多有$\cfrac{m^h-1}{m-1}$个结点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;树的逻辑结构&#34;&gt;树的逻辑结构&lt;/h2&gt;
&lt;p&gt;树可以用二元组 $Tree=(root,F)$ 表示。其中 $root$ 是根结点，$F$ 是 $m(m\ge0)$ 棵子树的森林，即 $F=(T_1,T_2,\cdots,T_m)$，其中 $T_i=(r_i,F_i)$ 为根 $root$ 的第 $i$ 棵子树。&lt;/p&gt;
&lt;p&gt;树根与其子树森林之间的关系：
$$
RF = \{ &amp;lt;root,r_i&amp;gt;|i=1,2,4,m,\quad m&amp;gt;0 \}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;二叉树&#34;&gt;二叉树&lt;/h1&gt;
&lt;p&gt;二叉树是（$n \ge 0$）个结点的有限集合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空树：$n=0$；&lt;/li&gt;
&lt;li&gt;由一个根结点及两棵不相交的且分别称为左、右子树的二叉树所组成（两个子数顺序不可交换）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树同样具有递归性质。&lt;/p&gt;
&lt;p&gt;二叉树的性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第$i$层（$i \ge 1$）上&lt;u&gt;最多&lt;/u&gt;有$2^{i-1}$个结点。&lt;/p&gt;
&lt;p&gt;因为二叉树每个结点至多有两个分支（结点）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度为$k$的二叉树最多有$2^k-1$个结点（$k \ge 1$）。&lt;/p&gt;
&lt;p&gt;每层结点都取最大值后累加：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^{k}{2^{i-1}} = 2^k - 1
$$&lt;/p&gt;
&lt;p&gt;将深度为$k$且有$2^k-1$个结点的二叉树称为&lt;strong&gt;满二叉树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对满二叉树自上而下、从左至右进行编号（即层序遍历的顺序）。一个深度为$k$、有$n$个结点的二叉树，当且仅当其每一个结点都于深度为$k$的满二叉树中编号从1至$n$的结点一一对应时，称之为&lt;strong&gt;完全二叉树&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完全二叉树有一个隐藏关系：$n &amp;gt; 2^{k-1}-1$。即深度为$k$的完全二叉树，其结点数$n$必须要比深度为$k-1$的满二叉树至少多1个结点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;深度为$k$的满二叉树结点数$n$和其第$k$层结点数$m$的关系：&lt;/p&gt;
&lt;p&gt;$$
n = 2m-1
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任何一棵二叉树，若其终端结点数（度为0的结点数）为$n_0$，度2的结点数为$n_2$，则$n_0=n_2+1$。&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
终端结点数（度0结点数）=度2结点数+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有$n$个结点的完全二叉树的深度（高度）为：&lt;/p&gt;
&lt;p&gt;$$
\lfloor \log_2{n} \rfloor + 1;
$$&lt;/p&gt;
&lt;p&gt;或：&lt;/p&gt;
&lt;p&gt;$$
\lceil \log_2{(n+1)} \rceil
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树形态总数（卡特兰数）：&lt;/p&gt;
&lt;p&gt;$$
\cfrac{C^{n}_{2n}}{n+1}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;排列组合公式：&lt;/p&gt;
&lt;p&gt;$$
A^n_m = m \times (m-1) \times \cdots \times (m-n+1)
$$&lt;/p&gt;
&lt;p&gt;$m$是起点，$n$是次数。&lt;/p&gt;
&lt;p&gt;$$
C^n_m = \cfrac{A^n_m}{A^n_n}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;顺序存储结构-4&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;用一组地址连续的存储单元存储二叉树中的结点。&lt;/p&gt;
&lt;p&gt;可以按照为完全二叉树编号的顺序（即层序遍历的顺序），将二叉树映射到顺序表中：&lt;/p&gt;
&lt;p&gt;若编号为$i$的结点（$i \ge 1$），则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$i=1$：根结点，没有双亲（父结点）；&lt;/li&gt;
&lt;li&gt;$i&amp;gt;1$：双亲为$\left\lfloor \cfrac{i}{2} \right\rfloor$；&lt;/li&gt;
&lt;li&gt;$i \le \cfrac{n}{2}$：左孩子编号为$2i$；&lt;/li&gt;
&lt;li&gt;$i \le \cfrac{n-1}{2}$：右孩子编号为$2i+1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完全二叉树适合采用顺序存储结构，而一般二叉树则不适合。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-4&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;可以用&lt;strong&gt;三叉链表或二叉链表&lt;/strong&gt;来存储二叉树（一个结点含有3个或2个指针，其中必须有两个指针来分别存储左子树和右子树的根结点）。链表的头指针指向二叉树根结点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680770614240.png&#34;
	width=&#34;980&#34;
	height=&#34;337&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680770614240_hu74a2d83457551f99334a785fee2a7f2b_53953_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680770614240_hu74a2d83457551f99334a785fee2a7f2b_53953_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;二叉树的链表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;697px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三叉链表仅仅是多了一个指向父结点的链表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设有$n$个结点的二叉树，则其&lt;strong&gt;空指针域数量&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于二叉链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总指针域个数：$2n$；&lt;/li&gt;
&lt;li&gt;分支数（子孙结点数，非空指针域个数）：$n-1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;$$
空指针域数=2n-(n-1)=n+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于三叉链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总指针域个数：$3n$；&lt;/li&gt;
&lt;li&gt;分支数（子孙结点数）：$n-1$；&lt;/li&gt;
&lt;li&gt;指向父结点且非空的指针域个数：$n-1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即，非空指针域个数为：$2(n-1)$。&lt;/p&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;$$
空指针域数=3n-2(n-1)=n+2
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;遍历&#34;&gt;遍历&lt;/h2&gt;
&lt;p&gt;二叉树有以下遍历方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先序遍历：根左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问根结点；&lt;/li&gt;
&lt;li&gt;先序遍历左子树；&lt;/li&gt;
&lt;li&gt;先序遍历右子树。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中序遍历：左根右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中序遍历左子树；&lt;/li&gt;
&lt;li&gt;访问根结点；&lt;/li&gt;
&lt;li&gt;中序遍历右子树。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后序遍历：左右根&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后序遍历左子树；&lt;/li&gt;
&lt;li&gt;后序遍历右子树；&lt;/li&gt;
&lt;li&gt;访问根结点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后序遍历可以使用栈：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根结点入栈；&lt;/li&gt;
&lt;li&gt;右子树（如果有的话）按照步骤1至3顺序入栈（先入根结点，然后入右子树，再入左子树）；&lt;/li&gt;
&lt;li&gt;左子树（如果有的话）按照步骤1至3顺序入栈（先入根结点，然后入右子树，再入左子树）；&lt;/li&gt;
&lt;li&gt;将栈中所有元素出栈，出栈顺序即为后序遍历的顺序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;层序遍历：根据层序从上至下，从左到右遍历&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问根结点（第1层）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左到右访问第2层所有结点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左到右访问第3层所有结点；&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;直至访问到最后一层的所有结点（从左到右）。&lt;/p&gt;
&lt;p&gt;层序遍历可以使用队列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将根结点入队；&lt;/li&gt;
&lt;li&gt;将对头元素出队，然后将其左右子结点（如果有的话）依序入队；&lt;/li&gt;
&lt;li&gt;重复步骤2直至所有元素出队，出队顺序即为层序遍历顺序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;二叉树的遍历实质上是对一个非线性结构进行线性化的过程，它使得每个结点（除第一个和最后一个）在这些线性序列中有且仅有一个直接前驱和直接后继。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;平衡二叉树&#34;&gt;平衡二叉树&lt;/h2&gt;
&lt;p&gt;二叉树可以用于快速查找。例如比根结点小的在左子树，比根结点大的在右子树（二叉排序树）。那么每次查找，根据根结点就可以剔除一半的范围。&lt;/p&gt;
&lt;p&gt;但是如果二叉树左右子树的结点数量差别很大，那么每次查找并不一定能剔除一半的范围，查询效率大打折扣。&lt;/p&gt;
&lt;p&gt;设一个二叉树的左右子树高度之差的绝对值为$d$，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不平衡的二叉树：$d &amp;gt; 1$；&lt;/li&gt;
&lt;li&gt;平衡的二叉树：$d \le 1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;完全二叉树一定是平衡二叉树，平衡二叉树不一定是完全二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二叉排序树&#34;&gt;二叉排序树&lt;/h2&gt;
&lt;p&gt;二叉排序树的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;左子树&lt;/strong&gt;所有结点的关键字都&lt;strong&gt;小于&lt;/strong&gt;根结点；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右子树&lt;/strong&gt;所有根结点的关键字都&lt;strong&gt;大于&lt;/strong&gt;根结点；&lt;/li&gt;
&lt;li&gt;左右子树也都是二叉排序树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉排序树的&lt;strong&gt;中序遍历&lt;/strong&gt;（左根右）得到的是该二叉树的&lt;strong&gt;有序序列&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;线索二叉树&#34;&gt;线索二叉树&lt;/h2&gt;
&lt;p&gt;线索二叉树是在二叉树结点中保存了结点的前驱和后继的信息。&lt;/p&gt;
&lt;p&gt;如果使用指针来指向其前驱和后继，增加指针信息会降低存储空间的利用率。&lt;/p&gt;
&lt;p&gt;可以采用增加两个标志（&lt;code&gt;leftTag&lt;/code&gt;和&lt;code&gt;rightTag&lt;/code&gt;）来区分指针域指向的是左或右子结点还是前驱或后继：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;leftTag&lt;/td&gt;
        &lt;td&gt;leftChild&lt;/td&gt;
        &lt;td&gt;data&lt;/td&gt;
        &lt;td&gt;rightChild&lt;/td&gt;
        &lt;td&gt;rightTag&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;$$
leftTag =
\begin{cases}
True  &amp;amp; leftChild指向结点左孩子 \\
False &amp;amp; leftChild指向结点的直接前驱
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;$$
rightTag =
\begin{cases}
True  &amp;amp; rightChild指向结点右孩子 \\
False &amp;amp; rightChild指向结点的直接后继
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;若二叉树的二叉链表采用以上所示的结点结构，则相应的链表称为线索链表，其中指向结点前驱、后继的指针称为线索。&lt;/p&gt;
&lt;p&gt;对二叉树以某种次序遍历使其成为线索二叉树的过程称为线索化。&lt;/p&gt;
&lt;h2 id=&#34;哈夫曼树&#34;&gt;哈夫曼树&lt;/h2&gt;
&lt;p&gt;哈夫曼树即最优二叉树，是一类&lt;strong&gt;带权路径长度最短&lt;/strong&gt;的树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;：指从树中&lt;strong&gt;一个结点到另一个结点之间的通路&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径长度&lt;/strong&gt;：路径上的&lt;strong&gt;分支数目&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;树的路径长度&lt;/strong&gt;：指从树根到每一个叶子之间的路径长度之和；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结点的带权路径长度&lt;/strong&gt;：从该结点到树根之间的&lt;strong&gt;路径长度&lt;/strong&gt;与该结点&lt;strong&gt;权值&lt;/strong&gt;的乘积；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;树的带权路径长度&lt;/strong&gt;：树中所有叶子结点的带权路径长度之和。&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带权叶子结点数：$n$；&lt;/li&gt;
&lt;li&gt;叶子结点的权值：$w_k$；&lt;/li&gt;
&lt;li&gt;叶子结点到根的路径长度：$l_k$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则树的带权路径长度为：&lt;/p&gt;
&lt;p&gt;$$
WPL = \sum_{k=1}^{n}{w_kl_k}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈夫曼树是指权值为$w_1,w_2,\cdots,w_n$的$n$个叶子结点的二叉树中，带权路径长度最小的二叉树。&lt;/p&gt;
&lt;p&gt;构造最优二叉树的哈夫曼算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据给定的$n$个权值$\{ w_1,w_2,\cdots,w_n \}$，构成$n$棵二叉树集合$F=\{T_1,T_2,\cdots,T_n\}$，每棵树$T_i$有且仅有一个带权为$w_i$的根结点。&lt;/li&gt;
&lt;li&gt;在$F$中选取2棵权值最小的树作为左、右子树，构造一棵新二叉树。新二叉树的根结点权值为其左右子树根结点权值之和。&lt;/li&gt;
&lt;li&gt;从$F$中删除这2棵树，并将新树加入到$F$中。&lt;/li&gt;
&lt;li&gt;重复步骤2、3直到$F$中仅含一棵树为止，这棵树便是哈夫曼树。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈夫曼算法并未规定哪棵树作为左或右子树，所以哈夫曼树并不唯一，但$WPL$值是唯一的。&lt;/p&gt;
&lt;p&gt;给定$n$个权值后，哈夫曼树的结点数$m$就确定了：&lt;/p&gt;
&lt;p&gt;$$
m = 2 \times n - 1
$$&lt;/p&gt;
&lt;p&gt;所以可用一维数组存储哈夫曼树。&lt;/p&gt;
&lt;h3 id=&#34;哈夫曼编码&#34;&gt;哈夫曼编码&lt;/h3&gt;
&lt;p&gt;哈夫曼编码是一种不等长的编码，它用哈夫曼算法来构造出最优前缀码：&lt;/p&gt;
&lt;p&gt;给定&lt;strong&gt;字符集&lt;/strong&gt;$D=\{ d_1,d_2,\cdots,d_n \}$及&lt;strong&gt;字符的使用频率&lt;/strong&gt;$W=\{w_1,w_2,\cdots,w_n\}$。&lt;/p&gt;
&lt;p&gt;构造&lt;strong&gt;最优前缀码&lt;/strong&gt;的方法为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以$d_1,d_2,\cdots,d_n$作为叶子结点，$w_1,w_2,\cdots,w_n$作为叶子结点的权值，构造出一棵最优二叉树。&lt;/li&gt;
&lt;li&gt;将树中每个结点的左分支标上0，右分支标上1（左0右1）。&lt;/li&gt;
&lt;li&gt;每个叶子结点代表字符的编码就是从根到叶子的路径上组成的0、1串。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680836524813.png&#34;
	width=&#34;347&#34;
	height=&#34;334&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680836524813_hu78baa79acc8330412526e447ee3074d0_24961_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680836524813_hu78baa79acc8330412526e447ee3074d0_24961_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;哈夫曼编码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;249px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中，字符$a$字符$b$、$c$、$d$、$e$的编码分别为00、01、100、11、101。&lt;/p&gt;
&lt;h3 id=&#34;压缩比&#34;&gt;压缩比&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680959771881.png&#34;
	width=&#34;784&#34;
	height=&#34;489&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680959771881_hu4f7b4b1585cf7b1f2369bc9d93906f07_66292_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1680959771881_hu4f7b4b1585cf7b1f2369bc9d93906f07_66292_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;压缩比例题&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按照&lt;u&gt;出现频率&lt;/u&gt;计算&lt;u&gt;加权平均长度&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;$$
加权平均长度 = \sum_{i=1}^{5}{字符i的位数 \times 字符i出现频率}
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
1 \times 40% + 3 \times (10% + 20% + 16% + 14%) = 2.2
$$&lt;/p&gt;
&lt;p&gt;压缩后平均长度为2.2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算压缩比：&lt;/p&gt;
&lt;p&gt;$$
压缩比 = \cfrac{压缩前编码长度 - 压缩后平均长度}{压缩前编码长度}
$$&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编码5个字符至少需要3位：$2^2 &amp;lt; 5 &amp;lt; 2^3$，所以压缩前编码长度为3；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压缩比：&lt;/p&gt;
&lt;p&gt;$$
\cfrac{3-2.2}{3} \approx 0.27
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;哈夫曼编码方案是基于贪心策略的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;图&#34;&gt;图&lt;/h1&gt;
&lt;p&gt;在图中，任意两个结点之间都可能有直接的关系，所以图中&lt;u&gt;一个结点的前驱结点和后继结点的数目是没有限制的&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;图$G$是由集合$V$和$E$构成的二元组，记作$G=(V,E)$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顶点&lt;/strong&gt;：表示数据元素。$V$是图中顶点的非空有限集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边&lt;/strong&gt;：表示数据元素之间的关系。$E$是图中边的有限集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图可分为两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有向图&lt;/strong&gt;：有向图顶点之间的关系称为弧（或有向边），用$&amp;lt;v_i,v_j&amp;gt;$表示，$v_i$是&lt;strong&gt;弧尾&lt;/strong&gt;（始点或起点），$v_j$是&lt;strong&gt;弧头&lt;/strong&gt;（终点，箭头指向的顶点），即有向边是指&lt;u&gt;从弧尾指向弧头&lt;/u&gt;的一条边。$&amp;lt;v_i,v_j&amp;gt;$和$&amp;lt;v_j,v_i&amp;gt;$分别表示的是两条边。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无向图&lt;/strong&gt;：无向图顶点之间的关系用$(v_i,v_j)$表示。$(v_i,v_j)$和$(v_j,v_i)$表示的是同一条边。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;术语-1&#34;&gt;术语&lt;/h2&gt;
&lt;h3 id=&#34;完全图&#34;&gt;完全图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;完全图&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无向完全图&lt;/strong&gt;：指一个有$n$个顶点的无向图，其每一个顶点与其他$n-1$个顶点之间都有边。&lt;/p&gt;
&lt;p&gt;$n$个顶点的无向完全图共有$\cfrac{n(n-1)}{2}$条边：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^{n}{i} = \cfrac{n(n-1)}{2}
$$&lt;/p&gt;
&lt;p&gt;假设$n$个顶点的无向完全图，为他们编上1到$n$的编号，按照编号顺序计算边，第1个顶点跟其他$n-1$个顶点有$n$条边；第2个顶点跟其他$n-1$个顶点也有$n$条边，除去1条跟第1个顶点相连的边，有$n-1$条不一样的边；第3个顶点出去2条跟第1和第2个顶点相连的边，有$n-2$条不一样的边……以此类推，得出上方公式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有向完全图&lt;/strong&gt;：指一个有$n$个顶点的有向图，以其每一个顶点为始点与其他$n-1$个顶点之间都有弧。&lt;/p&gt;
&lt;p&gt;$n$个顶点的有向完全图共有$n(n-1)$条边：&lt;/p&gt;
&lt;p&gt;$$
\prod_{i=1}^{n}{n-1} = n(n-1)
$$&lt;/p&gt;
&lt;p&gt;有向完全图的$n$个顶点都有$n-1$条以其他顶点作为终点的弧（出度为$n-1$），并且这$n$个顶点的$n-1$条弧都是不同的弧，所以可推出上方公式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;度&#34;&gt;度&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;度&lt;/strong&gt;：顶点$v$的度是指关联于该顶点的边的数目，记作$D(v)$。&lt;/p&gt;
&lt;p&gt;若为有向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入度&lt;/strong&gt;：以该顶点为终点的有向边的数目，记为$ID(v)$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出度&lt;/strong&gt;：以该顶点为起点的有向边的数目，记为$OD(v)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有向图度与入度、出度的关系：&lt;/p&gt;
&lt;p&gt;$$
D(v) = ID(v) + OD(v)
$$&lt;/p&gt;
&lt;p&gt;对于所有的图，顶点数$n$、边数$e$与各顶点的度之间有：&lt;/p&gt;
&lt;p&gt;$$
e = \cfrac{1}{2} \sum_{i=1}^{n}{D(v_i)}
$$&lt;/p&gt;
&lt;p&gt;即，所有顶点的度数之和 $= 2e$。&lt;/p&gt;
&lt;h3 id=&#34;路径&#34;&gt;路径&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无向图$G$中的路径：从顶点$v_p$到顶点$v_q$的路径是指存在一个顶点序列$v_p,v_{i1},v_{i2},\cdot,v_{in},v_q$，使得$(v_p,v_{i1}),(v_{i1},v_{i2}),\cdots,(v_{in},v_q) \in E(G)$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无向图$G$中的路径：从顶点$v_p$到顶点$v_q$的路径是指存在一个顶点序列$v_p,v_{i1},v_{i2},\cdot,v_{in},v_q$，使得$&amp;lt;v_p,v_{i1}&amp;gt;,&amp;lt;v_{i1},v_{i2}&amp;gt;,\cdots,&amp;lt;v_{in},v_q&amp;gt; \in E(G)$。&lt;/p&gt;
&lt;p&gt;无向图中的路径也是有方向的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;子图&#34;&gt;子图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;子图&lt;/strong&gt;：若有两个图$G=(V,E)$和$G&#39;=(V&#39;,E&#39;)$，如果$V&#39; \sube V$且$E&#39; \sube E$，则称$G&#39;$为$G$的子图。&lt;/p&gt;
&lt;h3 id=&#34;连通图&#34;&gt;连通图&lt;/h3&gt;
&lt;p&gt;对于无向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连通&lt;/strong&gt;：无向图中，若从顶点$v_i$到顶点$v_j$&lt;u&gt;有路径&lt;/u&gt;，则称顶点$v_i$和顶点$v_j$是联通的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连通图&lt;/strong&gt;：若无向图中&lt;u&gt;任意两个顶点都是联通的&lt;/u&gt;，称其为连通图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连通分量&lt;/strong&gt;：无向图$G$的&lt;strong&gt;极大连通子图&lt;/strong&gt;称为$G$的连通分量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$n$个结点的连通图，它的边的取值范围是$[n-1,\cfrac{n(n-1)}{2}]$。&lt;/p&gt;
&lt;p&gt;对于有向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强连通图&lt;/strong&gt;：在有向图$G$中，如果对于每一对顶点，$v_i,v_j\in V$ 且 $v_i \neq v_j$，从顶点$v_i$到顶点$v_j$和从顶点$v_j$到顶点$v_i$都存在路径，则称图$G$为强连通图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强连通分量&lt;/strong&gt;：有向图中的&lt;strong&gt;极大连通子图&lt;/strong&gt;称为有向图的强连通分量。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;连通图是无向图中的一种，所以一般也称为无向连通图。&lt;/p&gt;
&lt;p&gt;强连通图是有向图的一种，一般也称为有向强连通图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;网&#34;&gt;网&lt;/h3&gt;
&lt;p&gt;边（或弧）带权值的图称为网。&lt;/p&gt;
&lt;h3 id=&#34;有向树&#34;&gt;有向树&lt;/h3&gt;
&lt;p&gt;如果一个有向图恰&lt;u&gt;有一个顶点的入度为0（作为root），其余顶点的入度均为1&lt;/u&gt;，则是一棵有向树。&lt;/p&gt;
&lt;h2 id=&#34;基本存储结构&#34;&gt;基本存储结构&lt;/h2&gt;
&lt;p&gt;图的基本存储结构有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵表示法：使用矩阵存储顶点关系，适合存储边比较多的图；&lt;/li&gt;
&lt;li&gt;邻接链表表示法：使用多个单链表存储顶点关系，适合存储边比较少的图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;邻接矩阵表示法&#34;&gt;邻接矩阵表示法&lt;/h3&gt;
&lt;p&gt;图的邻接矩阵表示法是指&lt;u&gt;用矩阵来表示图中顶点之间的关系&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对于具有$n$个顶点的图$G=(V,E)$，其邻接矩阵是一个$n$阶方阵，且满足：&lt;/p&gt;
&lt;p&gt;$$
A[i][j] =
\begin{cases}
1 &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt;是E中的边 \\
0 &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt;不是E中的边
\end{cases}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即，横$i$竖$j$，横出竖入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无向图的邻接矩阵是对称矩阵，有向图的邻接矩阵则不一定对称。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无向图：顶点$v_i$的度是邻接矩阵第$i$行（或列）中值不为0的元素个数；&lt;/li&gt;
&lt;li&gt;有向图：第$i$行的非0元素个数是顶点$v_i$的出度$OD(v_i)$；第$i$列的非0元素个数是顶点$v_i$的入度$ID(v_j)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网（赋权图）的邻接矩阵定义（$W_{ij}$是边或弧上的权值）：&lt;/p&gt;
&lt;p&gt;$$
A[i][j] =
\begin{cases}
W_{ij} &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt; \in E \\
\infin &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt; \notin E
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;邻接矩阵适合用于存储边比较多的图。&lt;/p&gt;
&lt;h3 id=&#34;邻接链表表示法&#34;&gt;邻接链表表示法&lt;/h3&gt;
&lt;p&gt;邻接链表表示法指的是&lt;u&gt;为图的每个顶点建立一个单链表&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;边结点（表结点）：&lt;/p&gt;
  &lt;table&gt;
      &lt;tr&gt;
          &lt;td&gt;adjvex&lt;/td&gt;
          &lt;td&gt;nextarc&lt;/td&gt;
          &lt;td&gt;info&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adjvex&lt;/code&gt;：指示与顶点$v_i$邻接的顶点的序号；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextarc&lt;/code&gt;：指示下一条边或弧的结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;：存储与边或弧有关的信息，如权值等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表头结点（顶点结点）：&lt;/p&gt;
  &lt;table&gt;
      &lt;tr&gt;
          &lt;td&gt;data&lt;/td&gt;
          &lt;td&gt;firstarc&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：存储顶点$v_i$的名或其他有关信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstarc&lt;/code&gt;：指示链表中的第一个结点（邻接顶点）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表头结点通常以顺序存储结构存储，以便随机访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于有向图，&lt;strong&gt;邻接链表&lt;/strong&gt;存储的是以当前结点作为&lt;strong&gt;起点&lt;/strong&gt;的弧；&lt;strong&gt;逆邻接链表&lt;/strong&gt;存储的是以当前结点作为&lt;strong&gt;终点&lt;/strong&gt;的弧。&lt;/p&gt;
&lt;p&gt;邻接链表适合用于存储边比较少的图。&lt;/p&gt;
&lt;h2 id=&#34;遍历-1&#34;&gt;遍历&lt;/h2&gt;
&lt;p&gt;图的遍历是指&lt;u&gt;从某个项点出发，沿着某条搜索路径对图中的所有项点进行访问且只访问一次的过程&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&#34;深度优先搜索&#34;&gt;深度优先搜索&lt;/h3&gt;
&lt;p&gt;深度优先搜索（Depth First Search，DFS）类似于树的先序遍历。从图$G$中任一结点$v$出发按深度优先搜索法进行遍历的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置搜索指针$p$，使$p$指向顶点$v$；&lt;/li&gt;
&lt;li&gt;访问$p$所指顶点，并使$p$指向与其&lt;u&gt;相邻接的且尚未被访问过&lt;/u&gt;的顶点。&lt;/li&gt;
&lt;li&gt;若$p$所指顶点存在，则重复步骤2，否则执行步骤4。&lt;/li&gt;
&lt;li&gt;沿着访问的次序和方向回溯到最后一个有未被访问过的邻接顶点的顶点，并使$p$指向这个未被访问的顶点，然后重复步骤2到4，直到所有的项点均被访问为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;时间复杂度（$n$为顶点数，$e$为边数）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵：$O(n^2)$；&lt;/li&gt;
&lt;li&gt;邻接链表：$O(n+e)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;/h3&gt;
&lt;p&gt;图的广度优先搜索（Breadth First Search，BFS）步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从图中的某个顶点$v$出发；&lt;/li&gt;
&lt;li&gt;访问$v$后，依次访问$v$的各个未被访问过的邻接点；&lt;/li&gt;
&lt;li&gt;分别从$v$的邻接点出发，依次访问它们的邻接点；&lt;/li&gt;
&lt;li&gt;按照$v$的邻接点访问的先后顺序，重复步骤2到4，直到图中所有已被访问的项点的邻接点都被访问到；&lt;/li&gt;
&lt;li&gt;若此时还有未被访问的顶点，则另选图中的一个未被访问的项点作为起点，重复上述过程，直到图中所有的顶点都被访问到为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;广度优先搜索可以引入队列来保存已访问过的顶点序列。即，每当一个顶点被访问后，就将其放入队列中；当队头顶点出队时，就访问其未被访问的邻接点并令这些邻接顶点入队。每个顶点最多入队一次。&lt;/p&gt;
&lt;p&gt;广度和深度优先搜索遍历图的&lt;u&gt;时间复杂度相同&lt;/u&gt;（$n$为顶点数，$e$为边数）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵：$O(n^2)$；&lt;/li&gt;
&lt;li&gt;邻接链表：$O(n+e)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;广度和深度优先搜索遍历图的不同之处在于：&lt;u&gt;顶点访问的次序不同&lt;/u&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;生成树&#34;&gt;生成树&lt;/h2&gt;
&lt;p&gt;连通图的生成树是该图的极小连通子图（都是$n-1$条边）。&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;非连通图&lt;/strong&gt;而言，每个连通分量中的顶点集和遍历时走过的边集一起构成若干棵生成树，把它们称为&lt;strong&gt;非连通图的生成树森林&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在图的生成树中任一加一条边，则必然形成回路。&lt;/p&gt;
&lt;p&gt;边数为$e$，$e \ge n$则必然形成回路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图的生成树不是唯一的。&lt;/p&gt;
&lt;p&gt;按深度和广度优先搜索进行遍历将得到不同的生成树，分别称为深度优先生成树和广度优先生成树。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最小生成树&#34;&gt;最小生成树&lt;/h3&gt;
&lt;p&gt;连通网的生成树的边也带权，把生成树各边的权值总和称为生成树的权。&lt;u&gt;权值最小的生成树称为最小生成树&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&#34;aov-网&#34;&gt;AOV 网&lt;/h2&gt;
&lt;p&gt;一个大工程项目可以分为许多较小子工程（称为活动）。有向图中，用顶点表示活动，弧表示活动之间的优先级关系（活动进行时的制约关系），称这样的有向图为&lt;u&gt;以顶点表示活动的网&lt;/u&gt;（Activity On Vertex network，AOV网）。&lt;/p&gt;
&lt;p&gt;在AOV网中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从顶点$v_i$到$v_j$有一条有向路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$v_i$是$v_j$的前驱，&lt;/li&gt;
&lt;li&gt;$v_j$是$v_i$的后继；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$&amp;lt;v_i,v_j&amp;gt;$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$v_i$是$v_j$的直接前驱，&lt;/li&gt;
&lt;li&gt;$v_j$是$v_i$的直接后继。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOV网中不应出现有向环。检测工程是否可行，首先应检查对应AOV网是否存在回路。不存在回路的有向图称为有向无环图（DAG，Directed Acycline Graph）。&lt;/p&gt;
&lt;h2 id=&#34;拓扑排序&#34;&gt;拓扑排序&lt;/h2&gt;
&lt;p&gt;检测AOV网是否是DAG的方法是对AOV网构造其&lt;u&gt;顶点的拓扑有序序列&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;拓扑排序是将AOV网中的所有顶点排成一个线性序列的过程，并且该序列满足：若在AOV网中从顶点$v_i$到$v_j$有一条路径，则在该线性序列中，$v_i$必在$v_j$之前。对AOV网进行拓扑排序的方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在AOV网中选择一个入度为0（没有前驱）的顶点且输出它。&lt;/li&gt;
&lt;li&gt;从网中删除该顶点及与该顶点有关的所有弧。&lt;/li&gt;
&lt;li&gt;重复上述两步，直到网中不存在入度为0的顶点为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两种结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有顶点已输出，说明网中不存在回路。&lt;/li&gt;
&lt;li&gt;尚有未输出的顶点，剩余顶点均有前驱顶点，表面网中存在回路。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有向无环图的拓扑序列中，顶点$v_i$在$v_j$之前，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能存在弧$&amp;lt;v_i,v_j&amp;gt;$，一定不存在弧$&amp;lt;v_j,v_i&amp;gt;$；&lt;/li&gt;
&lt;li&gt;可能存在$v_i$到$v_j$的路径，一定不存在$v_j$到$v_i$的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681115534531.png&#34;
	width=&#34;133&#34;
	height=&#34;173&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681115534531_hu9a36ad2327d0139feeb1c8e76c812997_7356_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681115534531_hu9a36ad2327d0139feeb1c8e76c812997_7356_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AOV网拓扑排序例子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;76&#34;
		data-flex-basis=&#34;184px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上图拓扑排序的结果为：6,1,4,3,2,5（结果并不唯一）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当有向图中无环时，也可以利用深度优先遍历进行逆拓扑排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;查找&#34;&gt;查找&lt;/h1&gt;
&lt;p&gt;查找是一种常用的基本运算。查找表是指由同一类型的数据元素（或记录）构成的集合。&lt;/p&gt;
&lt;p&gt;查找表经常要进行的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询某个特定的数据元素是否在查找表中。&lt;/li&gt;
&lt;li&gt;检索某个特定的数据元素的各种属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常将只进行这两种操作的查找表称为&lt;strong&gt;静态查找表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;查找表经常要进行的另外两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在查找表中插入一个数据元素。&lt;/li&gt;
&lt;li&gt;从查找表中删除一个数据元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要在查找表中插入或删除元素，称此类查找表为&lt;strong&gt;动态查找表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;是数据元素（或记录）的某个数据项的值，用它来识别（标识）这个数据元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主关键字&lt;/strong&gt;：能唯一标识一个数据元素的关键字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;次关键字&lt;/strong&gt;：能标识多个数据元素的关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;平均查找长度&#34;&gt;平均查找长度&lt;/h2&gt;
&lt;p&gt;查找算法基本操作是&lt;u&gt;“将记录的关键字与给定值进行比较”&lt;/u&gt;。因此，通常&lt;u&gt;以“其关键字和给定值进行过比较的记录个数的期望值”作为衡量查找算法好坏的依据&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;查找算法在查找成功时的&lt;u&gt;平均查找长度&lt;/u&gt;关键字和给定值比较次数的期望值：&lt;/p&gt;
&lt;p&gt;$$
ASL = \sum_{i=1}^{n}{P_iC_i}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$P_i$为对表中第$i$个记录进行查找的概率，&lt;/p&gt;
&lt;p&gt;一般认为$P_i=\cfrac{1}{n}, 1 \le i \le n$，即$\sum_{i=1}^{n}{P_i}$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$C_i$为查找成功时，已经进行过比较的关键字个数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查找算法&#34;&gt;查找算法&lt;/h2&gt;
&lt;p&gt;静态查找表有以下查找方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序查找；&lt;/li&gt;
&lt;li&gt;折半查找；&lt;/li&gt;
&lt;li&gt;分块查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态查找表有以下查找方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉排序树；&lt;/li&gt;
&lt;li&gt;平衡排序树；&lt;/li&gt;
&lt;li&gt;B-树；&lt;/li&gt;
&lt;li&gt;哈希表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;顺序查找&#34;&gt;顺序查找&lt;/h3&gt;
&lt;p&gt;顺序查找是从表的一端开始，按照顺序（从左往右或从右往左）逐一进行查找。顺序查找的方法&lt;u&gt;对于&lt;strong&gt;顺序存储方式&lt;/strong&gt;和&lt;strong&gt;链式存储方式&lt;/strong&gt;的查找表都适用&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;顺序查找中，$C_i$取决于所查记录在表中的位置。一般情况下，$C_i = n - i + 1$，在等概率下，顺序查找的平均查找长度为：&lt;/p&gt;
&lt;p&gt;$$
ASL_{ss} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i+1)} = \cfrac{n+1}{2}
$$&lt;/p&gt;
&lt;h3 id=&#34;二分查找&#34;&gt;二分查找&lt;/h3&gt;
&lt;p&gt;二分查找又叫折半查找，是在有序列表的基础上进行查找，每次查找可以筛掉一半的元素。步骤如下：&lt;/p&gt;
&lt;p&gt;以升序数列$L[0&amp;hellip;n-1]$为例，假设要查找的数为$x$：&lt;/p&gt;
&lt;p&gt;让$x$与数列中间位置的元素$L\left[ \left\lfloor \cfrac{n}{2} \right\rfloor \right]$进行比较，如果相等则返回该元素下标，否则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果$x$比中间元素小，递归地对中间元素左边的数列（比$x$小的元素）进行二分查找；&lt;/li&gt;
&lt;li&gt;如果$x$比中间元素大，递归地对中间元素右边的数列（比$x$大的元素）进行二分查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;折半查找的过程可用二叉树描述。$n$个结点的二叉树深度为$\lfloor log_2{n} \rfloor + 1$，折半查找进行比较的关键字个数最多不超过树的深度。所以，折半查找在查找成功时和给定值&lt;u&gt;进行比较的关键字个数最多为$\lfloor log_2{n} \rfloor + 1$&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;折半查找的平均查找长度（假设结点总数为$n=2^h-1$，即折半查找树为深度$h=log_2(n+1)$的满二叉树）：&lt;/p&gt;
&lt;p&gt;$$
ASL_{bs} = \cfrac{1}{n} \sum_{i=1}^{n}{i \times 2^{i-1}} = \cfrac{n+1}{n} log_2{(n+1)} - 1
$$&lt;/p&gt;
&lt;p&gt;当$n$值较大时，$ASL_{bs} \approx log_2{(n+1)} - 1$。&lt;/p&gt;
&lt;h1 id=&#34;哈希表&#34;&gt;哈希表&lt;/h1&gt;
&lt;p&gt;哈希表查找（又叫散列表查找）是通过散列技术，将存储位置和关键字构建一个确定的关系$H$，使得每个关键字$key$对应一个存储位置$H(key)$。其中，$H$称为哈希函数或者散列函数。&lt;/p&gt;
&lt;p&gt;根据设定的&lt;strong&gt;哈希函数&lt;/strong&gt;$H(key)$和&lt;strong&gt;处理冲突的方法&lt;/strong&gt;，将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这块连续的空间称为哈希表或散列表，这一映射过程称为&lt;strong&gt;哈希造表&lt;/strong&gt;或&lt;strong&gt;散列表&lt;/strong&gt;，所得的存储位置称为&lt;strong&gt;哈希地址&lt;/strong&gt;或&lt;strong&gt;散列地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于哈希表，主要考虑两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何构造哈希函数；&lt;/li&gt;
&lt;li&gt;如何解决冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;冲突&#34;&gt;冲突&lt;/h2&gt;
&lt;p&gt;对于某个哈希函数$H$和两个关键字$key_1$和$key_2$,如果$key_1 \neq key_2$，而$H(key_1)=H(key_2)$，则称为冲突。&lt;/p&gt;
&lt;p&gt;具有相同哈希函数值的关键字对该哈希函数来说称为同义词。&lt;/p&gt;
&lt;p&gt;一般情况下，冲突只能尽可能减少而不能完全避免。&lt;/p&gt;
&lt;h2 id=&#34;哈希函数的构造方法&#34;&gt;哈希函数的构造方法&lt;/h2&gt;
&lt;p&gt;常用的哈希函数构造方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接定址法；&lt;/li&gt;
&lt;li&gt;数字分析法；&lt;/li&gt;
&lt;li&gt;平方取中法；&lt;/li&gt;
&lt;li&gt;折叠法；&lt;/li&gt;
&lt;li&gt;随机数法；&lt;/li&gt;
&lt;li&gt;除留余数法……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希函数的构造要考虑到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;压缩性：节省存储空间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;散列性：尽量减少冲突。&lt;/p&gt;
&lt;p&gt;要减少冲突，就要设法使哈希函数尽可能均匀地把关键字映射到存储区的各个存储单元。在构造哈希函数时，一般都要对关键字进行计算，且尽可能使关键字的所有组成部分都能起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;除留取余数法&#34;&gt;除留取余数法&lt;/h3&gt;
&lt;p&gt;除留取余数法是最常用的构造散列函数方法。&lt;/p&gt;
&lt;p&gt;除留取余数法：&lt;/p&gt;
&lt;p&gt;$$
f(key)=key \enspace mod \enspace p\quad (p\le m),\ m为散列表长
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$mod$ 是取模运算。&lt;/p&gt;
&lt;p&gt;根据经验，若散列表表长为$m$，通常$p$为小于或等于表长（最好接近$m$）的最小质数，可以更好的减小冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;冲突处理方法&#34;&gt;冲突处理方法&lt;/h2&gt;
&lt;p&gt;解决冲突就是为出现冲突的关键字找到另一个“空”的哈希地址。在处理冲突的过程中可能得到一个地址序列$H_i,(i=1,2,\dots,k)$。常见的处理冲突的方法有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放地址法；&lt;/li&gt;
&lt;li&gt;多重散列法（再哈希法）；&lt;/li&gt;
&lt;li&gt;链地址法；&lt;/li&gt;
&lt;li&gt;公共溢出区法……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开放地址法&#34;&gt;开放地址法&lt;/h3&gt;
&lt;p&gt;开放地址就是一旦发生冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并且记录它。&lt;/p&gt;
&lt;p&gt;有三种寻找空散列地址的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线性探测法（线性探测再散列）：&lt;/p&gt;
&lt;p&gt;$$
H_i=(H(key)+d) mod m
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$d$取$0,1,2,&amp;hellip;,m-1$；&lt;/li&gt;
&lt;li&gt;$m$为散列表的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$d$初始为0，如果有冲突，那么$d$就通过递增来寻找空的散列地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次探测法（二次探测再散列）：&lt;/p&gt;
&lt;p&gt;$$
H_i=(H(key)+q^2) mod m
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$q$取$0,1,-1,2,-2,&amp;hellip;,\pm k$，$k \le \cfrac{m}{2}$&lt;/li&gt;
&lt;li&gt;$m$为散列表的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二次探测法其实是对线性探测的一个优化，增加了平方可以不让关键字聚集在某一块区域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性探测法市能使第$i$个哈希地址的同义词存入第$i+1$个哈希地址，这样本应存入第$i+1$个哈希地址的元素变成了第$i+2$个哈希地址元素的同义词，……，因此，可能出现很多元素在相邻的哈希地址上“聚集”起来的现象，大大降低了查找效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;排序&#34;&gt;排序&lt;/h1&gt;
&lt;p&gt;排序算法有稳定排序和不稳定排序两种。假设待排序序列中，$R_i$和$R_j$关键字相同，即$k_i=k_j$，且$R_i$领先与$R_j$排序后&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定排序&lt;/strong&gt;：排序后$R_i$和$R_j$相对次序不变，$R_i$任领先于$R_j$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不稳定排序&lt;/strong&gt;：排序后可能出现$R_j$领先于$R_i$的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据记录存储的位置可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内部排序&lt;/strong&gt;：待排序记录存储在内存中进行排序的过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部排序&lt;/strong&gt;：排序记录的数量很大，内存无法容纳全部记录，在排序过程需要对外存进行访问的排序过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;排序过程需要进行的两种基本操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;比较两个关键字的大小。&lt;/p&gt;
&lt;p&gt;这种操作对于大多数排序方法来说是必需的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将记录从一个位置移动到另一个位置。&lt;/p&gt;
&lt;p&gt;这种操作可以通过改变记录的存储方式来避免。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;排序算法及其时间、空间复杂度：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;排序算法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;平均时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最坏时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最好时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;空间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;稳定性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;是否归位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;直接插入排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;希尔排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简单选择排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;堆排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冒泡排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;快速排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(log_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;归并排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;是否归位：在排序过程中，能否确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;选择排序&#34;&gt;选择排序&lt;/h2&gt;
&lt;p&gt;选择排序（Selection Sort）是一种简单直观的排序算法，无论什么数据进去都是 $O(n²)$ 的时间复杂度。&lt;/p&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。&lt;/li&gt;
&lt;li&gt;再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。&lt;/li&gt;
&lt;li&gt;重复步骤2，直到所有元素均排序完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectionSort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;// 走访未排序的元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 找到最小值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr[min])
                min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
        &lt;span style=&#34;color:#75715e&#34;&gt;// i 不是最小数时，将 i 和最小数进行交换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; min)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[i];
            arr[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[min];
            arr[min] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp; 
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(arr) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arr);
    selectionSort(arr, len);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr[i]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h2&gt;
&lt;p&gt;冒泡排序（Bubble Sort）是一种简单直观的排序算法。&lt;/p&gt;
&lt;p&gt;这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;p&gt;假设一个序列长度为n，m（m≤n）是已排序完成的在末尾的数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。对比结束后，最后的元素会是最大的数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对接下来n-m个未排序的数重复步骤1和2，直到没有任何一对数字需要比较。&lt;/p&gt;
&lt;p&gt;第一趟对序列中所有n个数进行比对，第二趟对序列中n-1个未排序完成的数进行比对，以此类推。每次比对的数为n-m。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bubbleSort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[j];
                arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
                arr[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
            }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(arr) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arr);
    bubbleSort(arr, len);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr[i]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;直接插入排序&#34;&gt;直接插入排序&lt;/h2&gt;
&lt;p&gt;直接插入排序的做法是：在插入第$i$个记录（$R_i$）时，序列中的前$i-1$个记录$R_1,R_2,\cdots,R_{i-1}$已排好序。将$R_i$与前面的有序序列做比较，找到应该插入的位置将$R_i$插入，并将插入位置后的记录依序向后移动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。&lt;/p&gt;
&lt;p&gt;对于基本有序的序列用直接插入排序效率是最高的。&lt;/p&gt;
&lt;p&gt;不归位：在排序过程中，不能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h2&gt;
&lt;p&gt;希尔排序又称为“缩小增量排序”，它是对直接插入排序方法的改进。&lt;/p&gt;
&lt;p&gt;希尔排序的基本思想是：先将整个待排记录序列分割成若干子序列，然后分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择一个增量序列$t_1,t_2,&amp;hellip;,t_k$，其中$t_i &amp;lt; t_{i-1}(1 \le i \le k),t_k = 1$；&lt;/p&gt;
&lt;p&gt;一般来说，$t_1 \le \cfrac{n}{2}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按增量序列个数$k$，对序列进行$k$趟排序；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每趟排序，根据对应的增量$t_i$，将待排序列分割成若干长度为$t_i$的子序列，分别对各子表进行直接插入排序。仅增量因子为$1$时，整个序列作为一个表来处理，表长度即为整个序列的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681209778321.png&#34;
	width=&#34;649&#34;
	height=&#34;460&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681209778321_hu3445f2349c32f6de565415fce2b1b7c8_87538_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1681209778321_hu3445f2349c32f6de565415fce2b1b7c8_87538_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;计数排序&#34;&gt;计数排序&lt;/h2&gt;
&lt;p&gt;计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。&lt;/p&gt;
&lt;p&gt;当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是$Θ(n + k)$。计数排序不是比较排序，排序的速度快于任何比较排序算法。&lt;/p&gt;
&lt;p&gt;由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计数排序是用来排序0到100之间的数字的最好的算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找出待排序的数组中最大和最小的元素。&lt;/li&gt;
&lt;li&gt;统计数组中每个值为 &lt;code&gt;i&lt;/code&gt;的元素出现的次数，存入数组 &lt;code&gt;C&lt;/code&gt;的第 &lt;code&gt;i&lt;/code&gt;项。&lt;/li&gt;
&lt;li&gt;对所有的计数累加（从 &lt;code&gt;C&lt;/code&gt;中的第一个元素开始，每一项和前一项相加）。&lt;/li&gt;
&lt;li&gt;反向填充目标数组：将每个元素 &lt;code&gt;i&lt;/code&gt;放在新数组的第 &lt;code&gt;C(i)&lt;/code&gt; 项，每放一个元素就将 &lt;code&gt;C(i)&lt;/code&gt; 减去 &lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;堆排序&#34;&gt;堆排序&lt;/h2&gt;
&lt;p&gt;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。&lt;/p&gt;
&lt;p&gt;堆积是一种近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;
&lt;p&gt;堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；&lt;/li&gt;
&lt;li&gt;小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将待排序的数组构造出一个堆 &lt;code&gt;H[0……n-1]&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把堆首（堆顶结点，即最大值）和堆尾（堆的最下层最右边的结点）互换；&lt;/p&gt;
&lt;p&gt;此时不再对原堆顶（最大值）进行操作，即原堆顶已经被“移出”，堆的长度缩小1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把新的数组顶端数据调整到相应位置；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复步骤 2 到 3，直到堆的尺寸为 1。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;快速排序&#34;&gt;快速排序&lt;/h2&gt;
&lt;p&gt;快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。&lt;/p&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从序列中选择一个元素作为“基准”（pivot）。&lt;/li&gt;
&lt;li&gt;将所有比基准数小的放在基准左边，所有比基准数大的放在基准右边（相同的数可以在任一边）。这个称为分区（partition）操作。&lt;/li&gt;
&lt;li&gt;分区完成后，该基准就会归到序列中的相应位置，该位置是排序完成后的位置。&lt;/li&gt;
&lt;li&gt;分别递归地把小于基准数的子序列（左边）和大于基准数的子序列（右边）重复执行1到3操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;归并排序&#34;&gt;归并排序&lt;/h2&gt;
&lt;p&gt;归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。&lt;/p&gt;
&lt;p&gt;作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自上而下的递归；&lt;/li&gt;
&lt;li&gt;自下而上的迭代。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；&lt;/li&gt;
&lt;li&gt;设定两个指针，最初位置分别为两个已经排序序列的起始位置；&lt;/li&gt;
&lt;li&gt;比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；&lt;/li&gt;
&lt;li&gt;重复步骤 3 直到某一指针达到序列尾；将另一序列剩下的所有元素直接复制到合并序列尾。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;不归位：在排序过程中，不能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
