<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>软件工程 on Linner&#39;s Blog</title>
        <link>https://blog.linner.asia/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
        <description>Recent content in 软件工程 on Linner&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Mon, 08 May 2023 10:02:34 +0000</lastBuildDate><atom:link href="https://blog.linner.asia/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>软件工程（软件设计师）</title>
        <link>https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</link>
        <pubDate>Mon, 08 May 2023 10:02:34 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</guid>
        <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;软件工程是指应用计算机科学、数学及管理科学等原理，以工程化的原则和方法来解决软件问题的工程，其目的是提高软件生产率、提高软件质量、降低软件成本。&lt;/p&gt;
&lt;p&gt;软件工程学：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件开发技术
&lt;ul&gt;
&lt;li&gt;软件开发方法学&lt;/li&gt;
&lt;li&gt;软件工具&lt;/li&gt;
&lt;li&gt;软件工程环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件工程管理
&lt;ul&gt;
&lt;li&gt;软件工程管理学&lt;/li&gt;
&lt;li&gt;软件经济学&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件工程涉及软件开发、维护、管理等多方面的原理、方法、工具与环境。&lt;/p&gt;
&lt;h2 id=&#34;计算机软件&#34;&gt;计算机软件&lt;/h2&gt;
&lt;p&gt;计算机软件是指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机系统中的程序：计算任务的处理对象和处理规则的描述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算任务：任何以计算机为处理工具的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据：如数字、文字、图形、图像、声音等，它们只是表示，而无含义。&lt;/li&gt;
&lt;li&gt;信息：数据及有关的含义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理规则：一般指处理的动作和步骤。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序文档：文档是为了便于了解程序所需的阐述性资料。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照软件的应用领域，可以将计算机软件分为十大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统软件&lt;/li&gt;
&lt;li&gt;应用软件&lt;/li&gt;
&lt;li&gt;工程/科学软件&lt;/li&gt;
&lt;li&gt;嵌入式软件&lt;/li&gt;
&lt;li&gt;产品线软件&lt;/li&gt;
&lt;li&gt;Web应用&lt;/li&gt;
&lt;li&gt;人工智能软件&lt;/li&gt;
&lt;li&gt;开放计算&lt;/li&gt;
&lt;li&gt;网络资源&lt;/li&gt;
&lt;li&gt;开源软件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件生存周期&#34;&gt;软件生存周期&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可行性分析与项目开发计划&lt;/li&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;/li&gt;
&lt;li&gt;编码&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件过程模型&#34;&gt;软件过程模型&lt;/h1&gt;
&lt;p&gt;软件开发中所遵循的路线图（一系列可预测的步骤）称为“软件过程”。过程是活动的集合，活动是任务的集合。&lt;/p&gt;
&lt;p&gt;软件过程有3层含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个体含义&lt;/li&gt;
&lt;li&gt;整体含义&lt;/li&gt;
&lt;li&gt;工程含义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;能力成熟度模型&#34;&gt;能力成熟度模型&lt;/h2&gt;
&lt;p&gt;软件过程能力成熟度模型（Capability Maturity Model of Software，CMM）是对软件组织进化阶段的描述，随着软件组织定义、实施、测量、控制和改进其软件过程，软件组织的能力经过这些阶段逐步提高。&lt;/p&gt;
&lt;p&gt;能力成熟度模型使软件组织能够较容易地确定其当前过程的成熟度并识别其软件过程执行中的薄弱环节，确定对软件质量和过程改进最为关键的几个问题，从而形成对其过程的改进策略。&lt;/p&gt;
&lt;p&gt;CMM将软件过程改进分为以下5个成熟度级别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始级&lt;/strong&gt;（Initial）：&lt;/p&gt;
&lt;p&gt;软件过程的特点是杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可重复级&lt;/strong&gt;（Repeatable）：&lt;/p&gt;
&lt;p&gt;建立了基本的项目管理过程和实践来跟踪项目费用、进度和功能特性；建立了有必要的过程准则来重复以前在同类项目中的成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;已定义级&lt;/strong&gt;（Defined）：&lt;/p&gt;
&lt;p&gt;管理和工程两方面的软件过程已经文档化、标准化，并综合成整个软件开发组织的标准软件过程。所有项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;己管理级&lt;/strong&gt;（Managed）：&lt;/p&gt;
&lt;p&gt;制定了软件过程和产品质量的详细度量标准。软件过程和产品质量都被开发组织的成员所理解和控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化级&lt;/strong&gt;（Optimized）：&lt;/p&gt;
&lt;p&gt;加强了定量分析，通过来自过程质量反馈和来自新观念、新技术的反馈使过程能不断持续地改进。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;能力成熟度模型集成&#34;&gt;能力成熟度模型集成&lt;/h2&gt;
&lt;p&gt;能力成熟度模型集成（CMMI）是若干过程模型的综合和改进，是支持多个工程学科和领域的、系统的、一致的过程改进框架，能适应现代工程的特点和需要，能提高过程的质量和工作效率&lt;/p&gt;
&lt;p&gt;CMMI提供了两种表示方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;阶段式模型&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;结构类以于CMM，它&lt;u&gt;关注组织的成熟度&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;CMMI-SE/SW/IPPD 1.1版中有5个成熟度等级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始的&lt;/strong&gt;：过程不可预测且缺乏控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;己管理的&lt;/strong&gt;：过程为项目服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已定义的&lt;/strong&gt;：过程为组织服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定量管理的&lt;/strong&gt;：过程已度量和控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化的&lt;/strong&gt;：集中于过程改进。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连续式模型&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;关注每个&lt;u&gt;过程域的能力&lt;/u&gt;，一个组织对不同的过程域可以达到不同的过程域&lt;strong&gt;能力等级&lt;/strong&gt;（Capability Level，&lt;strong&gt;CL&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;能力等级包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共性目标&lt;/li&gt;
&lt;li&gt;共性实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能力等级可以独立地应用于任何单独的过程域，任何一个能力等级都必须满足比它等级低的能力等级的所有准则。&lt;/p&gt;
&lt;p&gt;CMMI中包括6个过程域能力等级（0~5）：&lt;/p&gt;
  &lt;ol start=&#34;0&#34;&gt;
  &lt;li&gt;
      $CL_0$（未完成的）：
      &lt;br&gt;
      过程域&lt;u&gt;未执行&lt;/u&gt;或&lt;u&gt;未得到$CL_1$中定义的所有目标&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_1$（已执行的）：
      &lt;br&gt;
      其共性目标是&lt;u&gt;过程将可标识的输入工作产品转换成可标识的输出工作产品&lt;/u&gt;，以&lt;u&gt;实现支持过程域的特定目标&lt;/u&gt;。
      &lt;br&gt;
      关注于&lt;u&gt;过程域的特定目标的完成&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_2$（已管理的）：
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;已管理的过程的制度化&lt;/u&gt;。
      &lt;br&gt;
      关注于&lt;u&gt;针对单个过程实例的能力&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_3$（已定义级的）：
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;已定义的过程的制度化&lt;/u&gt;。
      &lt;br&gt;
      关注于&lt;u&gt;过程的组织级标准化和部署&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_4$（定量管理的）：
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;可定量管理的过程的制度化&lt;/u&gt;。
      &lt;br&gt;
      使用测量和质量保证来控制和改进过程域，建立和使用关于质量和过程执行的定量目标作为管理准则。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_5$（优化的）：
      &lt;br&gt;
      使用量化（统计学）手段改变和优化过程域，以满足客户要求的改变和持续改进计划中的过程域的功效。
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;优化的过程的制度化&lt;/u&gt;，表明&lt;u&gt;过程得到很好地执行&lt;/u&gt;且&lt;u&gt;持续得到改进&lt;/u&gt;。
  &lt;/li&gt;
  &lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;瀑布模型&#34;&gt;瀑布模型&lt;/h2&gt;
&lt;p&gt;瀑布模型（Waterfall Model）是&lt;u&gt;将软件生存周期中的各个活动规定为依线性顺序连接的若干阶段的模型&lt;/u&gt;（它规定了&lt;u&gt;由前至后、相互衔接的固定次序，如同瀑布流水逐级下落&lt;/u&gt;），包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需求分析&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行与维护&lt;/strong&gt;（运维）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683592633324.png&#34;
	width=&#34;380&#34;
	height=&#34;289&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683592633324_hu10aad72076ed5213bbae0299f40787a3_17688_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683592633324_hu10aad72076ed5213bbae0299f40787a3_17688_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;瀑布模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;315px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;瀑布模型假设：&lt;u&gt;一个待开发的系统需求是完整的、简明的、一致的&lt;/u&gt;，而且&lt;u&gt;可以先于设计和实现完成之前产生&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;瀑布模型的一个变体是&lt;strong&gt;V模型&lt;/strong&gt;。V模型&lt;u&gt;描述了质量保证活动和沟通、建模相关活动以及早期构建相关的活动之间的关系&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683593148604.png&#34;
	width=&#34;492&#34;
	height=&#34;423&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683593148604_hu8d0af94f252673c89f90c5f2916cf2f6_46173_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683593148604_hu8d0af94f252673c89f90c5f2916cf2f6_46173_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;V模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计、开发：随着软件团队工作沿着&lt;u&gt;V模型左侧步骤向下推进&lt;/u&gt;，&lt;u&gt;基本问题需求逐步细化&lt;/u&gt;，形成问题及解决方案的技术描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试：一旦编码结束，团队沿着&lt;u&gt;V模型右侧的步骤向上推进&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;其实际上是&lt;u&gt;执行了一系列测试&lt;/u&gt;（质量保证活动），这些测试&lt;u&gt;验证了团队沿着V模型左侧步骤向下推进过程中所生成的每个模型&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V模型提供了一种将验证确认活动应用于早期软件工程工作中的方法。&lt;/p&gt;
&lt;p&gt;瀑布模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易理解，管理成本低；&lt;/li&gt;
&lt;li&gt;强调开发的阶段性早期计划及需求调查和产品测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户必须能够完整、正确和清晰地表达他们的需要；&lt;/li&gt;
&lt;li&gt;在开始的两个或3个阶段中，很难评估真正的进度状态；&lt;/li&gt;
&lt;li&gt;当接近项目结束时，出现了大量的集成和测试工作；&lt;/li&gt;
&lt;li&gt;直到项目结束之前，都不能演示系统的能力；&lt;/li&gt;
&lt;li&gt;需求或设计中的错误往往只有到了项目后期才能够被发现，对于项目风险的控制能力较弱，从而导致项目常常延期完成，开发费用超出预算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瀑布模式适合用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;开发需求明确&lt;/u&gt;的，&lt;u&gt;需求大致固定且不会随意变更&lt;/u&gt;的系统；&lt;/li&gt;
&lt;li&gt;开发人员对软件的应用领域很熟悉；&lt;/li&gt;
&lt;li&gt;开发工作对用户参与的要求很低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增量模型&#34;&gt;增量模型&lt;/h2&gt;
&lt;p&gt;增量模型（Incremental Model）融合了&lt;u&gt;瀑布模型的基本成分&lt;/u&gt;和&lt;u&gt;原型实现的迭代特征&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;增量模型&lt;u&gt;假设可以将需求分段为一系列增量产品，每一增量可以分别开发&lt;/u&gt;。该模型采用&lt;u&gt;随着日程时间的进展而交错的线性序列&lt;/u&gt;，每一个线性序列产生软件的一个可发布的“增量”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683593818710.png&#34;
	width=&#34;747&#34;
	height=&#34;325&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683593818710_hudfc99a041ac3ab639e6b9eda80f6b6b9_59071_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683593818710_hudfc99a041ac3ab639e6b9eda80f6b6b9_59071_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;增量模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从分析到测试为一个增量的过程（线性序列）。&lt;/li&gt;
&lt;li&gt;第1个增量往往是核心的产品。&lt;/li&gt;
&lt;li&gt;客户对每个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每一个增量发布后不断重复，直到产生了最终的完善产品。&lt;/li&gt;
&lt;li&gt;增量模型强调&lt;u&gt;每一个增量均发布一个可操作的产品&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增量模型作为&lt;u&gt;瀑布模型的一个变体&lt;/u&gt;，具有瀑布模型的所有优点。此外，它还有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;第一个可交付版本所需要的成本和时间很少&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开发由增量表示的小系统所承担的风险不大&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;由于很快发布了第一个版本，因此&lt;u&gt;可以减少用户需求的变更&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;优先级高的功能先交付，使得重要的功能经历更多的测试。&lt;/li&gt;
&lt;li&gt;运行增量投资，即在项目开始时，可以仅对一个或两个增量投资。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有对用户的变更要求进行规划，那么&lt;u&gt;产生的初始增量可能会造成后来增量的不稳定&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;如果需求不像早期思考的那样稳定和完整，那么&lt;u&gt;一些增量就可能需要重新开发、重新发布&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;管理发生的成本、进度和配置的复杂性可能会超出组织的能力&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;量模型适合用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要快速构造可运行的产品的项目（对完成期限严格要求的产品）；&lt;/li&gt;
&lt;li&gt;进行已有产品升级或新版本开发；&lt;/li&gt;
&lt;li&gt;对所开发的领域比较熟悉而且已有原型系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;演化模型&#34;&gt;演化模型&lt;/h2&gt;
&lt;p&gt;演化模型（Evolutionary Model）演化模型是&lt;u&gt;迭代的过程模型&lt;/u&gt;，使得软件开发人员能够&lt;u&gt;逐步开发出更完整的软件版本&lt;/u&gt;。演化模型特别&lt;u&gt;适用于对软件需求缺乏准确认识的情况&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;典型的演化模型有原型模型和螺旋模型等。&lt;/p&gt;
&lt;h3 id=&#34;原型模型&#34;&gt;原型模型&lt;/h3&gt;
&lt;p&gt;&lt;u&gt;并非所有的需求都能够预先定义&lt;/u&gt;。大量的实践表明，在&lt;u&gt;开发初期很难得到一个完整的、准确的需求规格说明&lt;/u&gt;。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;客户往往不能准确地表达对未来系统的全面要求&lt;/u&gt;，导致形成的需求规格说明不完整、不准确，甚至是有歧义。&lt;/li&gt;
&lt;li&gt;在整个开发过程中，&lt;u&gt;用户可能会产生新的要求，导致需求的变更&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瀑布模型难以适应这种需求的不确定性和变化，于是出现了快速原型（Rapid Prototype）这种新的开发方法。&lt;/p&gt;
&lt;p&gt;原型模型（Prototype Model）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适合于&lt;u&gt;用户需求不清&lt;/u&gt;、&lt;u&gt;需求经常变化&lt;/u&gt;的情况；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;不适合大规模系统的开发&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原型的目的是能&lt;u&gt;快速、低成本地构建原型系统&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;能够采用原型方法是因为开发工具的快速发展，使得能够迅速地开发出一个让用户看得见、摸得着的系统框架。这样，对于计算机不是很熟悉的用户就可以根据这个框架提出自己的需求。&lt;/p&gt;
&lt;p&gt;开发原型系统首先确定用户需求，开发初始原型，然后征求用户对初始原型的改进意见，并根据意见修改原型:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683596611929.png&#34;
	width=&#34;398&#34;
	height=&#34;318&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683596611929_huf32b7c912e3ca230941152f200b2d348_39995_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683596611929_huf32b7c912e3ca230941152f200b2d348_39995_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;原型模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;125&#34;
		data-flex-basis=&#34;300px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;交流：目的是定义软件的总体目标，标识需求，然后&lt;/li&gt;
&lt;li&gt;快速计划：快速制订原型开发的计划，确定原型的目标和范围。&lt;/li&gt;
&lt;li&gt;采用快速设计方式进行建模。&lt;/li&gt;
&lt;li&gt;构建原型。&lt;/li&gt;
&lt;li&gt;部署交付和反馈：被开发的原型应交付给客户使用，并收集客户的反馈意见，这些反馈意见可在下一轮中对原型进行改进。&lt;/li&gt;
&lt;li&gt;下一轮迭代：在前一个原型需要改进，或者需要扩展其范围的时候，进入下一轮原型的迭代开发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据使用原型的目的不同，原型可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索型原型：目的是要弄清目标的要求，确定所希望的特性，并探讨多种方案的可行性。&lt;/li&gt;
&lt;li&gt;实验型原型：目的是验证方案或算法的合理性，是在大规模开发和实现前，用于考查方案是否合适、规格说明是否可靠等。&lt;/li&gt;
&lt;li&gt;演化型原型：目的是将原型作为目标系统的一部分，通过对原型的多次改进，逐步将原型演化成最终的目标系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;螺旋模型&#34;&gt;螺旋模型&lt;/h3&gt;
&lt;p&gt;对于复杂的大型软件，开发一个原型往往达不到要求。&lt;/p&gt;
&lt;p&gt;螺旋模型&lt;u&gt;将瀑布模型和演化模型结合起来&lt;/u&gt;，&lt;u&gt;加入了两种模型均忽略的风险分析&lt;/u&gt;（以风险为驱动），弥补了这两种模型的不足。&lt;/p&gt;
&lt;p&gt;螺旋模型将开发过程分为几个螺旋周期，每个螺旋周期大致和瀑布模型相符合：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683597373666.png&#34;
	width=&#34;559&#34;
	height=&#34;482&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683597373666_huf1bec98ef9b3abd276da6fc698ab12a6_107839_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683597373666_huf1bec98ef9b3abd276da6fc698ab12a6_107839_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;螺旋模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每个螺旋周期分为如下4个工作步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;制订计划&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;确定软件的目标&lt;/li&gt;
&lt;li&gt;选定实施方案&lt;/li&gt;
&lt;li&gt;明确项目开发的限制条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险分析&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;分析所选的方案&lt;/li&gt;
&lt;li&gt;识别风险&lt;/li&gt;
&lt;li&gt;消除风险&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实施工程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;实施软件开发&lt;/li&gt;
&lt;li&gt;验证阶段性产品&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户评估&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;评价开发工作，提出修正建议&lt;/li&gt;
&lt;li&gt;建立下一个周期的开发计划&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;螺旋模型适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;庞大、复杂并且具有高风险的系统&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;新近开发，需求不明的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;螺旋模型&lt;u&gt;强调风险分析&lt;/u&gt;，使得开发人员和用户对每个演化层出现的风险有所了解，从而做出应有的反应。&lt;/li&gt;
&lt;li&gt;螺旋模型&lt;u&gt;支持用户需求的动态变化&lt;/u&gt;，有助于提高软件的适应能力，降低了软件开发的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要开发人员具有相当丰富的风险评估经验和专门知识。&lt;/li&gt;
&lt;li&gt;过多的迭代次数会增加开发成本，延迟提交时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;喷泉模型&#34;&gt;喷泉模型&lt;/h2&gt;
&lt;p&gt;喷泉模型（Water Fountain Model）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以用户需求为动力；&lt;/li&gt;
&lt;li&gt;以对象作为驱动；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;适合于面向对象。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;喷泉模型&lt;u&gt;克服了瀑布模型不支持软件重用和多项开发活动集成的局限性&lt;/u&gt;。其开发过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683598210327.png&#34;
	width=&#34;247&#34;
	height=&#34;361&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683598210327_hu1a269d21ed951b906d4bd7f5636da6a5_34545_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683598210327_hu1a269d21ed951b906d4bd7f5636da6a5_34545_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;喷泉模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;68&#34;
		data-flex-basis=&#34;164px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;喷泉模型使开发过程具有以下性质或特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;迭代性&lt;/strong&gt;：意味着模型中的开发活动常常需要重复多次，在迭代过程中不断地完善软件系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无间隙性&lt;/strong&gt;：指在开发活动（如分析、设计、编码）之间不存在明显的边界。&lt;/p&gt;
&lt;p&gt;喷泉不像瀑布模型那样，在需求分析活动结束后才开始设计活动，在设计活动结束后才开始编码活动，而是&lt;u&gt;允许各开发活动交叉、迭代地进行&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;喷泉模型的&lt;u&gt;各个阶段没有明显的界线&lt;/u&gt;，开发人员&lt;u&gt;可以同步进行&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持软件重用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：可以提高软件项目的开发效率，节省开发时间。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于喷泉模型在各个开发阶段是重叠的，在开发过程中&lt;u&gt;需要大量的开发人员，不利于项目的管理&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;喷泉模型&lt;u&gt;要求严格管理文档，使得审核的难度加大&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;统一过程模型&#34;&gt;统一过程模型&lt;/h2&gt;
&lt;p&gt;统一过程（UP）模型开发过程的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例和风险驱动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以架构为中心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迭代并且增量：&lt;/p&gt;
&lt;p&gt;迭代：将整个软件开发项目划分为许多个小的“袖珍项目”。&lt;/p&gt;
&lt;p&gt;每个“袖珍项目”都包含正常软件项目的所有元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计划&lt;/li&gt;
&lt;li&gt;分析和设计&lt;/li&gt;
&lt;li&gt;构造&lt;/li&gt;
&lt;li&gt;集成和测试&lt;/li&gt;
&lt;li&gt;内部和外部发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统一过程模型由UML（统一建模语言，Unified Modeling Language）方法和工具支持。&lt;/p&gt;
&lt;p&gt;统一过程定义了4个技术阶段及其制品，这4个技术阶段由主要里程碑所终止：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;起始阶段&lt;/strong&gt;（Inception Phase）：&lt;/p&gt;
&lt;p&gt;确定项目的风险及其优先次序，并对精化阶段进行详细规划和对整个项目进行粗略计算。&lt;/p&gt;
&lt;p&gt;专注于：项目的初创活动。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构想文档（Vision Document）&lt;/li&gt;
&lt;li&gt;初始用例模型&lt;/li&gt;
&lt;li&gt;初始项目术语表&lt;/li&gt;
&lt;li&gt;初始业务用例&lt;/li&gt;
&lt;li&gt;初始风险评估&lt;/li&gt;
&lt;li&gt;项目计划（阶段及迭代）业务模型&lt;/li&gt;
&lt;li&gt;一个或多个原型（需要时）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：生命周期目标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;精化阶段&lt;/strong&gt;（Elaboration Phase）：&lt;/p&gt;
&lt;p&gt;根据主要的用例描述设计出详细的系统构架。主要是解决用例、构架和计划是否足够稳定可靠，风险释放得到充分控制，以便能够按照合同的规定完成整个开发任务。&lt;/p&gt;
&lt;p&gt;精华阶段在理解了最初的领域范围之后进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;架构演进&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注于：需求分析和架构演进。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;补充需求：包括非功能需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件体系结构描述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可执行的软件体系结构原型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初步的设计模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修订的风险列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目计划：&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;迭代计划&lt;/li&gt;
&lt;li&gt;调整的工作流&lt;/li&gt;
&lt;li&gt;里程碑&lt;/li&gt;
&lt;li&gt;技术工作产品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始用户手册&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：生命周期目标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建阶段&lt;/strong&gt;（Construction Phase）：&lt;/p&gt;
&lt;p&gt;将设计实现，并进行测试。&lt;/p&gt;
&lt;p&gt;关注系统的构建，产生实现模型。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计模型&lt;/li&gt;
&lt;li&gt;软件构件&lt;/li&gt;
&lt;li&gt;集成的软件增量&lt;/li&gt;
&lt;li&gt;测试计划及步骤&lt;/li&gt;
&lt;li&gt;测试用例&lt;/li&gt;
&lt;li&gt;支持文档：
&lt;ul&gt;
&lt;li&gt;用户手册&lt;/li&gt;
&lt;li&gt;安装手册&lt;/li&gt;
&lt;li&gt;对于并发增量的描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：初始运作功能。即一个准备交到最终用户手中的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移交阶段&lt;/strong&gt;（Transition Phase）：&lt;/p&gt;
&lt;p&gt;交由用户测试并迭代完善。&lt;/p&gt;
&lt;p&gt;关注于软件提交方面的工作，产生软件增量。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交的软件增量&lt;/li&gt;
&lt;li&gt;$\beta$测试报告&lt;/li&gt;
&lt;li&gt;综合用户反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：产品发布。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实还有一个产生阶段，这里包含在了移交阶段中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在每次迭代中有5个核心工作流：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求工作流：捕获系统应该做什么；&lt;/li&gt;
&lt;li&gt;分析工作流：精华和结构化需求；&lt;/li&gt;
&lt;li&gt;设计工作流：在系统架构内实现需求；&lt;/li&gt;
&lt;li&gt;实现工作流：构造软件；&lt;/li&gt;
&lt;li&gt;测试工作流：验证实现是否如期望那样工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;统一过程的典型代表是RUP（Rational Unified Process）。&lt;/p&gt;
&lt;p&gt;RUP是UP的商业扩展，完全兼容UP，但比UP更完整、更详细。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;敏捷开发&#34;&gt;敏捷开发&lt;/h2&gt;
&lt;p&gt;敏捷开发（Agile Development）的总体目标是通过&lt;u&gt;“尽可能早地、持续地对有价值的软件的交付”&lt;/u&gt;使客户满意。通过在软件开发过程中加入灵活性，敏捷方法&lt;u&gt;使用户能够在开发周期的后期增加或改变需求&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;敏捷过程的典型方法有很多，每一种方法基于一套原则，这些原则实现了&lt;u&gt;敏捷方法所宣称的理念（敏捷宣言）&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;敏捷开发有以下几种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极限编程（XP）&lt;/li&gt;
&lt;li&gt;水晶法（Crystal）&lt;/li&gt;
&lt;li&gt;并列争求法（Scrum）&lt;/li&gt;
&lt;li&gt;自适应软件开发（ASD）&lt;/li&gt;
&lt;li&gt;敏捷统一过程（AUP）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;极限编程&#34;&gt;极限编程&lt;/h3&gt;
&lt;p&gt;极限编程是为了&lt;u&gt;降低需求变更所带来的成本&lt;/u&gt;，旨在&lt;u&gt;提高软件质量和对客户需求变化的适应性&lt;/u&gt;，期望能够让软件开发达到低成本、低缺陷、高产出、高回报（最小投入得到最大结果）的效果。&lt;/p&gt;
&lt;p&gt;极限编程（XP）软件开发方式有以下性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级（敏捷）&lt;/li&gt;
&lt;li&gt;高效&lt;/li&gt;
&lt;li&gt;低风险&lt;/li&gt;
&lt;li&gt;柔性&lt;/li&gt;
&lt;li&gt;可预测的&lt;/li&gt;
&lt;li&gt;科学的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XP由价值观、原则、实践和行为4个部分组成，他们之间彼此相互依赖、关联，并通过行为贯穿于整个生存周期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4大价值观：
&lt;ul&gt;
&lt;li&gt;沟通&lt;/li&gt;
&lt;li&gt;简单性&lt;/li&gt;
&lt;li&gt;反馈&lt;/li&gt;
&lt;li&gt;勇气&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5个原则：
&lt;ul&gt;
&lt;li&gt;快速反馈&lt;/li&gt;
&lt;li&gt;简单性假设&lt;/li&gt;
&lt;li&gt;逐步修改&lt;/li&gt;
&lt;li&gt;提倡更改&lt;/li&gt;
&lt;li&gt;优质工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;12个最佳实践：
&lt;ul&gt;
&lt;li&gt;计划游戏：快速制定计划、随着细节的不断变化而完善&lt;/li&gt;
&lt;li&gt;小型发布：系统的设计要能够尽可能早地交付&lt;/li&gt;
&lt;li&gt;隐喻：找到合适的比喻传达信息&lt;/li&gt;
&lt;li&gt;简单设计：只处理当前的需求，使设计保持简单&lt;/li&gt;
&lt;li&gt;测试先行：先写测试代码，然后再编写程序&lt;/li&gt;
&lt;li&gt;重构：重新审视需求和设计，重新明确地描述它们以符合新的和现有的需求&lt;/li&gt;
&lt;li&gt;结对编程&lt;/li&gt;
&lt;li&gt;集体代码所有制&lt;/li&gt;
&lt;li&gt;持续集成：可以按日甚至按小时为客户提供可运行的版本&lt;/li&gt;
&lt;li&gt;每周工作40个小时&lt;/li&gt;
&lt;li&gt;现场客户&lt;/li&gt;
&lt;li&gt;编码标准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;敏捷统一过程&#34;&gt;敏捷统一过程&lt;/h3&gt;
&lt;p&gt;敏捷统一过程（Agile Unified Process，AUP）采用以下原理来构建软件系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“在大型上连续”&lt;/li&gt;
&lt;li&gt;“在小型上迭代”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用经典的UP阶段性活动（初始、精化、构建和转换），提供了一系列活动，能够使团队为软件项目构想出一个全面的过程流。&lt;/p&gt;
&lt;p&gt;在每个活动里，一个团队迭代使用敏捷，并将有意义的软件增量尽可能快地交付给最终用户。每个AUP迭代执行以下活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建模&lt;/strong&gt;：建立对商业和问题域的模型表述，这些模型“足够好”即可，以便团队继续前进。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现&lt;/strong&gt;：将模型翻译成源代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt;：像XP一样，团队设计和执行一系列的测试来发现错误以保证源代码满足需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署&lt;/strong&gt;：对软件增量的交付以及获取最终用户的反馈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置及项目管理&lt;/strong&gt;：着眼于变更管理、风险管理以及对团队的任一制品的控制。项目管理追踪和控制开发团队的工作进展并协调团队活动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境管理&lt;/strong&gt;：协调标准、工具以及适用于开发团队的支持技术等过程基础设施。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他敏捷开发方法&#34;&gt;其他敏捷开发方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;水晶法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;认为每一个不同的项目都需要一套不同的策略、约定和方法论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;认为人对软件质量有重要的影响。&lt;/p&gt;
&lt;p&gt;随着项目质量和开发人员素质的提高，项目和过程的质量也随之提高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过更好地交流和经常性的交付，软件生产力得到提高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;并列争求法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;使用迭代的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把每30天一次的迭代称为一个“冲刺”。&lt;/li&gt;
&lt;li&gt;按需求的优先级别来实现产品。&lt;/li&gt;
&lt;li&gt;多个自组织和自治的小组并行地递增实现产品。&lt;/li&gt;
&lt;li&gt;协调是通过简短的日常情况会议来进行，就像橄榄球中的“并列争球”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;自适应软件开发&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;有6个基本原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个使命作为指导；&lt;/li&gt;
&lt;li&gt;特征被视为客户价值的关键点；&lt;/li&gt;
&lt;li&gt;过程中的等待是很重要的，因此“重做”与“做”同样关键；&lt;/li&gt;
&lt;li&gt;变化不被视为改正，而是被视为对软件开发实际情况的调整；&lt;/li&gt;
&lt;li&gt;确定的交付时间迫使开发人员认真考虑每一个生产的版本的关键需求；&lt;/li&gt;
&lt;li&gt;风险也包含其中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;能力成熟度模型（从1开始）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;级别&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;杂乱无章，几乎没有明确定义的步骤。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可重复级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;建立基本的项目管理过程和实践来跟踪项目费用、进度和功能特性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已定义级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将管理和工程文档化、标准化并综合成标准软件过程；&lt;br&gt;使用标准开发过程（或方法论）构建（或集成）系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;己管理级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对软件过程和产品质量制定了的详细度量标准，且有定量的理解和控制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优化级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;加强了定量分析，通过过程质量和新观念、新技术使过程不断地改进。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;能力成熟度集成连续式模型（从0开始）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;能力等级&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;目标&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;关注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;未完成的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;未执行或未得到等级1中的所有目标。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已执行的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可标识的输入工作产品到输出工作产品的转换，实现特定目标。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;特定目标的完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已管理的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已管理的过程的制度化。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;针对单个过程实例的能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已定义级的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已定义的过程的制度化。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;过程的组织级标准化和部署&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定量管理的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可定量管理的过程的制度化。&lt;br&gt;说明：使用测量和质量保证来控制和改进。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优化的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;优化的过程的制度化。&lt;br&gt;说明：使用量化手段改变和优化。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各模型的适用范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;瀑布模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求明确、大致固定且变更少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增量模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;快速构造可运行的产品，产品升级，领域熟悉或已有原型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;演化模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求无法被完整定义，功能在使用过程中不断完善&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;快速、低成本构架原型，需求不清或多变、领域陌生；不适合大规模系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;螺旋模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;庞大、复杂、高风险的系统，开发人员有丰富的风险评估经验和知识&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;喷泉模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向对象的开发过程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;统一过程模型阶段里程碑和关注点总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;里程碑&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;关注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;生命周期目标&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;项目的初创活动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;精化阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;生命周期架构&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求分析和架构演进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构建阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始运作功能&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;系统的构建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移交阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;产品发布&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件提交方面的工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;需求分析&#34;&gt;需求分析&lt;/h1&gt;
&lt;h2 id=&#34;软件需求&#34;&gt;软件需求&lt;/h2&gt;
&lt;p&gt;需求分析主要的目的是弄清楚系统需要“做什么”，并将其阐述出来。&lt;/p&gt;
&lt;p&gt;软件需求是指&lt;u&gt;用户对目标软件系统在功能、行为、性能、设计约束等方面的期望&lt;/u&gt;。通常，这些需求包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能需求&lt;/strong&gt;：考虑系统要做什么，在何时做，在何时以及如何修改或升级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能需求&lt;/strong&gt;：考虑软件开发的技术性指标。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储容量限制；&lt;/li&gt;
&lt;li&gt;执行速度；&lt;/li&gt;
&lt;li&gt;响应时间；&lt;/li&gt;
&lt;li&gt;吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户或人的因素&lt;/strong&gt;：考虑用户的类型。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各种用户对使用计算机的熟练程度，需要接受的训练；&lt;/li&gt;
&lt;li&gt;用户理解、使用系统的难度；&lt;/li&gt;
&lt;li&gt;用户错误操作系统的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;环境需求&lt;/strong&gt;：考虑未来软件应用的环境，包括硬件和软件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对硬件设备的需求包括：机型、外设、接口、地点、分布、湿度、磁场干扰等；&lt;/li&gt;
&lt;li&gt;对软件的需求包括：操作系统、网络、数据库等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;界面需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自其他系统的输入；&lt;/li&gt;
&lt;li&gt;到其他系统的输出；&lt;/li&gt;
&lt;li&gt;对数据格式的特殊规定；&lt;/li&gt;
&lt;li&gt;对数据存储介质的规定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文档需求&lt;/strong&gt;：考虑需要哪些文档，文档针对哪些读者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入、输出数据的格式；&lt;/li&gt;
&lt;li&gt;接收、发送数据的频率；&lt;/li&gt;
&lt;li&gt;数据的准确性和精度；&lt;/li&gt;
&lt;li&gt;数据流量；&lt;/li&gt;
&lt;li&gt;数据需保持的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源使用需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件运行时所需要的数据、其他软件、内存空间等资源；&lt;/li&gt;
&lt;li&gt;软件开发、维护时，所需的人力、支撑软件、开发设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全保密要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否需要对访问系统或系统信息加以控制；&lt;/li&gt;
&lt;li&gt;隔离用户数据的方法；&lt;/li&gt;
&lt;li&gt;用户程序如何与其他程序和操作系统隔离&lt;/li&gt;
&lt;li&gt;系统备份要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可靠性要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统的可靠性要求；&lt;/li&gt;
&lt;li&gt;系统是否必须检测和隔离错误；&lt;/li&gt;
&lt;li&gt;出错后，重启系统允许的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;软件成本消耗与开发进度需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发是否有规定的时间表；&lt;/li&gt;
&lt;li&gt;软/硬件投资有无限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他非功能性要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;如采用某种开发模式，需要确定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;质量控制标准；&lt;/li&gt;
&lt;li&gt;里程碑和评审；&lt;/li&gt;
&lt;li&gt;验收标准；&lt;/li&gt;
&lt;li&gt;各种质量要求的优先级；&lt;/li&gt;
&lt;li&gt;可维护性方面的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件需求的出处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以来自于用户（实际的和潜在的）、用户的规约、应用领域的专家、相关的技术标准和法规；&lt;/li&gt;
&lt;li&gt;可以来自于原有的系统、原有系统的用户、新系统的潜在用户；&lt;/li&gt;
&lt;li&gt;可以来自于竞争对手的产品。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;需求工程&#34;&gt;需求工程&lt;/h2&gt;
&lt;p&gt;需求工程可以细分为6个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需求获取&lt;/li&gt;
&lt;li&gt;需求分析与协商&lt;/li&gt;
&lt;li&gt;系统建模&lt;/li&gt;
&lt;li&gt;需求规约&lt;/li&gt;
&lt;li&gt;需求验证&lt;/li&gt;
&lt;li&gt;需求管理&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;系统设计&#34;&gt;系统设计&lt;/h1&gt;
&lt;p&gt;进入设计阶段，需要把软件系统“做什么”的逻辑模型转换成“怎么做”的物理模型。即着手实现软件系统需求。&lt;/p&gt;
&lt;p&gt;系统设计的主要目的就是为系统制定蓝图，在各种技术和实施方法中权衡利弊，精心设计，合理地使用各种资源，最终勾画出新系统的详细设计方案。&lt;/p&gt;
&lt;p&gt;系统设计的主要内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新系统总体结构设计&lt;/li&gt;
&lt;li&gt;代码设计&lt;/li&gt;
&lt;li&gt;输出、输入设计&lt;/li&gt;
&lt;li&gt;处理过程设计&lt;/li&gt;
&lt;li&gt;数据存储设计&lt;/li&gt;
&lt;li&gt;用户界面设计&lt;/li&gt;
&lt;li&gt;安全控制设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的设计方法有以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向数据流的结构化设计方法（SD）。&lt;/li&gt;
&lt;li&gt;面向对象的分析方法（OOD）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统设计的基本任务大体上可以分为两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;概要设计&#34;&gt;概要设计&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计软件系统总体结构&lt;/strong&gt;（&lt;strong&gt;总体结构设计&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;其基本任务是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用某种设计方法，将一个复杂的系统按功能划分成模块；&lt;/li&gt;
&lt;li&gt;确定每个模块的功能；&lt;/li&gt;
&lt;li&gt;确定模块之间的调用关系；&lt;/li&gt;
&lt;li&gt;确定模块之间的接口，即模块之间传递的信息；&lt;/li&gt;
&lt;li&gt;评价模块结构的质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件系统总体结构的设计是概要设计关键的一步，直接影响到下一个阶段详细设计与编码的工作。&lt;/p&gt;
&lt;p&gt;软件系统的质量及一些整体特性都在软件系统总体结构的设计中决定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构及数据库设计&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构设计&lt;/strong&gt;：逐步细化的方法也适用于数据结构的设计。&lt;/p&gt;
&lt;p&gt;在需求分析阶段，己经通过数据字典对数据的组成、操作约束和数据之间的关系等方面进行了描述，确定了数据的结构特性。在概要设计阶段要加以细化，详细设计阶段则规定具体的实现细节。在概要设计阶段，宜使用抽象的数据类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库设计&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;数据库的设计是指数据存储文件的设计，主要进行以下几方面设计：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念设计：在数据分析的基础上，采用自底向上的方法从用户角度进行视图设计，一般用E-R模型来表述数据模型。&lt;/p&gt;
&lt;p&gt;E-R模型既是设计数据库的基础，也是设计数据结构的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑设计：E-R模型是独立于数据库管理系统（DBMS）的，要结合具体的DBMS特征来建立数据库的逻辑结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理设计：对于不同的DBMS，物理环境不同，提供的存储结构与存取方法各不相同。&lt;/p&gt;
&lt;p&gt;物理设计就是设计数据模式的一些物理细节，如数据项存储要求、存取方法和索引的建立等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编写概要设计文档&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;文档主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概要设计说明书&lt;/li&gt;
&lt;li&gt;数据库设计说明书&lt;/li&gt;
&lt;li&gt;用户手册&lt;/li&gt;
&lt;li&gt;修订测试计划&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;评审&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;对设计部分是否完整地实现了需求中规定的功能、性能等要求，设计方法的可行性，关键的处理及内外部接口定义的正确性、有效性、各部分之间的一致性等都一一进行评审。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;详细设计&#34;&gt;详细设计&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;算法设计&lt;/strong&gt;：&lt;u&gt;对每个模块进行详细的算法设计&lt;/u&gt;，用某种图形、表格和语言等工具&lt;u&gt;将每个模块处理过程的详细算法描述出来&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构设计&lt;/strong&gt;：对模块内的数据结构进行设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库设计&lt;/strong&gt;：对数据库进行物理设计，即确定数据库的物理结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他设计：&lt;/p&gt;
&lt;p&gt;根据软件系统的类型，还可能要进行以下设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码设计&lt;/strong&gt;：为了提高数据的输入、分类、存储和检索等操作，节约内存空间，对数据库中某些数据项的值要进行代码设计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入/输出格式设计&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户界面设计&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写&lt;u&gt;详细设计说明书&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;评审&lt;/strong&gt;：&lt;u&gt;对处理过程的算法和数据库的物理结构都要评审。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系统设计的结果是一系列的系统设计文件，这些文件是物理实现一个信息系统（包括硬件设备和编制软件程序）的重要基础。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;系统测试&#34;&gt;系统测试&lt;/h1&gt;
&lt;p&gt;系统测试是&lt;u&gt;为了发现错误而执行程序的过程&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功的测试：发现了至今尚未发现的错误的测试。&lt;/li&gt;
&lt;li&gt;测试的目的：希望能以最少的人力和时间发现潜在的各种错误和缺陷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息系统测试应包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试&lt;/li&gt;
&lt;li&gt;硬件测试&lt;/li&gt;
&lt;li&gt;网络测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统测试是保证系统质量和可靠性的关键步骤，是对系统开发过程的最后复查。&lt;/p&gt;
&lt;p&gt;根据测试的概念和目的，在进行信息系统测试时应遵循以下基本原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应尽早并不断地进行测试。测试应贯穿在开发的各个阶段，应尽早纠正错误，消除隐患。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试工作应该避免由原开发软件的人或小组承担。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发人员往往不愿否认自己的工作，总认为自己开发的软件没有错误；&lt;/li&gt;
&lt;li&gt;开发人员的错误很难由本人测试出来，很容易根据自己编程的思路来制定测试思路，具有局限性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期输出结果。将实际输出结果与预期结果相比较就能发现测试对象是否正确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在设计测试用例时，不仅要设计有效、合理的输入条件，也要包含不合理、失效的输入条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在测试程序时，不仅要检验程序是否做了该做的事，还要检验程序是否做了不该做的事。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;严格按照测试计划来进行，避免测试的随意性。&lt;/p&gt;
&lt;p&gt;测试计划应包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试内容&lt;/li&gt;
&lt;li&gt;进度安排&lt;/li&gt;
&lt;li&gt;人员安排&lt;/li&gt;
&lt;li&gt;测试环境&lt;/li&gt;
&lt;li&gt;测试工具&lt;/li&gt;
&lt;li&gt;测试资料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;妥善保存测试计划、测试用例，作为软件文档的组成部分，为维护提供方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试例子都是精心设计出来的，可以为重新测试或追加测试提供方便。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系统测试阶段的&lt;u&gt;测试目标来自于需求分析阶段&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;测试过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;制定测试计划&lt;/li&gt;
&lt;li&gt;编制测试大纲&lt;/li&gt;
&lt;li&gt;根据测试大纲设计和生成测试用例&lt;/li&gt;
&lt;li&gt;实施测试&lt;/li&gt;
&lt;li&gt;生成测试报告&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;单元测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;单元测试&lt;/strong&gt;也称为&lt;strong&gt;模块测试&lt;/strong&gt;，&lt;u&gt;在模块编写完成且无编译错误后就可以进行&lt;/u&gt;。单元测试&lt;u&gt;侧重于模块中的内部处理逻辑和数据结构&lt;/u&gt;。如果选用&lt;u&gt;机器测试&lt;/u&gt;，一般用&lt;u&gt;白盒测试法&lt;/u&gt;。这类测试&lt;u&gt;可以对多个模块同时进行&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;单元测试主要检查模块的以下5个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块接口：模块的接口保证了测试模块的数据流可以正确地流入、流出。&lt;/p&gt;
&lt;p&gt;在测试中应检查以下要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试模块的&lt;u&gt;输入参数&lt;/u&gt;和&lt;u&gt;形式参数&lt;/u&gt;在&lt;u&gt;个数、属性、单位&lt;/u&gt;上&lt;u&gt;是否一致&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;调用其他模块时，所给出的&lt;u&gt;实际参数&lt;/u&gt;和&lt;u&gt;被调用模块的形式参数&lt;/u&gt;在&lt;u&gt;个数、属性、单位&lt;/u&gt;上&lt;u&gt;是否一致&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;调用标准函数时，所用的&lt;u&gt;参数在属性、数目和顺序上是否正确&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;全局变量在各模块中的定义和用法是否一致。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;输入是否仅改变了形式参数。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开/关的语句&lt;/u&gt;是否正确。&lt;/li&gt;
&lt;li&gt;规定的&lt;u&gt;I/O格式&lt;/u&gt;是否与输入/输出语句一致。&lt;/li&gt;
&lt;li&gt;在使用文件之前是否已经打开文件或使用文件之后是否己经关闭文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重要的执行路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出错处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边界条件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模块间存在调用与被调关系，对每个模块进行测试时，需要开发两种模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;驱动模块：接收测试例子的数据，将这些数据送到测试模块，输出结果。&lt;/p&gt;
&lt;p&gt;即模拟被测试模块的上一级模块，相当于被测模块的主程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;桩模块（存根模块）：代替测试模块中所调用的子模块，其内部可进行少量的数据处理。目的是为了检验入口、输出调用和返回的信息。&lt;/p&gt;
&lt;p&gt;即模拟被测模块的子模块（所调用的模块），但不是软件产品的组成部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683613415307.png&#34;
	width=&#34;360&#34;
	height=&#34;344&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683613415307_hu4c5b3d41c7734b9a664e78a78f6ec812_28357_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683613415307_hu4c5b3d41c7734b9a664e78a78f6ec812_28357_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;单元测试环境&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;251px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;提高模块的内聚度可以简化单元测试。&lt;/p&gt;
&lt;h2 id=&#34;集成测试&#34;&gt;集成测试&lt;/h2&gt;
&lt;p&gt;集成测试就是&lt;u&gt;把模块按系统设计说明书的要求组合起来进行测试&lt;/u&gt;。即使所有的模块都通过了测试，在集成之后，仍然可能出现问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;穿过模块的数据丢失；&lt;/li&gt;
&lt;li&gt;一个模块的功能对其他模块造成有害的影响；&lt;/li&gt;
&lt;li&gt;各个模块集成起来没有达到预期的功能；&lt;/li&gt;
&lt;li&gt;全局数据结构出现问题；&lt;/li&gt;
&lt;li&gt;单个模块的误差可以接受，但模块组合后，可能会出现误差累积，最后累积到不能接受的程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成测试是进行一些旨在&lt;u&gt;发现与接口相关的错误&lt;/u&gt;的测试，其目标是&lt;u&gt;利用已通过单元测试的构件建立设计中描述的程序结构&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;通常，集成测试有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非增量集成&lt;/strong&gt;：分别测试各个模块，再把这些模块组合起来进行整体测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可以对模块进行并行测试，能充分利用人力，并加快工程进度。&lt;/li&gt;
&lt;li&gt;缺点：容易混乱，出现错误不容易查找和定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增量集成&lt;/strong&gt;：以小增量的方式逐步进行构造和测试。&lt;/p&gt;
&lt;p&gt;增量式测试的范围一步步扩大，错误容易定位，更易于对接口进行彻底测试，并且可以运用系统化的测试方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增量集成策略有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自项向下集成测试&lt;/strong&gt;：一种构造软件体系结构的增量方法。&lt;/p&gt;
&lt;p&gt;模块的集成顺序为从主控模块（主程序）开始，沿着控制层次逐步向下，以深度优先或广度优先的方式将从属于（或间接从属于）主控模块的模块集成到结构中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683617607121.png&#34;
	width=&#34;500&#34;
	height=&#34;393&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683617607121_hu713a5d010320841559d8f2583f0abebb_19456_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683617607121_hu713a5d010320841559d8f2583f0abebb_19456_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;自顶向下集成&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深度优先集成&lt;/strong&gt;是&lt;u&gt;首先集成位于程序结构中主控路径上的所有构件&lt;/u&gt;，也可以根据特定应用系统的特征进行选择。&lt;/p&gt;
&lt;p&gt;例如上图中，选择最左边的路径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，集成构建$M_1$、$M_2$和$M_5$；&lt;/li&gt;
&lt;li&gt;其次，集成$M_8$或$M_6$（若$M_2$的正常运行是必须的）；&lt;/li&gt;
&lt;li&gt;然后，集成中间和右边控制路径上的构建。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;广度优先集成&lt;u&gt;首先沿着水平方向，将属于同一层的构建集成起来&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;例如上图中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，将构建$M_2$、$M_3$和$M_4$集成起来；&lt;/li&gt;
&lt;li&gt;其次是$M_5$、$M_6$、$M_7$，依次类推。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集成过程可以通过下列5个步骤完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;u&gt;主控模块用作测试驱动模块&lt;/u&gt;，用这些从属于主控模块的所有模块代替桩模块。&lt;/li&gt;
&lt;li&gt;依靠所选择的集成方法（即深度优先或广度优先），每次用实际模块替换一个从属桩模块。&lt;/li&gt;
&lt;li&gt;在集成每个模块后都进行测试。&lt;/li&gt;
&lt;li&gt;在完成每个测试集之后，用实际模块替换另一个桩模块。&lt;/li&gt;
&lt;li&gt;可以执行回归测试，以确保没有引入新的错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回到第2步继续执行此过程，直到完成了整个程序结构的构造。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;u&gt;自顶向下集成不需要驱动模块。&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自底向上集成测试&lt;/strong&gt;：自底向上集成测试就是从原子模块（程序结构的最底层构件）开始进行构造和测试。&lt;/p&gt;
&lt;p&gt;由于构件是自底向上集成的，在处理时所需要的从属于给定层次的模块总是存在的，因此，没有必要使用桩模块。自底向上集成策略可以利用以下步骤来实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接低层构件以构成完成特定子功能的簇。&lt;/li&gt;
&lt;li&gt;编写驱动模块（测试的控制程序）以协调测试用例的输入和输出。&lt;/li&gt;
&lt;li&gt;测试簇。&lt;/li&gt;
&lt;li&gt;去掉驱动程序，沿着程序结构向上逐步连接簇。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;簇：一系列相关低层构建的集合。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;自底向上集成不需要桩模块。&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683619189037.png&#34;
	width=&#34;762&#34;
	height=&#34;534&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683619189037_hu05113d41e3a4f82669c36fba382f49e9_36425_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683619189037_hu05113d41e3a4f82669c36fba382f49e9_36425_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;自底向上&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接相应的构建形成簇1、簇2和簇3；&lt;/li&gt;
&lt;li&gt;编写驱动模块（图中虚线上方连接的框，即$D_1$、$D_2$和$D_3$）&lt;/li&gt;
&lt;li&gt;利用驱动模块对每个簇进行测试。&lt;/li&gt;
&lt;li&gt;簇1和簇2中的构建从属于模块$M_a$，去掉驱动模块$D_1$和$D_2$，将这两个簇直接与$M_a$相连；簇3去掉驱动模块$D_3$，然后与$M_b$相连。&lt;/li&gt;
&lt;li&gt;最后将$M_a$和$M_b$与构建$M_c$连接在一起。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;回归测试&lt;/strong&gt;：重新执行己测试过的某些子集，以确保变更没有传播不期望的副作用。&lt;/p&gt;
&lt;p&gt;每当加入一个新模块作为集成测试的一部分时，软件发生变更，建立了新的数据流路径，可能出现新的/O,以及调用新的控制逻辑。这些变更可能会使原来可以正常工作的功能产生问题。&lt;/p&gt;
&lt;p&gt;回归测试有助于保证变更不引入无意识行为或额外的错误。回归测试的方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工执行，重新执行所有测试用例的子集&lt;/li&gt;
&lt;li&gt;利用捕捉/回放工具自动执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回归测试要执行的测试子集包含以下3种测试用例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;能够测试软件所有功能&lt;/u&gt;的具有代表性的&lt;u&gt;测试样本&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;额外测试，侧重于&lt;u&gt;可能会受变更影响的软件功能&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;侧重于&lt;u&gt;已发生变更的软件构件测试&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着集成测试的进行，&lt;u&gt;回归测试的数量可能变得相当庞大&lt;/u&gt;，因此，应将回归测试用例设计成&lt;u&gt;只包括每个主要程序功能的一个或多个错误类的测试&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;冒烟测试&lt;/strong&gt;：一种常用的集成测试方法，是时间关键项目的决定性机制，它让软件团队频繁地对项目进行评估。&lt;/p&gt;
&lt;p&gt;冒烟测试方法包括下列活动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将已经转换为代码的软件构件集成到构建中。&lt;/p&gt;
&lt;p&gt;一个构建包括所有的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据文件&lt;/li&gt;
&lt;li&gt;库&lt;/li&gt;
&lt;li&gt;可复用的模块&lt;/li&gt;
&lt;li&gt;实现一个或多个产品功能所需的工程化构件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计一系列测试以&lt;u&gt;暴露影响构建正确地完成它的功能的错误&lt;/u&gt;，其&lt;u&gt;目的是为了发现极有可能造成项目延迟的业务阻塞错误&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每天将该构建与其他构建及整个软件产品（以其当前形势）集成起来进行冒烟测试。&lt;/p&gt;
&lt;p&gt;这种集成方法可以自顶向下，也可以自底向上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试方法&#34;&gt;测试方法&lt;/h2&gt;
&lt;p&gt;测试方法分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态测试&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;指被测试程序不在机器上运行，而是采用以下手段对程序进行检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人工检测&lt;/strong&gt;：不依靠计算机而是依靠人工审查程序或评审软件。&lt;/p&gt;
&lt;p&gt;人工检测包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码检查&lt;/li&gt;
&lt;li&gt;静态结构分析&lt;/li&gt;
&lt;li&gt;代码质量度量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算机辅助静态分析&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态测试&lt;/strong&gt;：指通过运行程序发现错误。&lt;/p&gt;
&lt;p&gt;在对软件产品进行动态测试时可以采用以下两种测试方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;黑盒测试法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;白盒测试法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试用例由以下组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试输入数据&lt;/li&gt;
&lt;li&gt;预期输出结果：与测试输入数据对应的预期输出结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计测试用例时，应当包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合理的输入条件&lt;/li&gt;
&lt;li&gt;不合理的输入条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;黑盒测试&#34;&gt;黑盒测试&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;黑盒测试&lt;/strong&gt;也称为&lt;strong&gt;功能测试&lt;/strong&gt;，在&lt;u&gt;完全不考虑软件的内部结构和特性&lt;/u&gt;的情况下，测试软件的外部特性。&lt;/p&gt;
&lt;p&gt;进行黑盒测试主要是为了发现以下几类错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否有错误的功能或遗漏的功能？&lt;/li&gt;
&lt;li&gt;界面是否有误？输入是否正确接收？输出是否正确？&lt;/li&gt;
&lt;li&gt;是否有数据结构或外部数据库访问错误？&lt;/li&gt;
&lt;li&gt;性能是否能多接受？&lt;/li&gt;
&lt;li&gt;是否有初始化或终止性错误？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的黑盒测试技术有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等价类划分&lt;/strong&gt;：将程序的输入域划分为若干等价类，然后从每个等价类中选取一个代表性数据作为测试用例。&lt;/p&gt;
&lt;p&gt;每一类的代表性数据在测试中的作用等价于这一类中的其他值，这样就可以&lt;u&gt;用少量代表性的测试用例取得较好的测试效果&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;等价类划分有两种不同的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类&lt;/li&gt;
&lt;li&gt;无效等价类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计测试用例时，要同时考虑这两种等价类。&lt;/p&gt;
&lt;p&gt;定义等价类的原则如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;u&gt;输入条件规定了取值范围或值的个数&lt;/u&gt;的情况下，&lt;u&gt;可以定义1个有效等价类和2个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;输入条件规定了输入值的集合或规定了“必须如何”&lt;/u&gt;的条件的情况下，&lt;u&gt;可以定义1个有效等价类和一个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在输入条件是一个&lt;u&gt;布尔量&lt;/u&gt;的情况下，&lt;u&gt;可以定义一个有效等价类和一个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;规定了输入数据的一组值（假定$n$个）&lt;/u&gt;，并且程序要&lt;u&gt;对每一个输入值分别处理&lt;/u&gt;的情况下，&lt;u&gt;可以定义$n$个有效等价类和1个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;规定了输入数据必须遵守的规则&lt;/u&gt;的情况下，&lt;u&gt;可以定义一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在确知己划分的等价类中，各元素在程序处理中的方式不同的情况下，则应将该等价类进一步划分为更小的等价类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，输入$x$的取值范围是$0 \sim 10$，输入$y$的取值范围是$-10 \sim -1$，那么可以定义三个等价类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类1：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$-10 \sim -1$；&lt;/li&gt;
&lt;li&gt;无效等价类2：$x$的取值范围是$x &amp;lt; 0 \ \ OR \ \ x &amp;gt; 10$，输入$y$的取值范围是$-10 \sim -1$；&lt;/li&gt;
&lt;li&gt;无效等价类3：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$x &amp;lt; -10 \ \ OR \ \ x &amp;gt; -1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无效等价类的划分：每个无效等价类的测试用例，只违反一个输入的取值范围。如果违反了多个输入的取值范围，那便是不好的测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;边界值分析&lt;/strong&gt;：输入的&lt;u&gt;边界比中间更加容易发生错误&lt;/u&gt;，因此用边界值分析来&lt;u&gt;补充等价类划分的测试用例设计技术&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;边界值划分&lt;u&gt;选择等价类边界的测试用例&lt;/u&gt;，既&lt;u&gt;注重于输入条件边界&lt;/u&gt;，又&lt;u&gt;适用于输出域测试用例&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对边界值设计测试用例应遵循的原则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果&lt;u&gt;输入条件规定了值的范围&lt;/u&gt;，则应取&lt;u&gt;刚达到这个范围的边界的值&lt;/u&gt;，以及&lt;u&gt;刚刚超越这个范围边界的值&lt;/u&gt;作为测试输入数据。&lt;/li&gt;
&lt;li&gt;如果&lt;u&gt;输入条件规定了值的个数&lt;/u&gt;，则用&lt;u&gt;最大个数、最小个数、比最小个数少1、比最大个数多1的数据&lt;/u&gt;作为测试数据。&lt;/li&gt;
&lt;li&gt;根据规格说明的每个输出条件使用上述两条原则。&lt;/li&gt;
&lt;li&gt;如果程序的规格说明给出的&lt;u&gt;输入域或输出域是有序集合&lt;/u&gt;，则应选取&lt;u&gt;集合的第一个元素和最后一个元素&lt;/u&gt;作为测试用例。&lt;/li&gt;
&lt;li&gt;如果程序中使用了一个&lt;u&gt;内部数据结构&lt;/u&gt;，则应当选择这个&lt;u&gt;内部数据结构边界上的值&lt;/u&gt;作为测试用例。&lt;/li&gt;
&lt;li&gt;分析规格说明，找出其他可能的边界条件。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;错误推测&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;因果图&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;白盒测试&#34;&gt;白盒测试&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;白盒测试&lt;/strong&gt;也称为&lt;strong&gt;结构测试&lt;/strong&gt;，&lt;u&gt;根据程序的内部结构和逻辑来设计测试用例&lt;/u&gt;，对程序的路径和过程进行测试，检查是否满足设计的需要。&lt;/p&gt;
&lt;p&gt;白盒测试常用的技术有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑覆盖&lt;/strong&gt;：考察用测试数据运行被测程序时，对程序逻辑的覆盖程度。&lt;/p&gt;
&lt;p&gt;主要的逻辑覆盖标准有6种，它们的覆盖程度从低到高为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语句覆盖&lt;/strong&gt;：指选择足够的测试数据，使&lt;u&gt;被测试程序中的每条语句至少执行一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;语句覆盖对程序执行逻辑的覆盖很低，因此一般认为它是很弱的逻辑覆盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判定覆盖&lt;/strong&gt;（分支覆盖）：指设计足够的测试用例，使得&lt;u&gt;被测程序中的每个判定表达式至少获得一次“真”/“假”值&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;判定覆盖的判定表达式是指判定表达式整体。&lt;/p&gt;
&lt;p&gt;判定覆盖要比语句覆盖更强一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件覆盖&lt;/strong&gt;：指构造一组测试用例，使得&lt;u&gt;每一判定语句中每个逻辑条件的各种可能的值至少满足一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;条件覆盖的判定语句是指判定表达式下的判定语句（如果有），即用&lt;code&gt;AND&lt;/code&gt;、&lt;code&gt;OR&lt;/code&gt;等逻辑运算符连接起来的语句（不包含逻辑运算符的语句）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判定/条件覆盖&lt;/strong&gt;：指设计足够的测试用例，&lt;u&gt;使得判定中每个条件的所有可能取值（真/假）至少出现一次，并使每个判定本身的判定结果（真/假）也至少出现一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;判定/条件覆盖同时满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定覆盖&lt;/li&gt;
&lt;li&gt;条件覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件组合覆盖&lt;/strong&gt;：指设计足够的测试用例，使得&lt;u&gt;每个判定中条件的各种可能值的组合都至少出现一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;满足条件组合覆盖的测试用例一定满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定覆盖&lt;/li&gt;
&lt;li&gt;条件覆盖&lt;/li&gt;
&lt;li&gt;判定/条件覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径覆盖&lt;/strong&gt;：指&lt;u&gt;覆盖被测试程序中所有可能的路径&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;循环覆盖&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本路径测试&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;白盒测试逻辑覆盖技术总结（覆盖程度从低到高）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;逻辑覆盖&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语句覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每条语句执行一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支（判定）覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个分支获得一次True/False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个分支中的每个逻辑条件的所有可能取值满足一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;判定/条件覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分支覆盖 + 条件覆盖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件组合覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个判定中条件的各种可能值的组合都出现一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;路径覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;覆盖被测试程序中所有可能的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;运行和维护&#34;&gt;运行和维护&lt;/h1&gt;
&lt;p&gt;软件维护是软件生命周期中的最后一个阶段，处于系统投入生产性运行以后的时期中，因此&lt;u&gt;不属于系统开发过程&lt;/u&gt;。&lt;u&gt;软件维护是在软件已经交付使用之后为了改正错误或满足新的需求而修改软件的过程&lt;/u&gt;，即软件在交付使用后对软件所做的一切改动。&lt;/p&gt;
&lt;h2 id=&#34;系统可维护性&#34;&gt;系统可维护性&lt;/h2&gt;
&lt;p&gt;系统的可维护性可以定义为维护人员理解、改正、改动和改进这个软件的难易程度。提高可维护性是开发软件系统所有步骤的关键目的。&lt;u&gt;系统的可维护性可以衡量系统是否能被很好地维护。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;系统可维护性的评价指标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可理解性&lt;/strong&gt;：指别人能理解系统的结构、界面、功能和内部过程的难易程度。&lt;/p&gt;
&lt;p&gt;模块化、详细设计文档、结构化设计和良好的高级程序设计语言等都有助于提高可理解性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可测试性&lt;/strong&gt;：&lt;u&gt;诊断和测试的容易程度取决于易理解的程度。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;好的文档资料有利于诊断和测试；程序的结构、高性能的测试工具以及周密计划的测试工序也是至关重要的。&lt;/p&gt;
&lt;p&gt;在进行系统维护时，应该充分利用在系统测试阶段保存下来的测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可修改性&lt;/strong&gt;：诊断和测试的容易程度与系统设计所制定的设计原则有直接关系。&lt;/p&gt;
&lt;p&gt;模块的耦合、内聚、作用范围与控制范围的关系等都对可修改性有影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;软件文档与软件维护&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;u&gt;软件文档是软件可维护性的决定因素。&lt;/u&gt;文档是软件产品的一部分，并且编写高质量的文档可以提高软件开发的质量。&lt;/p&gt;
&lt;p&gt;软件系统的文档分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户文档&lt;/strong&gt;：主要描述&lt;u&gt;系统功能&lt;/u&gt;和&lt;u&gt;使用方法&lt;/u&gt;，并&lt;u&gt;不关心&lt;/u&gt;这些&lt;u&gt;功能是怎样实现的&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统文档&lt;/strong&gt;：描述&lt;u&gt;系统设计、实现和测试&lt;/u&gt;等各方面的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可维护性是所有软件都应具有的基本特点，必须在开发阶段保证软件具有可维护的特点。在软件工程的每一个阶段都应考虑并提高软件的可维护性，在每个阶段结束前的技术审查和管理复查中应该着重对可维护性进行复审（如将来要改进的部分和可能会修改的部分）。&lt;/p&gt;
&lt;p&gt;维护应该针对整个软件配置，不应该只修改源程序代码。&lt;/p&gt;
&lt;h2 id=&#34;软件维护&#34;&gt;软件维护&lt;/h2&gt;
&lt;p&gt;软件维护主要是指&lt;u&gt;根据需求变化或硬件环境的变化对应用程序进行部分或全部修改&lt;/u&gt;。修改时应充分利用源程序，&lt;u&gt;修改后要填写程序修改登记表&lt;/u&gt;，并&lt;u&gt;在程序变更通知书上写明新旧程序的不同之处&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;软件维护的内容一般有以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正确性维护&lt;/strong&gt;：指&lt;u&gt;改正在系统开发阶段已发生而系统测试阶段尚未发现的错误&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;所发现的错误有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不太重要、不影响系统正常运行的错误，其维护工作可随时进行；&lt;/li&gt;
&lt;li&gt;非常重要的错误，甚至会影响整个系统的正常运行，其维护工作必须制定计划，进行修改，并且要进行复查和控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适应性维护&lt;/strong&gt;：&lt;u&gt;使应用软件适应信息技术变化和管理需求变化而进行的修改。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;完善性维护&lt;/strong&gt;：&lt;u&gt;为扩充功能和改善性能而进行的修改&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是指对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能与性能特征。&lt;/li&gt;
&lt;li&gt;还包括对处理效率和编写程序的改进，关系到系统开发质量的重要方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这方面的维护还要注意将相关的文档资料加入到前面相应的文档中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;预防性维护&lt;/strong&gt;：&lt;u&gt;为了改进应用软件的可靠性和可维护性，为了适应未来的软/硬件环境的变化，应主动增加预防性的新的功能，以使应用系统适应各类变化而不被淘汰。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;例如将专用报表功能改成通用报表生成功能，以适应将来报表格式的变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这4个维护内容中，正确性和完善性维护是针对来自系统内部的维护，适应性和预防性是针对来自系统外部的维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正确性维护针对的是系统内部的错误。&lt;/p&gt;
&lt;p&gt;来自系统内部的，与错误有关的都是属于正确性维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完善性维护针对的是系统内部与功能、性能等方面有关的维护。&lt;/p&gt;
&lt;p&gt;来自系统内部的，与系统功能、性能等方面有关的改善都是完善性维护。完善性维护的需求可以来自外部，例如功能的扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适应性维护是针对来自系统外部的技术、管理需求等方面的变化。&lt;/p&gt;
&lt;p&gt;针对来自系统外部的变化，系统功能等方面没有缺失，仅仅只是适应当前环境变化所做的更改，都是属于适应性维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预防性维护针对的是未来的环境变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;项目管理&#34;&gt;项目管理&lt;/h1&gt;
&lt;h2 id=&#34;沟通路径&#34;&gt;沟通路径&lt;/h2&gt;
&lt;p&gt;沟通图是指项目中人员或部门之间的沟通用一条无向边连接起来，所构成图即为沟通图。沟通图中的路径称为沟通路径。&lt;/p&gt;
&lt;p&gt;软件项目中沟通路径$m$的计算公式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;沟通图中无主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;沟通图中有主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = n - 1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件项目估算&#34;&gt;软件项目估算&lt;/h2&gt;
&lt;p&gt;软件项目估算涉及人、技术、环境等多种因素，很难在项目完成前准确地估算出开发软件所需的成本、持续时间和工作量。所以需要一些方法和技术来支持项目的估算，常用的估算方法有下列3种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于已经完成的类似项目进行估算（常用）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于分解技术进行估算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于经验估算模型的估算。&lt;/p&gt;
&lt;p&gt;典型的经验估算模型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM估算模型&lt;/li&gt;
&lt;li&gt;CoCoMo模型&lt;/li&gt;
&lt;li&gt;Putnam模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述方法可以组合使用，以提高估算的精度。&lt;/p&gt;
&lt;h3 id=&#34;cocomo-估算模型&#34;&gt;COCOMO 估算模型&lt;/h3&gt;
&lt;p&gt;COCOMO模型是一种精确的、易于使用的成本估算模型。COCOMO模型按其详细程度分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本COCOMO模型&lt;/strong&gt;：是一个&lt;u&gt;静态单变量模型&lt;/u&gt;，用于对整个软件系统进行估算。&lt;/p&gt;
&lt;p&gt;公式如下：&lt;/p&gt;
&lt;p&gt;$$
E = a(L)^b \\
D=cE^d
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E$：工作量，单位是人月；&lt;/li&gt;
&lt;li&gt;$D$：开发时间，单位是月；&lt;/li&gt;
&lt;li&gt;$L$：项目的源代码行估计值，不包括程序中的注释及文档，其单位是千行代码；&lt;/li&gt;
&lt;li&gt;$a$、$b$、$c$、$d$：常数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本COCOMO模型可通过估算代码行的值$L$，然后计算开发工作量$E$和开发时间$D$的估算值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中级COCOMO模型&lt;/strong&gt;：是一个&lt;u&gt;静态多变量模型&lt;/u&gt;，它&lt;u&gt;将软件系统模型分为系统和部件两个层次&lt;/u&gt;，系统由部件构成，它把软件开发所需的人力（成本）看作是程序大小和一系列“成本驱动属性”的函数。&lt;/p&gt;
&lt;p&gt;中级COCOMO模型以基本COCOMO模型为基础，并考虑了15种影响软件工作量的因素，通过工作量调节因子（EAF）修正对工作量的估算，从而使估算更合理。其公式如下：&lt;/p&gt;
&lt;p&gt;$$
E = a(L)^b \cdot EAF
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$L$：软件产品的目标代码行数，单位是千行代码数；&lt;/li&gt;
&lt;li&gt;$EAF$：工作量调节因子；&lt;/li&gt;
&lt;li&gt;$a$、$b$：常数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;详细COCOMO模型&lt;/strong&gt;：&lt;u&gt;将软件系统模型分为系统、子系统和模块3个层次&lt;/u&gt;，除包括中级模型所考虑的因素外，还考虑了在需求分析、软件设计等每一步的成本驱动属性的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cocomoii模型&#34;&gt;COCOMOII模型&lt;/h3&gt;
&lt;p&gt;和其前身COCOMO一样，COCOMOII也是一种层次结构的估算模型，被分为3个阶段性模型，分别对应三种不同的规模估算选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用组装模型&lt;/strong&gt;：在软件工程的前期阶段使用，这时用户界面的原型开发、对软件和系统交互的考虑、性能的评估以及技术成熟度的评价是最重要的。&lt;/p&gt;
&lt;p&gt;规模估算选择：&lt;strong&gt;对象点&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;早期设计阶段模型&lt;/strong&gt;：在需求己经稳定并且基本的软件体系结构己经建立时使用。&lt;/p&gt;
&lt;p&gt;规模估算选择：&lt;strong&gt;功能点&lt;/strong&gt;。功能点可转换为代码行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;体系结构阶段模型&lt;/strong&gt;：在软件的构造过程中使用。&lt;/p&gt;
&lt;p&gt;规模估算选择：&lt;strong&gt;代码行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结-2&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;COCOMO模型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模型分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型或说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态单变量模型，对整个软件系统进行估算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中级COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态多变量模型，将系统模型分为系统和部件2个层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;详细COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将系统模型分为系统、子系统和模块3个层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;COCOMOII&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;层次结构，分为应用组装模型、早期设计阶段模型和体系结构阶段模型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;COCOMOII的使用时期及规模估算选择：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段性模型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;规模估算选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用组装模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;早期设计阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;功能点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;体系结构阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代码行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;进度管理&#34;&gt;进度管理&lt;/h2&gt;
&lt;p&gt;进度安排：&lt;/p&gt;
&lt;p&gt;为监控软件项目的进度计划和工作的实际进展情况，表示各项任务之间进度的相互依赖关系，需要采用图示的方法。在图中明确标明如下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各个任务的&lt;u&gt;计划开始时间&lt;/u&gt;和&lt;u&gt;计划完成时间&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;各个任务的&lt;u&gt;完成标志&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;各个任务与&lt;u&gt;参与工作的人数&lt;/u&gt;，各个任务与&lt;u&gt;工作量之间的衔接情况&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;完成各个任务所需的&lt;u&gt;物理资源&lt;/u&gt;和&lt;u&gt;数据资源&lt;/u&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进度安排的常用图形描述方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gantt图（甘特图）；&lt;/li&gt;
&lt;li&gt;项目计划评审技术（Program Evaluation&amp;amp;Review Technique，PERT）图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gantt图&#34;&gt;Gantt图&lt;/h3&gt;
&lt;p&gt;Gantt图：一种&lt;u&gt;简单的水平条形图&lt;/u&gt;，它&lt;u&gt;以日历为基准&lt;/u&gt;描述项目任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;垂直轴：表示&lt;u&gt;多个不同的任务&lt;/u&gt;，每个任务按照左侧任务名称垂直排列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平轴：表示&lt;u&gt;日历时间线&lt;/u&gt;（如时、天、周、月和年等）。&lt;/p&gt;
&lt;p&gt;每个水平条表示一个任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一水平条的&lt;u&gt;起点&lt;/u&gt;：表示该任务的&lt;u&gt;开始时间&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;每一水平条的&lt;u&gt;终点&lt;/u&gt;：表示该任务的&lt;u&gt;结束时间&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;每一水平条的&lt;u&gt;长度&lt;/u&gt;：表示&lt;u&gt;完成该任务的持续时间&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当日历中同一时段存在多个水平条时，表示任务之间的并发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683683731050.png&#34;
	width=&#34;795&#34;
	height=&#34;282&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683683731050_hu977eb3a1b8bea533db1ac3601076cb83_32011_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683683731050_hu977eb3a1b8bea533db1ac3601076cb83_32011_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Gantt图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;676px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gantt图优点：&lt;/p&gt;
&lt;p&gt;能清晰地描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个任务的开始时间；&lt;/li&gt;
&lt;li&gt;每个任务的结束时间；&lt;/li&gt;
&lt;li&gt;任务的进展情况；&lt;/li&gt;
&lt;li&gt;各个任务之间的并行性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gantt图缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能清晰地反映各任务之间的&lt;u&gt;依赖关系&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;难以确定&lt;u&gt;整个项目的关键所在&lt;/u&gt;，即不能清晰地确定影响进度的&lt;u&gt;关键任务&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;不能反映&lt;u&gt;计划中有潜力的部分&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pert图&#34;&gt;PERT图&lt;/h3&gt;
&lt;p&gt;PERT图是一个&lt;u&gt;有向图&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弧&lt;/strong&gt;：表示&lt;strong&gt;任务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;任务包含以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;完成该任务所需的时间&lt;/u&gt;（任务持续时间）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;松弛时间&lt;/u&gt;（Slack Time）：表示在&lt;u&gt;不影响整个工期的前提下完成该任务有多少机动余地&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即松弛时间指当前任务的工期可以推迟的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空任务：用虚线箭头表示，表示任务间的关系所添加。完成空任务的所需时间为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结点&lt;/strong&gt;：表示&lt;strong&gt;事件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事件是流入结点的任务的结束，或流出结点的任务的开始。事件&lt;u&gt;表示某个时间点&lt;/u&gt;，本身不消耗时间和资源。&lt;/p&gt;
&lt;p&gt;事件包含以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件号。&lt;/li&gt;
&lt;li&gt;出现该事件的&lt;strong&gt;最早时刻&lt;/strong&gt;：表示在此时刻之前从该事件出发的任务不可能开始。&lt;/li&gt;
&lt;li&gt;出现该事件的&lt;strong&gt;最迟时刻&lt;/strong&gt;：表示从该事件出发的任务最迟在此时刻开始，否则整个工程就不能如期完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;只有当流入该结点的所有任务都结束时，结点所表示的事件才出现，流出结点的任务才可以开始。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;特殊的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始事件：没有任何任务流向该事件；&lt;/li&gt;
&lt;li&gt;结束事件：没有任务任务从该事件流出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个项目是从开始事件开始到结束事件结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683684995281.png&#34;
	width=&#34;850&#34;
	height=&#34;490&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683684995281_hube9164e5138fcdde7e8eebfa04856a94_71059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683684995281_hube9164e5138fcdde7e8eebfa04856a94_71059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$T(e)$：完成任务$e$的所需时间；&lt;/li&gt;
&lt;li&gt;$T_s(e)$：完成任务$e$的松弛时间；&lt;/li&gt;
&lt;li&gt;$T_e(v)$：事件$v$的最早时刻；&lt;/li&gt;
&lt;li&gt;$T_l(v)$：事件$v$的最迟时刻。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PERT图各成分取值（不一定需要满足下面的关系，但是可以用下面的式子推出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事件$V_{in}$的&lt;u&gt;最早时刻&lt;/u&gt;$T_e(V_{in})$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有一个任务流入时，设该任务的流出事件为$V_{out}$，则该任务为$&amp;lt;V_{out}, V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{in}) = T_e(V_{out}) + T(&amp;lt;V_{out}, V_{in}&amp;gt;)
$$&lt;/p&gt;
&lt;p&gt;即：&lt;u&gt;该流入任务的流出事件的最早时刻&lt;/u&gt; + &lt;u&gt;完成该流入任务的所需时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个任务流入时，设与每个任务相对应的流出事件为$V_{out}[ \ i \ ]$，则这些任务为$&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{in}) = Max(T_e(V_{out}[ \ i \ ]) + T(&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;))
$$&lt;/p&gt;
&lt;p&gt;即&lt;u&gt;流入该事件的每个任务计算出的最早时刻的最大值&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始事件$V_{start}$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{start}) = 0
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件$V_{out}$的&lt;u&gt;最迟时刻&lt;/u&gt;$T_l(V_{out})$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有一个任务流出时，设该任务的流入事件为$V_{in}$，则该任务为$&amp;lt;V_{out}, V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = T_l(V_{in}) - (T(&amp;lt;V_{out}, V_{in}&amp;gt;) + T_s(&amp;lt;V_{out}, V_{in}&amp;gt;))
$$&lt;/p&gt;
&lt;p&gt;即：&lt;u&gt;该流出任务的流入事件的最迟时刻&lt;/u&gt; -（&lt;u&gt;该流出任务的所需时间&lt;/u&gt; + &lt;u&gt;松弛时间&lt;/u&gt;）。&lt;/p&gt;
&lt;p&gt;如果松弛时间未知或为0：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = T_l(V_{in}) - T(&amp;lt;V_{out}, V_{in}&amp;gt;)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个任务流出时，设与每个任务相对应的流入事件为$V_{out}[ \ i \ ]$，则这些任务为$&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
Min(V_{out}[ \ i \ ]) = T_l(V_{in}) - (T(&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;) + T_s(&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;))
$$&lt;/p&gt;
&lt;p&gt;即&lt;u&gt;流出该事件的每个任务计算出的最晚时刻的最大值&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如果松弛时间未知：&lt;/p&gt;
&lt;p&gt;$$
Min(V_{out}[ \ i \ ]) = T_l(V_{in}) - T(&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结束事件$V_{end}$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{end}) = T_e(V_{end})
$$&lt;/p&gt;
&lt;p&gt;即&lt;u&gt;结束事件的最早时刻与最迟时刻相等&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设某任务的流入事件为$V_{in}$，流出事件为$V_{out}$，则该任务$&amp;lt;V_{out}, V_{in}&amp;gt;$的&lt;u&gt;松弛时间&lt;/u&gt;$T_s(&amp;lt;V_{out}, V_{in}&amp;gt;)$。&lt;/p&gt;
&lt;p&gt;$$
T_s(&amp;lt;V_{out}, V_{in}&amp;gt;) = T_l(V_{in}) - T(&amp;lt;V_{out}, V_{in}&amp;gt;) - T_e(V_{out})
$$&lt;/p&gt;
&lt;p&gt;即，该任务的流入事件的最迟时刻 - 该任务的所需时间 - 该任务的流出事件的最早时刻&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683719224977.png&#34;
	width=&#34;931&#34;
	height=&#34;341&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683719224977_hu89f160ee9e5081c0094ce31c4ac579dc_24904_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683719224977_hu89f160ee9e5081c0094ce31c4ac579dc_24904_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图公式参照图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;273&#34;
		data-flex-basis=&#34;655px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;PERT图的路径：从开始事件到结束事件的一条通路。&lt;/p&gt;
&lt;p&gt;PERT图的&lt;strong&gt;关键路径&lt;/strong&gt;：指&lt;u&gt;所有的任务的松弛时间都为0的路径&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;关键路径的长度：指结束事件的最早（或最晚）时刻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683706944555.png&#34;
	width=&#34;785&#34;
	height=&#34;457&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683706944555_hu5ed56fd45a79614d457188c6e9a3a0a9_48481_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683706944555_hu5ed56fd45a79614d457188c6e9a3a0a9_48481_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图的关键路径示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;关键路径的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有任务的松弛时间都为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个事件的最早时刻和最迟时刻都是相等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有任务持续时间的和，是PERT图所有路径中最大的，并且与结束事件的最早时刻（或最晚时刻）相等。&lt;/p&gt;
&lt;p&gt;设关键路径中所有事件为$V_i$（$i = 1, 2, \cdots, n$），且该路径下的任务为$&amp;lt;V_j, V_{j+1}&amp;gt;$（$1 \le j \le n-1$）（表示$V_1$是开始事件，$V_2$是$V_1$往下的一个事件，以此类推，$V_n$是结束事件），那么该关键路径结束事件的最早时刻（或最晚时刻）为：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_n) = \sum_{i = 1}^{n-1} T(&amp;lt;V_i, V_{i+1}&amp;gt;)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最迟时刻的另一种求法（PERT图存在关键路径的情况下）：&lt;/p&gt;
&lt;p&gt;已知某PERT图结束事件的最晚时刻（最早时刻），该PERT图中某一条路径（假设该路径没有分支）中所有事件为$V_j$（$j = 1, 2, \cdots, n$），且该路径下的任务为$&amp;lt;V_k, V_{k+1}&amp;gt;$（$1 \le k \le n-1$），该路径下任务的持续时间$T(&amp;lt;V_{k-1}, V_k&amp;gt;)$已知，（即$V_1$是开始事件，按照次序往下，$V_n$是结束事件），计算某一事件的最迟时刻$T_l(V_i)$（$1 \le i &amp;lt; n$）：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_i) = T_l(V_n) - \sum_{j = i}^{n - 1} T(&amp;lt;V_j, V_{j + 1}&amp;gt;)
$$&lt;/p&gt;
&lt;p&gt;即：&lt;u&gt;结束事件的最晚时刻&lt;/u&gt; - &lt;u&gt;该事件到结束事件之间所有的任务的持续时间总和&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果事件$V_i$到结束事件之间存在多条路径，应该选择那条任务持续时间总和最大的路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PERT图的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出了每个任务的开始时间、结束时间和完成该任务所需的时间；&lt;/li&gt;
&lt;li&gt;给出了任务之间的关系（依赖关系）。即任务之间的执行顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PERT图不能清晰地描述任务之间的并行情况。&lt;/p&gt;
&lt;h3 id=&#34;项目活动图&#34;&gt;项目活动图&lt;/h3&gt;
&lt;p&gt;项目活动图是一种有向图（与PERT图十分类似）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;弧：表示活动。弧的权值表示活动的持续时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顶点：表示项目里程碑。&lt;/p&gt;
&lt;p&gt;特殊的里程碑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始里程碑：没有任何活动指向该里程碑；&lt;/li&gt;
&lt;li&gt;结束里程碑：没有任何活动从该里程碑指出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目活动图的关键路径：按照PERT图的方法求出松弛时间为0的、从开始里程碑到结束里程碑的路径。&lt;/p&gt;
&lt;p&gt;关键路径的长度：为结束里程碑的最早时刻（或最晚时刻）。它可以用来表示项目完成的最少时间。&lt;/p&gt;
&lt;h2 id=&#34;软件配置管理&#34;&gt;软件配置管理&lt;/h2&gt;
&lt;p&gt;在软件开发过程中变更是不可避免的，而变更时由于没有进行变更控制，可能加剧了项目中的混乱。为了协调软件开发使得混乱减到最小，使用配置管理技术，使变更所产生的错误达到最小并最有效地提高生产率。&lt;/p&gt;
&lt;p&gt;软件配置管理（Software Configure Management，SCM）用于整个软件工程过程，它是一组管理整个软件生存周期中各阶段变更的活动。&lt;/p&gt;
&lt;p&gt;软件配置管理的主要目标包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标识变更&lt;/li&gt;
&lt;li&gt;控制变更&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;确保变更正确地实现&lt;/li&gt;
&lt;li&gt;报告有关变更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要内容有两种版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;版本管理&lt;/li&gt;
&lt;li&gt;配置支持&lt;/li&gt;
&lt;li&gt;变更支持&lt;/li&gt;
&lt;li&gt;过程支持&lt;/li&gt;
&lt;li&gt;团队支持&lt;/li&gt;
&lt;li&gt;变化报告&lt;/li&gt;
&lt;li&gt;审计支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;软件配置标识&lt;/li&gt;
&lt;li&gt;变更管理&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;系统建立&lt;/li&gt;
&lt;li&gt;配置审核&lt;/li&gt;
&lt;li&gt;配置状态报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;变更控制&#34;&gt;变更控制&lt;/h3&gt;
&lt;p&gt;变更控制是一项最重要的软件配置任务。为了有效地实现变更控制，需借助于配置数据库和基线的概念。&lt;/p&gt;
&lt;p&gt;基线：是软件生存周期中各开发阶段的一个特定点，它的作用是使各开发阶段的工作划分更加明确，使本来连续的工作在这些点上断开，以便于检查与肯定阶段成果。&lt;/p&gt;
&lt;p&gt;基线可以作为一个检查点。在开发过程中，当采用的基线发生错误时可以知道所处的位置，返回到最近和最恰当的基线上。&lt;/p&gt;
&lt;p&gt;配置数据库可分为以下3类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开发库&lt;/strong&gt;：专供开发人员使用，其中的信息可能做频繁修改，对其控制相当宽松。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;受控库&lt;/strong&gt;：在生存期某一阶段工作结束时发布的阶段产品，这些是与软件开发工作相关的计算机可读信息和人工可读信息。&lt;/p&gt;
&lt;p&gt;软件配置管理正是对受控库中的各个软件项进行管理，受控库也称为&lt;strong&gt;软件配置库&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;产品库&lt;/strong&gt;：在开发的软件产品完成系统测试后，作为最终产品存入产品库，等待交付用户或现场安装。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;风险管理&#34;&gt;风险管理&lt;/h3&gt;
&lt;p&gt;一般认为软件风险包含两个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不确定性&lt;/strong&gt;：指风险可能发生也可能不发生；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损失&lt;/strong&gt;：指如果风险发生，就会产生恶性后果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在进行风险分析时，重要的是量化每个风险的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不确定程度&lt;/li&gt;
&lt;li&gt;损失程度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目风险威胁到项目计划。项目风险是指以下各方面的潜在问题以及它们对软件项目的影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预算&lt;/li&gt;
&lt;li&gt;进度&lt;/li&gt;
&lt;li&gt;人员：聘用职员及组织&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;li&gt;利益相关者&lt;/li&gt;
&lt;li&gt;需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下方面的不确定性也属于项目风险因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目复杂度&lt;/li&gt;
&lt;li&gt;项目规模&lt;/li&gt;
&lt;li&gt;项目结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术风险威胁到要开发软件的质量及交付时间。技术风险是指以下方面的潜在问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;验证&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下方面也属于技术风险因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规格说明的歧义性&lt;/li&gt;
&lt;li&gt;技术的不确定性&lt;/li&gt;
&lt;li&gt;技术陈旧&lt;/li&gt;
&lt;li&gt;“前沿”技术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商业风险威肋到要开发软件的生存能力，且常常会危害到项目或产品。5个主要的商业风险如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;市场风险&lt;/strong&gt;：开发了一个没有人真正需要的优良产品或系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略风险&lt;/strong&gt;：开发的产品不再符合公司的整体商业策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;销售风险&lt;/strong&gt;：开发了一个销售部门不知道如何去销售的产品。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理风险&lt;/strong&gt;：由于重点的转移或人员的变动而失去了高级管理层的支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预算风险&lt;/strong&gt;：没有得到预算或人员的保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Charette提出的风险分类方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;己知风险&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;通过仔细&lt;u&gt;评估以下内容可以发现&lt;/u&gt;的风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;项目计划&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开发项目的商业和技术环境&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;其他可靠的信息来源，如：
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;不现实的交付时间&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;没有文档化需求或文档化软件范围&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;恶劣的开发环境&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可预测风险&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;能够&lt;u&gt;从过去项目的经验中推断出来&lt;/u&gt;的风险，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人员变动&lt;/li&gt;
&lt;li&gt;与客户缺乏沟通&lt;/li&gt;
&lt;li&gt;由于正在进行维护而使开发人员精力分散&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不可预测风险&lt;/strong&gt;：可能会真的出现，但&lt;u&gt;很难事先识别&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;风险识别&#34;&gt;风险识别&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;风险识别&lt;/strong&gt;试图&lt;u&gt;系统化地指出对项目计划（估算、进度、资源分配等）的威胁&lt;/u&gt;。&lt;u&gt;识别出已知风险和可预测风险后，项目管理者&lt;/u&gt;首先要做的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;在可能时回避这些风险&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;在必要时控制这些风险&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;识别风险的一种方法是&lt;u&gt;建立风险条目检查表&lt;/u&gt;，主要用来识别下列几种类型中的一些已知风险和可预测风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;产品规模&lt;/strong&gt;：与要开发或要修改的软件的总体规模相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;商业影响&lt;/strong&gt;：与管理者或市场所施加的约束相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户特性&lt;/strong&gt;：与客户的素质以及开发者和客户定期沟通的能力相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过程定义&lt;/strong&gt;：与软件过程定义的程度以及该过程被开发组织遵守的程度相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发环境&lt;/strong&gt;：与用来开发产品的工具的可得性及质量相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发技术&lt;/strong&gt;：与待开发软件的复杂性及系统所包含技术的“新奇性”相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人员才干及经验&lt;/strong&gt;：与软件工程师的总体技术水平及项目经验相关的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与上述每个主题相关的问题可以针对每一个软件项目来回答。根据这些问题的答案，项目管理者就可以估计风险产生的影响。&lt;/p&gt;
&lt;p&gt;另一种风险条目检查表格式：仅仅列出与每一种类型有关的特性，最终给出&lt;u&gt;一组风险因素和驱动因子以及它们发生的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;风险因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：性能风险是指产品能够满足需求且符合其使用目的的不确定程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本&lt;/strong&gt;：成本风险是指能够维持项目预算的不确定程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持&lt;/strong&gt;：支特风险是指开发出的软件易于纠错、修改及升级的不确定程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进度&lt;/strong&gt;：进度风险是指能够维持项目进度且按时交付产品的不确定程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;风险预测&#34;&gt;风险预测&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;风险预测&lt;/strong&gt;又称&lt;strong&gt;风险估计&lt;/strong&gt;，它试图从两个方面评估一个风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风险发生的可能性或概率；&lt;/li&gt;
&lt;li&gt;发生风险所产生的后果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，项日计划人员与管理人员、技术人员一起进行以下4步&lt;u&gt;风险预测活动&lt;/u&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立一个尺度或标准，以反映风险发生的可能性。&lt;/li&gt;
&lt;li&gt;描述风险产生的后果。&lt;/li&gt;
&lt;li&gt;估算风险对项目和产品的影响。&lt;/li&gt;
&lt;li&gt;标注风险预测的整体精确度，以免产生误解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一种简单的风险预测技术是建立风险表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第1列：列出所有的风险（由风险识别活动得到)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第2~4列：列出每个风险的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;种类&lt;/li&gt;
&lt;li&gt;发生的概率&lt;/li&gt;
&lt;li&gt;所产生的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;风险所产生的影响可用一个数字来表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“1”：表示灾难性的；&lt;/li&gt;
&lt;li&gt;“2”：表示严重的；&lt;/li&gt;
&lt;li&gt;“3”：表示轻微的；&lt;/li&gt;
&lt;li&gt;“4”：表示可忽略的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;评估风险影响：&lt;/p&gt;
&lt;p&gt;发生风险时，有3个因素可能会影响风险所产生的后果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;风险的&lt;strong&gt;本质&lt;/strong&gt;：指当风险发生时可能带来的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险的&lt;strong&gt;范围&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风险的严重性；&lt;/li&gt;
&lt;li&gt;风险的整体分布情况：项目中有多少部分受到影响或有多少客户受到损害。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险的&lt;strong&gt;时间&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何时能够感受到风险的影响；&lt;/li&gt;
&lt;li&gt;风险的影响会持续多长时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;风险优先级&#34;&gt;风险优先级&lt;/h4&gt;
&lt;p&gt;在进行项目风险管理时，根据风险的优先级来确定风险控制策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;风险优先级&lt;/strong&gt;：&lt;u&gt;是根据风险暴露来确定的。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险暴露&lt;/strong&gt;：是一种量化风险影响的指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体的风险显露度（Risk Exposure，RE）可由下面的关系确定：&lt;/p&gt;
&lt;p&gt;$$
RE = P \times C
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P$：风险发生的概率；&lt;/li&gt;
&lt;li&gt;$C$:风险发生时带来的项目成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即风险暴露等于风险影响乘以风险概率。风险影响是指当风险发生时造成的损失。&lt;/p&gt;
&lt;h4 id=&#34;风险评估&#34;&gt;风险评估&lt;/h4&gt;
&lt;p&gt;在进行风险评估时，建立了如下形式的三元组：&lt;/p&gt;
&lt;p&gt;$$
(r_i, l_i, x_i)
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$r_i$：表示风险；&lt;/li&gt;
&lt;li&gt;$l_i$：表示风险发生的概率；&lt;/li&gt;
&lt;li&gt;$x_i$：表示风险产生的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种对风险评估很有用的技术就是&lt;u&gt;定义风险参照水准&lt;/u&gt;。对于大多数软件项目来说，有3种典型的风险参照水准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成本：成本是否超支&lt;/li&gt;
&lt;li&gt;进度：进程是否延期&lt;/li&gt;
&lt;li&gt;性能：性能是否下降&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在风险评估过程中，需要执行以下4个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义项目的风险参考水平值。&lt;/li&gt;
&lt;li&gt;建立每一组$(r_i, l_i, x_i)$与每一个参考水平值之间的关系。&lt;/li&gt;
&lt;li&gt;预测一组临界点以定义项目终止区域，该区域由一条曲线或不确定区域所界定。&lt;/li&gt;
&lt;li&gt;预测什么样的风险组合会影响参考水平值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;风险控制&#34;&gt;风险控制&lt;/h4&gt;
&lt;p&gt;风险控制的目的是&lt;u&gt;辅助项目组建立处理风险的策略&lt;/u&gt;。一个有效的策略必须考虑以下3个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;风险避免&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;应对风险的&lt;u&gt;最好办法是主动地避免风险&lt;/u&gt;，即&lt;u&gt;在风险发生前分析引起风险的原因，然后采取措施，以避免风险的发生&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;风险监控&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;项目管理者应监控某些因素，这些因素可以提供风险是否正在变高或变低的指示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RMMM计划：&lt;/p&gt;
&lt;p&gt;风险管理策略可以包含在软件项目计划中，或者风险管理步骤也可以组织成一个独立的风险缓解、监控和管理计划（RMMM计划）。&lt;/p&gt;
&lt;p&gt;RMMM计划将所有风险分析工作文档化，并由项目管理者作为整个项目计划中的一部分来使用。&lt;/p&gt;
&lt;p&gt;建立了RMMM计划，而且项目己经启动之后，风险缓解及监测步骤也就开始了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;风险缓解：一种问题规避活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险监测：一种项目跟踪活动。&lt;/p&gt;
&lt;p&gt;这种监测活动有3个主要目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;评估所预测的风险是否真的发生了；&lt;/li&gt;
&lt;li&gt;保证正确地实施了各风险的缓解步骤；&lt;/li&gt;
&lt;li&gt;收集能够用于今后风险缝隙的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;风险监测的另一个任务就是试图找到“起源”（在整个项目中是哪些风险引起了哪些问题）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结-3&#34;&gt;总结&lt;/h4&gt;
&lt;p&gt;风险分类总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;威胁到项目计划。&lt;p&gt;风险因素：&lt;br&gt;预算、进度、人员、资源和利益相关者，项目复杂度、规模和结构的不确定性&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;技术风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;威胁到软件的质量及交付时间。&lt;p&gt;风险因素：&lt;br&gt;设计、实现、接口、验证和维护，规格说明的歧义性、技术的不确定性、技术陈旧和使用“前沿”技术&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;市场风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发了一个没有人真正需要的产品或系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发的产品不再符合公司的整体商业策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;销售风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发了一个销售部门不知道如何去销售的产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;管理风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;由于重点的转移或人员的变动而失去了高级管理层的支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;预算风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有得到预算或人员的保证。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;风险管理总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;风险管理&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险识别&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指出对项目计划的威胁。可通过建立风险条目检查表识别。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险预测&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从风险发生的可能性或概率、风险产生的后果评估可能发生的风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险评估&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从风险发生的概率和产生的影响评估风险。可用定义风险参照水准技术评估。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;目的是辅助项目建立处理风险的策略。策略是风险避免、风险监控和RMMM计划。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险避免&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应对风险的最好办法是主动地避免风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险监控&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;项目管理者应监控某些可以提供风险高低变化指示的因素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件质量&#34;&gt;软件质量&lt;/h1&gt;
&lt;h2 id=&#34;软件质量特性的度量&#34;&gt;软件质量特性的度量&lt;/h2&gt;
&lt;p&gt;可靠性、可用性和可维护性是软件的质量属性，软件工程中，用$0 \sim 1$之间的数来度量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可靠性：指一个系统对于&lt;u&gt;给定的时间间隔内、在给定条件下无失效运作的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用$\cfrac{MTTF}{1+MTTF}$来度量。&lt;/p&gt;
&lt;p&gt;$MTTF$为&lt;u&gt;平均无故障时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可用性：指&lt;u&gt;在给定的时间点上&lt;/u&gt;，一个&lt;u&gt;系统能够按照规格说明正确运作的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用$\cfrac{MTBF}{1+MTBF}$来度量。&lt;/p&gt;
&lt;p&gt;$MTBF$为&lt;u&gt;平均失效间隔时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可维护性：&lt;u&gt;在给定的使用条件下，在规定的时间间隔内，使用规定的过程和资源完成维护活动的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用$\cfrac{1}{1+MTTR}$来度量。&lt;/p&gt;
&lt;p&gt;$MTTR$为&lt;u&gt;平均修复时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;质量属性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;度量公式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可靠性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;p&gt;$\cfrac{MTTF}{1+MTTF}$&lt;/p&gt;&lt;p&gt;$MTTF$：平均无故障时间&lt;/p&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定时间间隔内、给定条件下，无失效运作的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;p&gt;$\cfrac{MTBF}{1+MTBF}$&lt;/p&gt;&lt;p&gt;$MTBF$：平均失效间隔时间&lt;/p&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定时间点上、能按照规格说明正确运作的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可维护性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;p&gt;$\cfrac{1}{1+MTTR}$&lt;/p&gt;&lt;p&gt;$MTTR$：平均修复时间&lt;/p&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定使用条件下、规定时间间隔内，使用规定过程和资源完成维护的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;软件质量模型&#34;&gt;软件质量模型&lt;/h2&gt;
&lt;p&gt;讨论软件质量首先要了解软件的质量特性，目前己经有多种软件质量模型来描述软件质量特性，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISO/IEC 9126 软件质量模型&lt;/li&gt;
&lt;li&gt;Me Call 软件质量模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;isoiec-9126-软件质量模型&#34;&gt;ISO/IEC 9126 软件质量模型&lt;/h3&gt;
&lt;p&gt;ISO/IEC 9126软件质量模型由3个层次组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层：&lt;strong&gt;质量特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二层：&lt;strong&gt;质量子特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三层：&lt;strong&gt;度量指标&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该模型的质量特性和质量子特性：&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        质量特性
    &lt;/th&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        质量子特性
    &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;6&#34;&gt;
        &lt;b&gt;功能性&lt;/b&gt;（Functionality）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        适合性（Suitability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        准确性（Accurateness）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        互用性（Interoperability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        依从性（Compliance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        安全性（Security）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
        &lt;b&gt;可靠性&lt;/b&gt;（Reliability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        成熟性（Maturity）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        容错性（Fault tolerance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易恢复性（Recoverability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
        &lt;b&gt;易使用性&lt;/b&gt;（Usability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易理解性（Understandability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易学性（Learnability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易操作性（Operability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;3&#34;&gt;
        &lt;b&gt;效率&lt;/b&gt;（Efficiency）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        时间特性（Time behavior）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        资源特性（Resource behavior）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
        &lt;b&gt;可维护性&lt;/b&gt;（Maintainability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易分析性（Analyzability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易改变性（Changeability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        稳定性（Stability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易测试性（Testability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
        &lt;b&gt;可移植性&lt;/b&gt;（Portability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        适应性（Adaptability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易安装性（Installability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        一致性（Conformance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易替换性（Replaceability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;质量子特性的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适合性&lt;/strong&gt;：与对规定任务能否提供一组功能以及这组功能是否适合有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准确性&lt;/strong&gt;：与能够得到正确或相符的结果或效果有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;互用性&lt;/strong&gt;：&lt;u&gt;与其他指定系统进行交互操作&lt;/u&gt;的能力相关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依从性&lt;/strong&gt;：&lt;u&gt;使软件服从有关的标准、约定、法规及类似规定&lt;/u&gt;的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：与避免对程序及数据的非授权故意或意外访问的能力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成熟性&lt;/strong&gt;：与由软件故障引起失效的频度有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：与&lt;u&gt;在软件错误或违反指定接口的情况下维持指定的性能水平&lt;/u&gt;的能力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易恢复性&lt;/strong&gt;：与&lt;u&gt;在故障发生后，重新建立其性能水平并恢复直接受影响数据&lt;/u&gt;的能力，以及为达到此目的所需的时间和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;易使用性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易理解性&lt;/strong&gt;：与用户为理解逻辑概念及其应用所付出的劳动有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易学性&lt;/strong&gt;：与用户为学习其应用（例如操作控制、输入、输出）所付出的努力相关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易操作性&lt;/strong&gt;：与用户为进行操作和操作控制所付出的努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;效率：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间特性&lt;/strong&gt;：与响应和处理时间以及软件执行其功能时的吞吐量有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源特性&lt;/strong&gt;：与软件执行其功能时，所使用的资源量以及使用资源的持续时间有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可维护性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易分析性&lt;/strong&gt;：与为诊断缺陷或失效原因，或为判定待修改的部分所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易改变性&lt;/strong&gt;：与进行修改、排错或适应环境变换所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：与修改造成未预料效果的风险有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易测试性&lt;/strong&gt;：为确认经修改软件所需努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可移植性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适应性&lt;/strong&gt;：与软件转移到不同环境时的处理或手段有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易安装性&lt;/strong&gt;：与在指定环境下安装软件所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：使软件服从与可移植性有关的标准或约定的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易替换性&lt;/strong&gt;：与一软件在该软件环境中用来替代指定的其他软件的可能和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mc-call-软件质量模型&#34;&gt;Mc Call 软件质量模型&lt;/h3&gt;
&lt;p&gt;Mc Call软件质量模型从以下3个方面确定了11个质量特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件产品的&lt;strong&gt;运行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;软件产品的&lt;strong&gt;修正&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;软件产品的&lt;strong&gt;转移&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mc Call也给出了一个三层模型框架：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层：&lt;strong&gt;质量特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二层：&lt;strong&gt;评价准则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三层：&lt;strong&gt;度量指标&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683794894507.png&#34;
	width=&#34;533&#34;
	height=&#34;379&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683794894507_hu9949eda818815c80ae75952e8d8a159a_51224_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683794894507_hu9949eda818815c80ae75952e8d8a159a_51224_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Mc Call 软件质量模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;软件质量保证&#34;&gt;软件质量保证&lt;/h2&gt;
&lt;p&gt;软件质量保证是指为保证软件系统或软件产品充分满足用户要求的质量而进行的有计划、有组织的活动，其目的是生产高质量的软件。&lt;/p&gt;
&lt;p&gt;软件质量保证包括了与以下7个主要活动相关的各种任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用技术方法&lt;/li&gt;
&lt;li&gt;进行正式的技术评审&lt;/li&gt;
&lt;li&gt;测试软件&lt;/li&gt;
&lt;li&gt;标准的实施&lt;/li&gt;
&lt;li&gt;控制变更&lt;/li&gt;
&lt;li&gt;度量（Metrics）&lt;/li&gt;
&lt;li&gt;记录保存和报告&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件评审&#34;&gt;软件评审&lt;/h3&gt;
&lt;p&gt;通常，把“质量”理解为“用户满意程度”。为了使得用户满意，有以下两个必要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计质量&lt;/strong&gt;：设计的规格说明书符合用户的要求。&lt;/p&gt;
&lt;p&gt;设计质量的评审对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件需求规格说明&lt;/li&gt;
&lt;li&gt;数据需求规格说明&lt;/li&gt;
&lt;li&gt;软件概要设计说明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序质量&lt;/strong&gt;：程序按照设计规格说明所规定的情况正确执行。&lt;/p&gt;
&lt;p&gt;程序质量的评审通常是从开发者的角度进行，与开发技术直接相关。程序质量的评审对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件结构：
&lt;ul&gt;
&lt;li&gt;功能结构：
&lt;ul&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;li&gt;功能结构&lt;/li&gt;
&lt;li&gt;数据结构和功能结构之间的对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能的通用性&lt;/li&gt;
&lt;li&gt;模块的层次&lt;/li&gt;
&lt;li&gt;模块结构：
&lt;ul&gt;
&lt;li&gt;控制流结构&lt;/li&gt;
&lt;li&gt;数据流结构&lt;/li&gt;
&lt;li&gt;模块结构与功能结构之间的对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理过程的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与运行环境的接口：
&lt;ul&gt;
&lt;li&gt;与硬件的接口&lt;/li&gt;
&lt;li&gt;与用户的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变更带来的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件的规格说明分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部规格说明&lt;/strong&gt;：从用户角度来看的规格，包括硬件/软件系统设计、功能设计；&lt;/p&gt;
&lt;p&gt;设计质量是由外部规格说明决定的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内部规格说明&lt;/strong&gt;：为了实现外部规格的更详细的规格，即软件模块结构与模块处理过程的设计。&lt;/p&gt;
&lt;p&gt;内部规格说明是从开发者角度来看的规格说明。&lt;/p&gt;
&lt;p&gt;程序是由内部规格说明决定的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件容错技术&#34;&gt;软件容错技术&lt;/h3&gt;
&lt;p&gt;提高软件质量和可靠性的技术大致可分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避开错误：在开发的过程中不让差错潜入软件的技术；&lt;/li&gt;
&lt;li&gt;容错技术：对某些无法避开的差错，使其影响减至最小的技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现容错的&lt;u&gt;主要手段是&lt;strong&gt;冗余&lt;/strong&gt;&lt;/u&gt;。冗余是指&lt;u&gt;对于实现系统规定功能是多余的那部分资源&lt;/u&gt;，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;软件&lt;/li&gt;
&lt;li&gt;信息&lt;/li&gt;
&lt;li&gt;时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于加入了这些资源，有可能使系统的可靠性得到较大的提高。通常，冗余技术分为4类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构冗余&lt;/strong&gt;：结构冗余是通常采用的冗余技术，按其工作方法可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态冗余&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三模冗余（Triple Module Redundancy，TR）&lt;/li&gt;
&lt;li&gt;多模冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态冗余通过表决和比较来屏蔽系统中出现的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态冗余&lt;/strong&gt;：动态冗余的主要方式是多重模块待机储备。&lt;/p&gt;
&lt;p&gt;当系统测试到某工作模块出现错误时，就用一个备用模块来顶替它并重新运行。这里包括以下过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测&lt;/li&gt;
&lt;li&gt;切换&lt;/li&gt;
&lt;li&gt;恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态冗余有以下两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;热备份系统：每当一个出错模块被其他备用模块顶替后，冗余系统相当于进行了一次重构。&lt;/p&gt;
&lt;p&gt;在热备份系统中，备用模块在待机过程中的失效率为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;冷备份系统：各备用模块在其待机时可与主模块一同工作，也可不工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;混合冗余&lt;/strong&gt;：兼有静态元余和动态冗余的长处。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息冗余&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间冗余&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;冗余附加技术&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mccabe-软件复杂性度量法&#34;&gt;McCabe 软件复杂性度量法&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;McCabe度量法&lt;/strong&gt;又称&lt;strong&gt;环路度量法&lt;/strong&gt;，是&lt;u&gt;通过定义环路复杂度，建立程序复杂性的度量，它是一种基于程序控制流的复杂性度量方法&lt;/u&gt;，它反映了程序（或模块）的控制结构的复杂性。&lt;/p&gt;
&lt;p&gt;MaCabe度量法认为&lt;u&gt;程序的复杂性在很大程度上取决于控制的复杂性&lt;/u&gt;。单一的顺序程序结构最为简单，循环和选择构成的环路越多，程序就越复杂。&lt;/p&gt;
&lt;p&gt;MaCabe度量法以图论为工具，先画出程序图，然后用该图的环路数作为程序复杂性的度量值。&lt;/p&gt;
&lt;p&gt;程序图是退化的程序流程图。把程序流程图中的每个处理符号都退化成一个结点，原来连接不同处理符号的流线变成连接不同点的有向弧，这样得到的有向图称为程序图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683629835683.png&#34;
	width=&#34;447&#34;
	height=&#34;416&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683629835683_hu0af7eb1a0943c79d25452239a70d1444_33322_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/uTools_1683629835683_hu0af7eb1a0943c79d25452239a70d1444_33322_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;程序图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;程序图仅描述程序内部的控制流程，完全不表现对数据的具体操作以及分支和循环的具体条件。&lt;/p&gt;
&lt;p&gt;根据图论，在一个强连通的有向图$G$中，计算环的个数$V(G)$的公式为：&lt;/p&gt;
&lt;p&gt;$$
V(G) = m - n + 2p
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$V(G)$：$G$中的&lt;u&gt;环路个数&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$m$：$G$中的&lt;u&gt;弧的个数&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$n$：$G$中的&lt;u&gt;结点数&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$p$：$G$中的&lt;u&gt;强连通分量个数&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个程序中，从程序图的入口点总能到达图中的任何一个结点，因此，程序总是连通的，但不是强连通的。&lt;/p&gt;
&lt;p&gt;为了使程序图成为强连通图，&lt;u&gt;从图的入口点到出口点加一条用虚线表示的有向边&lt;/u&gt;（如上图所示），使图成为强连通图（但虚线弧并不算入实际的弧数）。这样就可以使用上式计算环路复杂性了，也因此程序图的$p$通常为1。&lt;/p&gt;
&lt;p&gt;即，计算有向图$G$的环路复杂性的公式为：&lt;/p&gt;
&lt;p&gt;$$
V(G) = m - n + 2
$$&lt;/p&gt;
&lt;p&gt;例如上图中，结点数$n=6$，弧数$m=9$，则：&lt;/p&gt;
&lt;p&gt;$$
V(G) = 9 - 6 + 2 = 5
$$&lt;/p&gt;
&lt;p&gt;即上图McCabe环路复杂的度量值为5。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$V(G) = 10$是一个实际模块的上限。当$V(G) &amp;gt; 10$时，很难充分测试这个模块。&lt;/p&gt;
&lt;p&gt;在白盒测试中，计算环路复杂度可以简单地使用判定条件的数量 + 1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件工具&#34;&gt;软件工具&lt;/h1&gt;
&lt;h2 id=&#34;软件开发工具&#34;&gt;软件开发工具&lt;/h2&gt;
&lt;p&gt;对应于软件开发过程的各种活动，软件开发工具通常有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析工具&lt;/li&gt;
&lt;li&gt;设计工具&lt;/li&gt;
&lt;li&gt;编码与排错工具&lt;/li&gt;
&lt;li&gt;测试工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件维护工具&#34;&gt;软件维护工具&lt;/h2&gt;
&lt;p&gt;辅助软件维护过程中活动的软件称为软件维护工具，它辅助维护人员对软件代码及其文档进行各种维护活动。软件维护工具主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本控制工具&lt;/li&gt;
&lt;li&gt;文档分析工具&lt;/li&gt;
&lt;li&gt;开发信息库工具&lt;/li&gt;
&lt;li&gt;逆向工程工具&lt;/li&gt;
&lt;li&gt;再工程工具&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
