<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>软考 on Linner&#39;s Blog</title>
        <link>https://blog.linner.asia/tags/%E8%BD%AF%E8%80%83/</link>
        <description>Recent content in 软考 on Linner&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Thu, 25 May 2023 11:34:54 +0800</lastBuildDate><atom:link href="https://blog.linner.asia/tags/%E8%BD%AF%E8%80%83/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>概念总结篇</title>
        <link>https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/</link>
        <pubDate>Thu, 25 May 2023 11:34:54 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;计算机系统&#34;&gt;计算机系统&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%b3%bb%e7%bb%9f%e7%af%87/&#34; &gt;软件设计师——计算机系统篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本单位&#34;&gt;基本单位&lt;/h2&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;td&gt;位（比特）&lt;br&gt;最小数据单位&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;bit、b&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;字节&lt;br&gt;最小存储单位&lt;/td&gt;
    &lt;td&gt;byte、B&lt;/td&gt;
    &lt;td&gt;1B = 8b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;千字节&lt;/td&gt;
    &lt;td&gt;KB&lt;/td&gt;
    &lt;td&gt;1KB = 1024B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;兆字节&lt;/td&gt;
    &lt;td&gt;MB&lt;/td&gt;
    &lt;td&gt;1MB = 1024KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;吉字节&lt;/td&gt;
    &lt;td&gt;GB&lt;/td&gt;
    &lt;td&gt;1GB = 1024MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;太字节&lt;/td&gt;
    &lt;td&gt;TB&lt;/td&gt;
    &lt;td&gt;1TB = 1024GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;中央处理单元&#34;&gt;中央处理单元&lt;/h2&gt;
&lt;p&gt;CPU的功能：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;功能&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;程序控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过执行指令来控制程序的执行顺序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CPU产生每条指令的（若干）操作信号并将操作信号送往对应的部件，控制相应的部件按指令的功能要求进行操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时间控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对各种操作进行时间上的控制，即指令执行过程中操作信号的出现时间、持续时间及出现的时间顺序都需要进行严格控制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据处理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过对数据进行算术运算及逻辑运算等方式进行加工处理，数据加工处理的结果被人们所利用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;CPU的组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器：
&lt;ul&gt;
&lt;li&gt;算术逻辑单元（ALU）：处理数据，对数据进行算术运算和逻辑运算。&lt;/li&gt;
&lt;li&gt;累加寄存器（AC，累加器）：通用寄存器，存放操作数或者结果。。&lt;/li&gt;
&lt;li&gt;数据缓冲寄存器（DR）：暂存由内存读/写的一条指令或一个数据字。&lt;/li&gt;
&lt;li&gt;状态条件寄存器（PSW）：保存了当前指令执行完成之后的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器：
&lt;ul&gt;
&lt;li&gt;指令寄存器（IR）：暂存要执行的指令。&lt;/li&gt;
&lt;li&gt;程序计数器（PC，指令计数器）：寄存信息和指令计数。&lt;/li&gt;
&lt;li&gt;地址寄存器（AR）：保存当前CPU所访问的内存单元的地址。&lt;/li&gt;
&lt;li&gt;指令译码器（ID）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寄存器组&lt;/li&gt;
&lt;li&gt;内部总线&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据编码&#34;&gt;数据编码&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4.png&#34;
	width=&#34;1174&#34;
	height=&#34;273&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4_huf86084d3b2fa3b4510a57d1d605f45ba_75716_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4_huf86084d3b2fa3b4510a57d1d605f45ba_75716_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;带符号数的范围&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1032px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;寻址方式&#34;&gt;寻址方式&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;寻址方式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;立即寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作数就包含在指令中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;直接寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作数在内存，指令给出操作数的地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;寄存器寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作数在寄存器，指令给出操作数的寄存器名（地址）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;寄存器间接寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作数在内存，寄存器存放操作数的地址，指令给出存放操作数地址的寄存器地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;间接寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指令中给出操作数地址（操作数地址在内存中）的地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;相对寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变址寻址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作数地址等于变址寄存器的内容加偏移量。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;校验码&#34;&gt;校验码&lt;/h2&gt;
&lt;p&gt;编码系统的码距：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\ge 2$：该编码系统具有&lt;u&gt;检错能力&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$\ge 3$：该编码系统才&lt;u&gt;可能有纠错能力&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;奇偶校验码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;码距为2。&lt;/li&gt;
&lt;li&gt;仅能检测奇数位数出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;海明码：&lt;/p&gt;
&lt;p&gt;设数据位是$n$位，校验位是$k$位，则$n$和$k$必须满足以下关系：&lt;/p&gt;
&lt;p&gt;$$
2^k-1 \ge n+k
$$&lt;/p&gt;
&lt;p&gt;循环冗余（n,k）码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息码（数据），占k位；&lt;/li&gt;
&lt;li&gt;校验码，占n-k位；&lt;/li&gt;
&lt;li&gt;码距为2，可以检错不能纠错。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机指令集&#34;&gt;计算机指令集&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;RISC&lt;br&gt;精简指令集（计算机）&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;CISC&lt;br&gt;复杂指令集（计算机）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令种类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;少、精简&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多、复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令复杂度&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低（简单）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高（复杂）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令长度&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;固定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;寻址方式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;少&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复杂多样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实现（译码方式）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;硬布线控制逻辑（组合逻辑控制器）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;微程序控制技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通用寄存器数量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多、大量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;流水线技术&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;流水线技术&#34;&gt;流水线技术&lt;/h2&gt;
&lt;p&gt;执行$n$条指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序执行总时间：&lt;/p&gt;
&lt;p&gt;$$
顺序执行总时间=单条指令执行的时间\times n
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线执行总时间：&lt;/p&gt;
&lt;p&gt;$$
流水线执行总时间=一条指令执行的时间+流水线周期 \times (n-1)
$$&lt;/p&gt;
&lt;p&gt;流水线（操作）周期为执行时间最长的一段操作的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连续输入$n$条指令的吞吐率：&lt;/p&gt;
&lt;p&gt;$$
吞吐率=\cfrac {n}{总执行时间}
$$&lt;/p&gt;
&lt;p&gt;如果是流水线的吞吐率，则总执行时间为流水线执行总时间。
流水线的吞吐率是最长流水段操作时间的倒数。即：&lt;/p&gt;
&lt;p&gt;$$
最长流水段操作时间=\cfrac {流水线执行总时间}{n}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加速比：&lt;/p&gt;
&lt;p&gt;$$
加速比 = \cfrac{顺序执行总时间}{流水线执行总时间}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储器&#34;&gt;存储器&lt;/h2&gt;
&lt;p&gt;按存储器所处位置可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存（主存）：在主机内或主板上，存放机器当前运行所需的程序和数据，以便向CPU提供信息。（相对外存）容量小、速度快。&lt;/li&gt;
&lt;li&gt;外存（辅存）：存放当前不参加运行的大量信息，在需要时调入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按存储器工作方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读/写存储器（RAM）。&lt;/li&gt;
&lt;li&gt;只读存储器：ROM、PROM、EPROM、EEPROM等。
&lt;ul&gt;
&lt;li&gt;固定只读存储器（ROM）：厂家生产时就写好数据在其中。只能读（用户）不能写。一般用于存放BIOS和微程序控制。&lt;/li&gt;
&lt;li&gt;可编程读只读存储器（PROM）：其内容可以由用户一次性地写入，写入后不能再修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;高速缓存中的地址映像方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接映像：主存的块与Cache块的对应关系是固定的。冲突多、关系固定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884025087.png&#34;
	width=&#34;825&#34;
	height=&#34;526&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884025087_hu5b011bac95c34a4b59523b3fc3e9bdf5_66159_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884025087_hu5b011bac95c34a4b59523b3fc3e9bdf5_66159_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;376px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全相联映像：允许主存的任一块调入Cache存储器的任一块。冲突少、关系不固定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884252415.png&#34;
	width=&#34;730&#34;
	height=&#34;538&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884252415_hu0e33dbcf5fa3fed2f738b321711ef11e_91734_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884252415_hu0e33dbcf5fa3fed2f738b321711ef11e_91734_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组相联映像：将缓存和主存先分为组，组下再分为块。组与组采用直接映像，组内的块采用全相联映像。冲突较少，是直接映像与全相联映像的折中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;发生块冲突从多到少的顺序：直接映像 &amp;gt; 组相联映像 &amp;gt; 全相联映像。&lt;/p&gt;
&lt;p&gt;地址映像都是由硬件自动完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;中断&#34;&gt;中断&lt;/h2&gt;
&lt;p&gt;程序查询方式（程序直接控制方式）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888001780.png&#34;
	width=&#34;754&#34;
	height=&#34;1174&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888001780_hud6ebe6012cde16108d1ee611e4248e31_240258_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888001780_hud6ebe6012cde16108d1ee611e4248e31_240258_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;64&#34;
		data-flex-basis=&#34;154px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU和I/O只能串行工作。CPU需要一直轮询检查，长期处于忙等状态，CPU利用率低。&lt;/li&gt;
&lt;li&gt;一次只能读/写一个字。&lt;/li&gt;
&lt;li&gt;由CPU将数放入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中断驱动方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888578058.png&#34;
	width=&#34;787&#34;
	height=&#34;1134&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888578058_huafad4d8f462045fe6ed8d3f6574e2433_264777_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888578058_huafad4d8f462045fe6ed8d3f6574e2433_264777_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;166px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O设备通过中断信号主动向CPU报告I/O操作已完成。&lt;/li&gt;
&lt;li&gt;CPU和I/O可并行工作。&lt;/li&gt;
&lt;li&gt;CPU利用率得到提升。&lt;/li&gt;
&lt;li&gt;一次只能读/写一个字。&lt;/li&gt;
&lt;li&gt;由CPU将数据放入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMA方式（直接存储器存储方式）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888972074.png&#34;
	width=&#34;816&#34;
	height=&#34;723&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888972074_hu524534b10c6d25022b5676913927ee92_146843_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888972074_hu524534b10c6d25022b5676913927ee92_146843_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;112&#34;
		data-flex-basis=&#34;270px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU和I/O可并行工作。&lt;/li&gt;
&lt;li&gt;仅在传送数据块多开始和结束时才需要CPU的干预。&lt;/li&gt;
&lt;li&gt;由外设直接将数据放入内存。&lt;/li&gt;
&lt;li&gt;一次读写的单位为&amp;quot;块&amp;quot;而不是字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMA传输数据比中断驱动方式传输数据要快一点。&lt;/p&gt;
&lt;h2 id=&#34;总线&#34;&gt;总线&lt;/h2&gt;
&lt;p&gt;微机中的总线分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据总线&lt;/li&gt;
&lt;li&gt;地址总线&lt;/li&gt;
&lt;li&gt;控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见总线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISA总线。&lt;/li&gt;
&lt;li&gt;EISA总线。&lt;/li&gt;
&lt;li&gt;PCI总线：PCI总线是目前微型机上广泛采用的内总线，采用并行传输方式。&lt;/li&gt;
&lt;li&gt;PCI Express 总线。&lt;/li&gt;
&lt;li&gt;前端总线。&lt;/li&gt;
&lt;li&gt;RS-232C。&lt;/li&gt;
&lt;li&gt;SCSI总线：小型计算机系统接口（SCSI）是一条并行外总线。&lt;/li&gt;
&lt;li&gt;SATA。&lt;/li&gt;
&lt;li&gt;USB。&lt;/li&gt;
&lt;li&gt;IEEE-1394。&lt;/li&gt;
&lt;li&gt;IEEE-488总线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加密与认证技术&#34;&gt;加密与认证技术&lt;/h2&gt;
&lt;p&gt;加密技术用于防止第三方窃听：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对称加密：只有一把密钥。加密和解密用同一把密钥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥分发有缺陷。&lt;/li&gt;
&lt;li&gt;加密解密速度很快。&lt;/li&gt;
&lt;li&gt;适合加量大量明文数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称加密：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密和解密不是同一把密钥。&lt;/li&gt;
&lt;li&gt;一共有两把密钥，分别是公钥和私钥。&lt;/li&gt;
&lt;li&gt;用公钥加密只能用私钥解密，用私钥加密只能用公钥解密。&lt;/li&gt;
&lt;li&gt;不能通过一把密钥推出另一把密钥。&lt;/li&gt;
&lt;li&gt;用接收方的公钥加密明文可以实现防止窃听的效果。&lt;/li&gt;
&lt;li&gt;密钥分发没有缺陷。&lt;/li&gt;
&lt;li&gt;加密解密速度很慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;认证技术用于防止篡改、假冒和否认：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摘要（防止篡改）：Hash算法加密，放在密文后。&lt;/li&gt;
&lt;li&gt;数字签名（防止假冒和否认）：&lt;u&gt;发送方用私钥对摘要进行签名&lt;/u&gt;（加密）。接收方用&lt;u&gt;发送方的公钥对数字签名进行验证&lt;/u&gt;（解密）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数字证书：CA机构用私钥对用户的公钥签名（加密）。接收方用CA的公钥验证（解密），从而得到用户的公钥。&lt;/p&gt;
&lt;p&gt;加密算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称密钥（私钥、私有密钥加密）算法（共享密钥加密算法）：
&lt;ul&gt;
&lt;li&gt;DES&lt;/li&gt;
&lt;li&gt;3DES&lt;/li&gt;
&lt;li&gt;RC-5&lt;/li&gt;
&lt;li&gt;IDEA&lt;/li&gt;
&lt;li&gt;AES&lt;/li&gt;
&lt;li&gt;RC4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非对称密钥（公钥、公开密钥加密）算法：
&lt;ul&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;ECC&lt;/li&gt;
&lt;li&gt;DSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他加密算法：
&lt;ul&gt;
&lt;li&gt;Hash函数&lt;/li&gt;
&lt;li&gt;SHA-1安全散列算法&lt;/li&gt;
&lt;li&gt;MD5摘要算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;程序设计语言&#34;&gt;程序设计语言&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80%e7%af%87/&#34; &gt;软件设计师——程序设计语言篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译过程&#34;&gt;编译过程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680232196718.png&#34;
	width=&#34;549&#34;
	height=&#34;466&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680232196718_hu22cb7da26b44a72475eca6b4da41107c_39469_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680232196718_hu22cb7da26b44a72475eca6b4da41107c_39469_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;编译过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;282px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;必须的编译过程阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;词法分析&lt;/li&gt;
&lt;li&gt;语法分析&lt;/li&gt;
&lt;li&gt;语义分析&lt;/li&gt;
&lt;li&gt;目标代码生成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可省略的编译过程阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中间代码生成&lt;/li&gt;
&lt;li&gt;（中间或目标）代码优化&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;词法分析&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对源程序从前到后（从左到右）逐个字符地扫描，从中识别出一个个“单词”符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语法分析&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据语言的语法规则将单词符号序列分解成各类语法单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语义分析&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;检查源程序是否包含静态语义错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中间代码生成&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分水岭，上面是前端，下面是后端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代码优化&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所做的优化一般与具体的机器无关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;目标代码生成&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;把中间代码变换成机器指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;正规式&#34;&gt;正规式&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;闭包&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示其前面链接的符号或集合可以出现$[0, +\infty]$次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;·&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;连接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可省略，将多个符号或集合连接起来。表示逻辑与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;或&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示逻辑或。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1680248469003.png&#34;
	width=&#34;990&#34;
	height=&#34;277&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1680248469003_huaaba3cb8f1b33a18fcb91ebc2f451286_91806_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1680248469003_huaaba3cb8f1b33a18fcb91ebc2f451286_91806_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;357&#34;
		data-flex-basis=&#34;857px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设$U$、$V$和$W$均为正规式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680249034196.png&#34;
	width=&#34;974&#34;
	height=&#34;185&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680249034196_hu7097887f00dc6fb602c5be85b92d295e_40054_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680249034196_hu7097887f00dc6fb602c5be85b92d295e_40054_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;526&#34;
		data-flex-basis=&#34;1263px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;有限自动机&#34;&gt;有限自动机&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确定的有限自动机&lt;/strong&gt;（Deterministic Finite Automata，DFA）：对每一个状态来说识别字符后转移的&lt;strong&gt;状态是唯一的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个DFA是一个&lt;strong&gt;五元组&lt;/strong&gt;$(S, \Sigma, f, s_0, Z)$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$S$：包含&lt;u&gt;状态的有限集&lt;/u&gt;（每个元素称为一个状态）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Sigma$：有穷&lt;u&gt;字母表&lt;/u&gt;，其每个元素称为一个&lt;u&gt;输入字符&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f$：$S \times \Sigma \to S$ 上的&lt;u&gt;单值部分映像&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;$$
f(A,a)=Q \qquad A \in S, a \in \Sigma
$$&lt;/p&gt;
&lt;p&gt;表示当前状态为$A$、输入为$a$时，将转换到下一状态$Q$，称$Q$为$A$的一个后继状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$s_0$：唯一的&lt;u&gt;开始状态&lt;/u&gt;，$s_0 \in S$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$Z$：非空的&lt;u&gt;终止状态集合&lt;/u&gt;，$Z \subseteq S$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFA可以用两种直观的方式表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态转换图&lt;/strong&gt;：简称为转换图，是一个有向图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DFA中的每个&lt;strong&gt;状态&lt;/strong&gt;对应转换图中的一个&lt;strong&gt;结点&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DFA中的每个&lt;strong&gt;转换函数&lt;/strong&gt;对应图中的一条&lt;strong&gt;有向弧&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;双圈表示的结点是终态结点。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终态也可以是初态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若转换函数为$f(A,a)=Q$，则该有向弧从结点$A$出发，进入结点$Q$,字符$a$是弧上的标记。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态转换矩阵&lt;/strong&gt;：用一个二位数组$M$表示。&lt;/p&gt;
&lt;p&gt;矩阵元素$M[A,a]$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行下标&lt;/strong&gt;：表示状态。当前状态为$A$。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列下标&lt;/strong&gt;：表示输入的字符。当前输入为$a$。&lt;/li&gt;
&lt;li&gt;$M[A,a]$的值：当前状态为$A$、输入为$a$时，应该转换到的下一状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251834262.png&#34;
	width=&#34;983&#34;
	height=&#34;160&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251834262_hudda18d0f6413fec2c6bfff005f78095a_126189_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251834262_hudda18d0f6413fec2c6bfff005f78095a_126189_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;614&#34;
		data-flex-basis=&#34;1474px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251962756.png&#34;
	width=&#34;982&#34;
	height=&#34;585&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251962756_hub668c80da120ede04799d85ae8f0770b_237616_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251962756_hub668c80da120ede04799d85ae8f0770b_237616_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不确定的有限自动机&lt;/strong&gt;（Nondeterministic Finite Automata，NFA）：对每一个状态来说识别字符后转移的&lt;strong&gt;状态是不唯一的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;NFA也是一个&lt;strong&gt;五元组&lt;/strong&gt;$(S, \Sigma, f, s_0, Z)$。与DFA的区别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$f$是$S \times \Sigma \to 2^S$ 上的映像。&lt;/p&gt;
&lt;p&gt;对于$S$中的一个给定状态及输入符号，返回一个状态的集合。即当前状态的后继状态不一定是唯一的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有向弧上的标记可以是 $\varepsilon$（$\varepsilon$ 表示空）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;DFA是NFA的特例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680252743732.png&#34;
	width=&#34;918&#34;
	height=&#34;407&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680252743732_hu52e92fdc66cb95fd2f0c67685207a651_114412_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680252743732_hu52e92fdc66cb95fd2f0c67685207a651_114412_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;541px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;有限自动机识别成功的依据是路跑的通并且跑完后的终点是终态。&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;设计语言成分&#34;&gt;设计语言成分&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;成分&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据成分&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;标识符&lt;/li&gt;&lt;li&gt;关键字&lt;/li&gt;&lt;li&gt;常量&lt;/li&gt;&lt;li&gt;变量&lt;/li&gt;&lt;li&gt;全局量&lt;/li&gt;&lt;li&gt;局部量&lt;/li&gt;&lt;li&gt;数据类型&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算成分&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;算数&lt;/li&gt;&lt;li&gt;关系&lt;/li&gt;&lt;li&gt;逻辑&lt;/li&gt;&lt;li&gt;位&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制结构&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;顺序结构&lt;/li&gt;&lt;li&gt;选择结构&lt;/li&gt;&lt;li&gt;循环结构&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;传输成分&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;函数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%af%87/&#34; &gt;软件设计师——数据结构篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;线性表&#34;&gt;线性表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;顺序表：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在表长为$n$的线性表中，有$n+1$个插入位置（不考虑插入是否会导致溢出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在第$i$个插入位置插入，需要移动$n+1-i$个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第1个位置插入（$a_1$）需要移动$n$个元素；&lt;/li&gt;
&lt;li&gt;在第$n+1$个位置插入（$a_n$后面）不需要移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设在第$i$个插入位置插入的概率为$p_i$，&lt;u&gt;等概率下插入&lt;/u&gt;一个新元素需要移动的元素个数的&lt;u&gt;期望值$E_{insert}$&lt;/u&gt;为：&lt;/p&gt;
&lt;p&gt;$$
E_{insert} = \cfrac{插入位置数-1}{2} = \cfrac{n+1}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表长为$n$的线性表中删除元素时，共有$n$个可删除的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除第$i$个元素$a_i$需要移动$n-i$个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除元素$a_1$需要移动$n-1$个元素；&lt;/li&gt;
&lt;li&gt;删除元素$a_n$不需要移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设$a_i$被删除的概率为$q_i$，&lt;u&gt;等概率下删除元素&lt;/u&gt;时需要移动的元素个数的&lt;u&gt;期望值$E_{delete}$&lt;/u&gt;为：&lt;/p&gt;
&lt;p&gt;$$
E_{delete} = \cfrac{删除位置数}{2} = \cfrac{n-1}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;插入操作时间复杂度：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况（在第$n+1$个位置插入）：$O(1)$；&lt;/li&gt;
&lt;li&gt;最坏情况（在第1个位置插入）：$O(n)$；&lt;/li&gt;
&lt;li&gt;平均复杂度：$O(n)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;链表插入和删除操作时间复杂度&lt;/strong&gt;（带不带头节点的复杂度都一样）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况（在$i=1$位置）：$O(1)$；&lt;/li&gt;
&lt;li&gt;最坏情况（在$n+1$位置插入/删除$n$位置）：$O(n)$&lt;/li&gt;
&lt;li&gt;平均复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;串的模式匹配&#34;&gt;串的模式匹配&lt;/h2&gt;
&lt;p&gt;朴素的模式匹配（布鲁特一福斯）算法：&lt;/p&gt;
&lt;p&gt;设主串和模式串的长度分别为$n$和$m$，算法时间复杂度和比较次数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最好情况：$O(m)$，次数为$m$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最坏情况：$O(n \times m)$，次数为$\cfrac{1}{2} m(n-m+2)$：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-m}{p_i\big( (i+1) \times m \big)} = \cfrac{m}{n-m+1} \sum_{i=0}^{n-m}{(i+1)} = \cfrac{1}{2} m(n-m+2)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均：$O(n+m)$，次数为$\cfrac{1}{2} (n+m)$：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-m}{p_i(i+m)} = \cfrac{1}{n-m+1} \sum_{i=0}^{n-m}{i+m} = \cfrac{1}{2} (n+m)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二维数组为$A[n,m]$，$n$为行数，$m$为列数；&lt;/li&gt;
&lt;li&gt;数组元素$a_{i,j},\ 0 \le i \le n-1,\ 0 \le j \le m-1$；&lt;/li&gt;
&lt;li&gt;$LOC(a_{i,j})$为元素$a_{i,j}$的地址；&lt;/li&gt;
&lt;li&gt;$L$为单个元素的存储空间大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以行为主序优先存储：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i \times n + j) \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) \times n + (j-1) \big) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以列为主序优先存储：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i + j \times m) \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) + (j-1) \times m \big) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对称矩阵：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设将$n$阶对称矩阵$A_{n \times n}$压缩存储到一维数组$B\left[ \cfrac{n(n+1)}{2} \right]$，则$B[k]\ (1 \le k \le \cfrac{n(n+1)}{2})$与矩阵元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$之间存在一一对应关系（以行为主序）：&lt;/p&gt;
&lt;p&gt;$$
k =
\begin{cases}
\cfrac{i(i-1)}{2} + j, &amp;amp; 当\ i \ge j \\
\cfrac{j(j-1)}{2} + i, &amp;amp; 当\ i &amp;lt; j
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;如果下标从0开始（第一个元素为$a_{00}$，$0 \le k \le \cfrac{n(n+1)}{2} - 1$，并且$0 \le i,j \le n-1$）：&lt;/p&gt;
&lt;p&gt;$$
k =
\begin{cases}
\cfrac{i(i+1)}{2} + j + 1, &amp;amp; 当\ i \ge j \\
\cfrac{j(j+1)}{2} + i + 1, &amp;amp; 当\ i &amp;lt; j
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三对角矩阵：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设有$n$阶三对角矩阵$A_{n \times n}$，将其非0元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$存储在一维数组$B[k](1 \le k \le 3 \times n - 2)$中，则元素位置之间的对应关系为：&lt;/p&gt;
&lt;p&gt;$$
k = 3 \times (i-1) - 1 + j - i + 1 + 1 = 2i + j -2
$$&lt;/p&gt;
&lt;p&gt;如果下标从0开始（$0 \le k \le 3(n-1)$，并且$0 \le i,j \le n-1$）：&lt;/p&gt;
&lt;p&gt;$$
k = 3 \times i - 1 + j - i + 1 + 1 = 2i + j + 1
$$&lt;/p&gt;
&lt;h2 id=&#34;树&#34;&gt;树&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设$n$个结点的树，$d_i \ (1 \le i \le n)$为该树中结点的度：&lt;/p&gt;
&lt;p&gt;$$
n = (\sum_{i=1}^{n}{d_i})+1
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;度&lt;/strong&gt;：结点拥有的子树数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;度为$m$的树中第$i$层上至多有$m^{i-1}$个结点（$i \ge 1$）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度为$h$的$m$度树至多有$\cfrac{m^h-1}{m-1}$个结点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;二叉树：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第$i$层（$i \ge 1$）上&lt;u&gt;最多&lt;/u&gt;有$2^{i-1}$个结点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度为$k$的二叉树最多有$2^k-1$个结点（$k \ge 1$）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若二叉树终端结点数（度为0的结点数）为$n_0$，度2的结点数为$n_2$，则$n_0=n_2+1$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有$n$个结点的完全二叉树的深度（高度）为：&lt;/p&gt;
&lt;p&gt;$$
\lfloor \log_2{n} \rfloor + 1;
$$&lt;/p&gt;
&lt;p&gt;或：&lt;/p&gt;
&lt;p&gt;$$
\lceil \log_2{(n+1)} \rceil
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二叉树形态总数（卡特兰数）：&lt;/p&gt;
&lt;p&gt;$$
\cfrac{C^{n}_{2n}}{n+1}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;链式存储二叉树：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设有$n$个结点的二叉树，则其&lt;strong&gt;空指针域数量&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于二叉链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总指针域个数：$2n$；&lt;/li&gt;
&lt;li&gt;分支数（子孙结点数，非空指针域个数）：$n-1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;$$
空指针域数=2n-(n-1)=n+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于三叉链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总指针域个数：$3n$；&lt;/li&gt;
&lt;li&gt;分支数（子孙结点数）：$n-1$；&lt;/li&gt;
&lt;li&gt;指向父结点且非空的指针域个数：$n-1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即，非空指针域个数为：$2(n-1)$。&lt;/p&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;$$
空指针域数=3n-2(n-1)=n+2
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;平衡二叉树：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设一个二叉树的左右子树高度之差的绝对值为$d$，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不平衡的二叉树：$d &amp;gt; 1$；&lt;/li&gt;
&lt;li&gt;平衡的二叉树：$d \le 1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;哈夫曼树&lt;/strong&gt;（最优二叉树）：带权路径长度最短。&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带权叶子结点数：$n$；&lt;/li&gt;
&lt;li&gt;叶子结点的权值：$w_k$；&lt;/li&gt;
&lt;li&gt;叶子结点到根的路径长度：$l_k$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则树的带权路径长度为：&lt;/p&gt;
&lt;p&gt;$$
WPL = \sum_{k=1}^{n}{w_kl_k}
$$&lt;/p&gt;
&lt;p&gt;给定$n$个权值后，哈夫曼树的结点数$m$就确定了：&lt;/p&gt;
&lt;p&gt;$$
m = 2 \times n - 1
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哈夫曼压缩比：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680959771881.png&#34;
	width=&#34;784&#34;
	height=&#34;489&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680959771881_hu4f7b4b1585cf7b1f2369bc9d93906f07_66292_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680959771881_hu4f7b4b1585cf7b1f2369bc9d93906f07_66292_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;压缩比例题&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按照&lt;u&gt;出现频率&lt;/u&gt;计算&lt;u&gt;加权平均长度&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;$$
加权平均长度 = \sum_{i=1}^{5}{字符i的位数 \times 字符i出现频率}
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
1 \times 40% + 3 \times (10% + 20% + 16% + 14%) = 2.2
$$&lt;/p&gt;
&lt;p&gt;压缩后平均长度为2.2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算压缩比：&lt;/p&gt;
&lt;p&gt;$$
压缩比 = \cfrac{压缩前编码长度 - 压缩后平均长度}{压缩前编码长度}
$$&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编码5个字符至少需要3位：$2^2 &amp;lt; 5 &amp;lt; 2^3$，所以压缩前编码长度为3；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压缩比：&lt;/p&gt;
&lt;p&gt;$$
\cfrac{3-2.2}{3} \approx 0.27
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;图&#34;&gt;图&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;完全图&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$n$个顶点的无向完全图共有$\cfrac{n(n-1)}{2}$条边。&lt;/li&gt;
&lt;li&gt;$n$个顶点的有向完全图共有$n(n-1)$条边。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于所有的图，其所有顶点的度数之和 $= 2e$（$e$为边数）。&lt;/p&gt;
&lt;p&gt;$n$个结点的连通图，它的边的取值范围是$[n-1,\cfrac{n(n-1)}{2}]$。&lt;/p&gt;
&lt;p&gt;图的邻接矩阵：横$i$竖$j$，横出竖入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深度优先搜索：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置搜索指针$p$，使$p$指向顶点$v$；&lt;/li&gt;
&lt;li&gt;访问$p$所指顶点，并使$p$指向与其&lt;u&gt;相邻接的且尚未被访问过&lt;/u&gt;的顶点。&lt;/li&gt;
&lt;li&gt;若$p$所指顶点存在，则重复步骤2，否则执行步骤4。&lt;/li&gt;
&lt;li&gt;沿着访问的次序和方向回溯到最后一个有未被访问过的邻接顶点的顶点，并使$p$指向这个未被访问的顶点，然后重复步骤2到4，直到所有的项点均被访问为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;广度优先搜索：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从图中的某个顶点$v$出发；&lt;/li&gt;
&lt;li&gt;访问$v$后，依次访问$v$的各个未被访问过的邻接点；&lt;/li&gt;
&lt;li&gt;分别从$v$的邻接点出发，依次访问它们的邻接点；&lt;/li&gt;
&lt;li&gt;按照$v$的邻接点访问的先后顺序，重复步骤2到4，直到图中所有已被访问的项点的邻接点都被访问到；&lt;/li&gt;
&lt;li&gt;若此时还有未被访问的顶点，则另选图中的一个未被访问的项点作为起点，重复上述过程，直到图中所有的顶点都被访问到为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;广度和深度优先搜索&lt;strong&gt;时间复杂度&lt;/strong&gt;（一样）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵：$O(n^2)$；&lt;/li&gt;
&lt;li&gt;邻接链表：$O(n+e)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AOV 网拓扑排序&lt;/strong&gt;：如果所有顶点已输出，说明网中不存在回路，否则说明存在。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在AOV网中选择一个入度为0的顶点且输出它。&lt;/li&gt;
&lt;li&gt;从网中删除该顶点及与该顶点有关的所有弧。&lt;/li&gt;
&lt;li&gt;重复上述两步，直到网中不存在入度为0的顶点为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;操作系统&#34;&gt;操作系统&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e7%af%87/&#34; &gt;软件设计师——操作系统篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程的三态&#34;&gt;进程的三态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行&lt;/strong&gt;：当一个进程在处理机上运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;就绪&lt;/strong&gt;：一个进程获得了除处理机外的一切所需资源，一旦得到处理机即可运行（还未得到）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阻塞&lt;/strong&gt;（等待或睡眠）：一个进程正在等待某一事件发生而暂时停止运行，这时即使把处理机分配给进程也无法运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同步互斥&#34;&gt;同步互斥&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同步&lt;/strong&gt;：指在系统中一些需要相互合作，协同工作的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;互斥&lt;/strong&gt;：指系统中多个进程因争用临界资源而互斥执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临界资源（CR）：在多道程序系统环境中，那些一次只能供一个进程使用的资源。如打印机、共享变量和表格等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临界区（CS）：是进程中对临界资源实施操作的那段程序。&lt;/p&gt;
&lt;p&gt;互斥临界区管理的4条原则：有空即进、无空则等、有限等待和让权等待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量&#34;&gt;信号量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;公用信号量：实现进程间的互斥，初值为&lt;code&gt;1&lt;/code&gt;或资源的数目。&lt;/li&gt;
&lt;li&gt;私用信号量：实现进程间的同步，初值为&lt;code&gt;0&lt;/code&gt;或某个正整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号量$S$的物理意义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S \ge 0$：表示某资源的可用数，此时&lt;strong&gt;有可用资源&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;$S &amp;lt; 0$：则其绝对值表示阻塞队列中等待该资源的进程数，此时无可用资源，并且有进程被阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PV操作：P（申请）减V（释放）加。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P操作$S &amp;lt; 0$：无可用资源，置该进程为&lt;strong&gt;阻塞&lt;/strong&gt;状态。&lt;/li&gt;
&lt;li&gt;V操作$S \le 0$：表示释放前有程序被阻塞，从阻塞状态唤醒一个进程，并将其插入就绪队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假定信号量S表示某条消息，进程可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用P操作：测试消息是否到达；&lt;/li&gt;
&lt;li&gt;调用V操作：通知消息已经准备好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;死锁&#34;&gt;死锁&lt;/h2&gt;
&lt;p&gt;产生死锁的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程间互相&lt;u&gt;竞争资源&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;进程推进顺序非法&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生死锁的4个必要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件&lt;/li&gt;
&lt;li&gt;请求保持条件&lt;/li&gt;
&lt;li&gt;不可剥夺条件&lt;/li&gt;
&lt;li&gt;环路条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发生死锁时，在进程资源有向图中必构成环路。&lt;/p&gt;
&lt;p&gt;造成死锁的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程推进顺序不当&lt;/li&gt;
&lt;li&gt;同类资源分配不当&lt;/li&gt;
&lt;li&gt;PV操作使用不当&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;死锁的处理策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鸵鸟策略（不理睬策略）&lt;/li&gt;
&lt;li&gt;预防策略&lt;/li&gt;
&lt;li&gt;避免策略&lt;/li&gt;
&lt;li&gt;检测与解除死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;死锁预防：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预先静态分配法：破坏了“不可剥夺条件”，&lt;u&gt;预先分配所需资源，保证不等待资源&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;该方法的问题是降低了对资源的利用率，降低进程的并发程度；有时可能无法预先知道所需资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源有序分配法：破坏了“环路条件”，&lt;u&gt;把资源分类按顺序排列，保证不形成环路&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;该方法存在的问题是限制进程对资源的请求：由于资源的排序占用系统开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e7%af%87/#%e9%93%b6%e8%a1%8c%e5%ae%b6%e7%ae%97%e6%b3%95&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;银行家算法&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程轻型进程&#34;&gt;线程（轻型进程）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本上不拥有资源，只拥有一点运行中必不可少的资源（如程序计数器、一组寄存器和栈）。&lt;/li&gt;
&lt;li&gt;与其它同一进程的线程共享进程所拥有的全部资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户级线程&lt;/li&gt;
&lt;li&gt;内核支持线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储管理&#34;&gt;存储管理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;程序的局限性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间局限性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果程序中的某条&lt;u&gt;指令一旦执行&lt;/u&gt;，则不久的将来该指令&lt;u&gt;可能再次被执行&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;如果某个&lt;u&gt;存储单元被访问&lt;/u&gt;，则不久以后该存储单元&lt;u&gt;可能再次被访问&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生时间局限性的典型原因是&lt;u&gt;在程序中存在着大量的循环操作&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空间局限性&lt;/strong&gt;：指一旦&lt;u&gt;程序访问了某个存储单元&lt;/u&gt;，则在不久的将来，&lt;u&gt;其附近的存储单元也最有可能被访问&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即程序在一段时间内所访问的地址可能集中在一定的范围内，其典型原因为&lt;u&gt;程序是顺序执行的&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;段页式存储管理：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将整个主存划分成大小相等的存储块（页框）。&lt;/li&gt;
&lt;li&gt;将用户程序按程序的逻辑关系分为若干个段，并为每个段赋予一个段名。&lt;/li&gt;
&lt;li&gt;将每个段划分成若干页，以页框为单位离散分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;缓冲&#34;&gt;缓冲&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189558038.png&#34;
	width=&#34;1251&#34;
	height=&#34;272&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189558038_huf41226c97da8111160feca89ef09c095_5839_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189558038_huf41226c97da8111160feca89ef09c095_5839_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;单缓冲并行工作示意图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;459&#34;
		data-flex-basis=&#34;1103px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;$n$个作业的单缓冲所花费的时间为：&lt;/p&gt;
&lt;p&gt;$$
(Max(C, T) + M) \times n + Min(C, T)
$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189296831.png&#34;
	width=&#34;1147&#34;
	height=&#34;257&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189296831_hu582c92cd9e0fed45f58d15d99767bd10_23747_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189296831_hu582c92cd9e0fed45f58d15d99767bd10_23747_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;双缓冲并行工作示意图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;446&#34;
		data-flex-basis=&#34;1071px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;$n$个作业的双缓冲所花费的时间为：&lt;/p&gt;
&lt;p&gt;$$
Max(T, M, C) \times n + T + M + C - Max(T, M, C)
$$&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;p&gt;$$
Max(T, M, C) \times (n - 1) + T + M + C
$$&lt;/p&gt;
&lt;h2 id=&#34;磁盘调度&#34;&gt;磁盘调度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先来先服务&lt;/strong&gt;（First-Come First-Served，FCFS）：根据进程请求访问磁盘的先后次序进行调度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：公平、简单，且每个进程的请求都能依次得到处理，不会出现某进程的请求长期得不到满足的情况。&lt;/li&gt;
&lt;li&gt;缺点：此算法由于未对寻道进行优化，致使平均寻道时间可能较长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最短寻道时间优先&lt;/strong&gt;（Shortest Seek Time First，SSTF，最短移臂算法）：该算法选择这样的进程，其要求访问的磁道与当前磁头所在的磁道距离最近，使得每次的寻道时间最短。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可能会出现饥饿现象。&lt;/li&gt;
&lt;li&gt;缺点：不能保证平均寻道时间最短。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扫描算法&lt;/strong&gt;（SCAN，电梯调度算法）：总是从磁头当前位置开始，沿磁头的移动方向去选择离当前磁头最近的那个柱面的请求。如果沿磁头的方向无请求访问时，就改变磁头的移动方向。&lt;/p&gt;
&lt;p&gt;在这种调度方法下磁头的移动类似于电梯的调度，所以它也称为电梯调度算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：避免了饥饿现象的出现。&lt;/li&gt;
&lt;li&gt;缺点：当磁头刚从里向外移动过某一磁道时，恰有一进程请求访问此磁道，这时该进程必须等待，待磁头从里向外，再从外向里扫描完所有要访问的磁道后才处理该进程的请求，致使该进程的请求被严重地推迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单向扫描算法&lt;/strong&gt;（CSCAN，循环扫描算法）：为了减少上述SCAN缺点中存在的这种延迟，算法规定磁头只做单向移动。&lt;/p&gt;
&lt;p&gt;例如，只是自里向外移动，从当前位置开始沿磁头的移动方向去选择离当前磁头最近的那个柱面访问，如果沿磁头的方向无请求访问时，磁头立即返回到最里面的欲访问的柱面，再亦即将最小柱面号紧接着最大柱面号构成循环，进行循环扫描。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;旋转调度算法&#34;&gt;旋转调度算法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683268410250.png&#34;
	width=&#34;322&#34;
	height=&#34;311&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683268410250_hua6d0da9a28446871d2f3485a4e0dfcf2_31100_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683268410250_hua6d0da9a28446871d2f3485a4e0dfcf2_31100_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;初始逻辑记录分布情况&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;248px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设$n$个扇区的磁盘，经过一个扇区的时间为$t$，读取一个记录后处理的时间为$c$，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序处理完所有记录的总时间为：&lt;/p&gt;
&lt;p&gt;$$
(t + nt) (n-1) + t + c
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
t \times n^2 + c
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录优化后的总时间：&lt;/p&gt;
&lt;p&gt;$$
n(t + c)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多级磁盘索引结构&#34;&gt;多级磁盘索引结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接索引&lt;/strong&gt;：索引表中的地址项直接指向磁盘数据块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683271855209.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;直接索引&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一级间接地址索引&lt;/strong&gt;：索引表中的地址项指向一个磁盘索引块。这个索引块中的记录是地址项，这些地址项直接指向磁盘数据块。&lt;/p&gt;
&lt;p&gt;称这个磁盘索引块为&lt;strong&gt;一级索引块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683274982800.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;一级间接地址索引&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二级间接地址索引&lt;/strong&gt;：索引表中的地址项指向一个磁盘索引块。这个索引块中的一个记录指向一个一级索引块。&lt;/p&gt;
&lt;p&gt;称这个记录指向一级索引块的磁盘索引块为&lt;strong&gt;二级索引块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683275164015.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;二级间接地址索引&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;面向对象&#34;&gt;面向对象&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%af%87/&#34; &gt;软件设计师——面向对象篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;设计原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;责任原则&lt;/strong&gt;（Single Responsibility Principle，SRP）：当需要修改某个类的时候原因有且只有一个，让一个类只做一种类型责任。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开放封闭原则&lt;/strong&gt;（Open &amp;amp; Close Principle，OCP）：软件实体（类、模块、函数等）应
该可以扩展的，即&lt;strong&gt;开放的&lt;/strong&gt;；但是不可修改的，即&lt;strong&gt;封闭的&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;里氏替换原则&lt;/strong&gt;（Liskov Substitution Principle，LSP）：子类型必须能够替换掉他们的基
类型。&lt;/p&gt;
&lt;p&gt;即，在任何父类可以出现的地方，都可以用子类的实例来赋值给父类型的引用。&lt;/p&gt;
&lt;p&gt;当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有是一个（is-a）关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖倒置原则&lt;/strong&gt;（Dependence Inversion Principle，DP）：抽象不应该依赖于细节，细
节应该依赖于抽象。即，&lt;u&gt;高层模块不应该依赖于低层模块，二者都应该依赖于抽象&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;接口分离原则&lt;/strong&gt;（Interface Segregation Principle，ISP）：不应该强迫客户依赖于它们不
用的方法。接口属于客户，不属于它所在的类层次结构。&lt;/p&gt;
&lt;p&gt;即：&lt;u&gt;依赖于抽象，不要依赖于具体，同时在抽象级别不应该有对于细节的依赖。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;这样做的好处就在于可以最大限度地应对可能的变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Robert C. Martin提出的面向对象设计原则（重点的）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共同封闭原则&lt;/strong&gt;（Common Closure Principle，CCP）：包中的所有类对于同一类性质的变化应该是共同到闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共同重用原则&lt;/strong&gt;（Common Reuse Principle，CRP）：一个包中的所有类应该是共同重用
的。如果重用了包中的一个类那么就要重用包中的所有类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%af%87/#uml&#34; &gt;面向对象——UML&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;UML图&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;静态建模&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;动态建模&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;物理建模&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用例图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构件图（组件图)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;部署图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;序列图（顺序图，时序图）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通信图（协作图）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;活动图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;活动图是一种特殊的状态图，它们的差异如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同点：状态中都有初态和终态。&lt;/li&gt;
&lt;li&gt;主要差异：
&lt;ul&gt;
&lt;li&gt;活动图的转换称为流；&lt;/li&gt;
&lt;li&gt;活动图有分支、并发分岔和并发汇合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;差异&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;center&gt;序列图&lt;/center&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;center&gt;通信图&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;强调&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;center&gt;消息时间顺序&lt;/center&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;center&gt;收发消息的对象的结构组织&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;不同的特性&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有对象生命线：对象存在的时间段&lt;/li&gt;&lt;li&gt;有控制焦点：对象执行动作所经历的时间段&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有路径：表示对象之间有交互&lt;/li&gt;&lt;li&gt;有序号：表示消息的时间顺序，可嵌套表示&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下是UML图的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类图&lt;/strong&gt;：展现一组&lt;u&gt;对象（类）&lt;/u&gt;、&lt;u&gt;接口&lt;/u&gt;、&lt;u&gt;协作&lt;/u&gt;和它们之间的&lt;u&gt;关系&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061210921.png&#34;
	width=&#34;619&#34;
	height=&#34;467&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对象图&lt;/strong&gt;：展现某一时刻的一组&lt;u&gt;对象&lt;/u&gt;以及它们之间的&lt;u&gt;关系&lt;/u&gt;，描述了在类图中所建立事物的实例的静态快照&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061786263.png&#34;
	width=&#34;713&#34;
	height=&#34;312&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对象图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用例图&lt;/strong&gt;：展现了一组&lt;u&gt;用例&lt;/u&gt;、&lt;u&gt;参与者&lt;/u&gt;以及它们之间的&lt;u&gt;关系（包含、扩展、关联和泛化）&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682062071630.png&#34;
	width=&#34;756&#34;
	height=&#34;382&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;474px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;序列图（顺序图，时序图）&lt;/strong&gt;：描述了以&lt;u&gt;时间顺序&lt;/u&gt;组织的&lt;u&gt;对象&lt;/u&gt;之间的&lt;u&gt;交互活动&lt;/u&gt;，强调&lt;u&gt;消息时间顺序&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682064874751.png&#34;
	width=&#34;691&#34;
	height=&#34;471&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;序列图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通信图（协作图）&lt;/strong&gt;：强调&lt;u&gt;收发消息的对象的结构组织&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682065157645.png&#34;
	width=&#34;719&#34;
	height=&#34;314&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;通信图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态图（状态转换图）&lt;/strong&gt;：展现了一个状态机，强调&lt;u&gt;对象行为的事件顺序&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682066287326.png&#34;
	width=&#34;831&#34;
	height=&#34;431&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;活动图&lt;/strong&gt;：一种特殊的状态图，展现了在&lt;u&gt;系统内从一个活动到另一个活动的流程&lt;/u&gt;，强调&lt;u&gt;对象间的控制流程&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1682067363114.png&#34;
	width=&#34;654&#34;
	height=&#34;744&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;活动图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构件图（组件图)&lt;/strong&gt;：展现了一组&lt;u&gt;构件之间的组织和依赖&lt;/u&gt;，将构件映射为类、接口或协作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682068370459.png&#34;
	width=&#34;638&#34;
	height=&#34;332&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;构件图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部署图&lt;/strong&gt;：对物理建模，展现了&lt;u&gt;运行时处理结点以及其中构件（制品）的配置&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682073176388.png&#34;
	width=&#34;491&#34;
	height=&#34;327&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;部署图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;设计模式&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%af%87/#%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f&#34; &gt;面向对象——设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计模式代码仓库：&lt;a class=&#34;link&#34; href=&#34;https://gitee.com/linner_cheng/design-patterns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitee.com/linner_cheng/design-patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计模式分类：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;br&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;创建型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;结构型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;行为型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;说明&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与对象的创建有关&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;处理类或对象的组合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述类或对象的交互和职责分配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类模式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Factory Method（工厂方法模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adapter（适配器模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Interpreter（解释器模式）&lt;br&gt;Template Method（模板方法模式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象模式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Abstract Factory（抽象工厂模式）&lt;br&gt;Builder（生成器模式）&lt;br&gt;Prototype（原型模式）&lt;br&gt;Singleton（单例模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adapter（适配器模式）&lt;br&gt;Bridge（桥接模式）&lt;br&gt;Composite（组合模式）&lt;br&gt;Decorator（装饰器模式）&lt;br&gt;Facade（外观模式）&lt;br&gt;Flyweight（享元模式）&lt;br&gt;Proxy（代理模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chain of Responsibility（责任链模式）&lt;br&gt;Command（命令模式）&lt;br&gt;Iterator（迭代器模式）&lt;br&gt;Mediator（中介者模式）&lt;br&gt;Memento（备忘录模式）&lt;br&gt;Observer（观察者模式）&lt;br&gt;State（状态模式）&lt;br&gt;Strategy（策略模式）&lt;br&gt;Visitor（访问者模式）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;创建型设计模式（抽象了对象的实例化过程）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工厂方法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态生产对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义创建对象的接口，由子类实例化对象。让类的实例化延迟到其子类。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象工厂&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成系列对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供创建一系列对象的接口，无需指定具体的类。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构造复杂对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将复杂对象的构建与表示分离。使得同样的构建可以创建不同的表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;克隆对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用原型实例指定创建对象的类型，通过复制原型来创建对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单例&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一个实例&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保证一个类仅有一个实例，并提供一个全局访问点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工厂方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;一个类不知道它所必须创建对象的类&lt;/li&gt;&lt;li&gt;由子类来指定创建的对象&lt;/li&gt;&lt;li&gt;将创建对象的职责委托给多个帮助子类中的某一个&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象工厂&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;系统独立于它产品的创建、&lt;u&gt;组合&lt;/u&gt;和表示&lt;/li&gt;&lt;li&gt;系统由多个产品系列中的一个来配置&lt;/li&gt;&lt;li&gt;强调一系列相关产品对象的设计，以便进行联合使用&lt;/li&gt;&lt;li&gt;提供一个产品类库，只显示它们的接口而不是实现&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;创建复杂对象的算法，独立于该对象的组成部分以及它们的装配方式&lt;/li&gt;&lt;li&gt;构造过程必须允许被构造的对象有不同的表示&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;系统独立于它产品创建、&lt;u&gt;构成&lt;/u&gt;和表示&lt;/li&gt;&lt;li&gt;要实例化的类是在运行时刻指定，如动态装载&lt;/li&gt;&lt;li&gt;避免创建一个与产品类层次平行的工厂类层次&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单例&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;类只能有一个实例，用户可从一个全局点访问&lt;/li&gt;&lt;li&gt;这个唯一实例是通过子类化可扩展的，客户无须更改代码就能使用扩展实例&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结构型模式（组合类或对象获得新的结构）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;适配器（类/对象）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接口转换&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将类的接口转换成兼容其他类的接口。&lt;br&gt;使原本接口不兼容的类可以一起工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桥接&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象与实现分离&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将类的抽象与实现分离，使它们可以独立变化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将对象组合成树型结构以表示“部分——整体”的层次结构。&lt;br&gt;使得用户对单个对象和组合对象的使用具有一致性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;装饰&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态附加职责&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;动态地给一个对象添加一些额外的职责，比用子类来扩展功能更灵活。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外观&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对外统一接口&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为子系统定义和提供一个统一的对外高层接口（外观）。&lt;br&gt;简化了该子系统的使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;享元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;共享大量细粒度对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供支持大量细粒度对象共享的有效方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代理&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介代理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为其他对象提供一种代理以控制对这个对象的访问。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;适配器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;使用接口不符合要求的类&lt;/li&gt;&lt;li&gt;创建可复用、可与其它不相关类或不可预见类协同工作&lt;/li&gt;&lt;li&gt;（仅适用于对象适配器）想使用子类，但又不想对它们子类化来匹配接口&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桥接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;在抽象和实现之间没有固定的绑定关系&lt;/li&gt;&lt;li&gt;抽象以及实现都可以通过生成子类的方法扩充&lt;/li&gt;&lt;li&gt;对抽象的实现部分的修改不会对用户产生影响&lt;/li&gt;&lt;li&gt;隐藏抽象的实现&lt;/li&gt;&lt;li&gt;在多个对象间共享实现，用户并不知道&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;表示对象的部分——整体层次结构&lt;/li&gt;&lt;li&gt;希望用户忽略组合对象与单个对象的不同，并统一地使用它们&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;装饰器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;不影响其他对象，而动态透明地添加职责&lt;/li&gt;&lt;li&gt;处理那些可以撤销的职责&lt;/li&gt;&lt;li&gt;不能采用子类进行扩充&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外观&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;为一个复杂子系统提供一个简单接口&lt;/li&gt;&lt;li&gt;客户程序与抽象类的实现部分之间存在着很大的依赖性&lt;/li&gt;&lt;li&gt;需要构建一个层次结构的子系统时&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;享元&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;使用了大量的对象，造成很大开销&lt;/li&gt;&lt;li&gt;对象的大多数状态都可变为外部状态&lt;/li&gt;&lt;li&gt;删除对象的外部状态后，可以用相对较少的共享对象取代很多组对象&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;在需要比较通用和复杂对象指针代替简单指针时&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;行为型模式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;责任链&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;职责传递&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将处理请求的多个对象连成一条链，请求在链中传递，直到有对象处理。&lt;br&gt;给多个对象处理请求的机会，减少请求的发送者与接收者之间的耦合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请求封装为对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将一个请求封装为一个对象，可用不同请求对客户进行参数化。&lt;br&gt;将请求排队或记录日志，支持撤销操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;解释器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语句解释&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定一种语言，定义其文法和解释器，解释器根据文法解释语言中的句子。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;迭代器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;顺序访问数据集&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供一个顺序访问聚合对象中元素的方法，不需要暴露对象的内部表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介者&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不直接引用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用对象封装一系列的对象交互。&lt;br&gt;使各对象不需显式地相互调用，达到低耦合。&lt;br&gt;可以独立改变对象间的交互。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备忘录&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;保存状态&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不破坏封装的前提下，捕获对象的内部状态，并在该对象之外保存。&lt;br&gt;可以在以后恢复保存的状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;观察者&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;联动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义对象间的一种一对多依赖关系。&lt;br&gt;一个对象状态改变，所有依赖于它的对象都得到通知并被自动更新。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态封装成类&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;把对象的行为封装在不同的状态对象中。&lt;br&gt;允许一个对象在其内部状态改变时改变它的行为。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多方案切换&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义并封装一系列算法，使它们可以在不影响客户端的情况下相互替换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模板方法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;框架&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义一个操作中的算法骨架，让其子类来实现算法中的剩余逻辑。&lt;br&gt;可以不改变算法结构而重新定义其某些特定步骤。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;访问者&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据与操作分离&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;封装作用与某对象结构中元素的操作。&lt;br&gt;可以在不改变元素类的前提下，定义或修改作用于这些元素的操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;责任链&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有多个对象处理请求，运行时刻自动确定由谁处理&lt;/li&gt;&lt;li&gt;不明指定接收者的情况下向多个对象中的一个提交请求&lt;/li&gt;&lt;li&gt;可处理请求的对象集合被动态指定&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;抽象出待执行的动作以参数化某对象&lt;/li&gt;&lt;li&gt;不同的时刻指定、排列和执行请求&lt;/li&gt;&lt;li&gt;支持取消操作，支持修改日志&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;解释器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;文法简单&lt;/li&gt;&lt;li&gt;效率不是关键问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;迭代器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;访问聚合对象的内容而不暴露其内部表示&lt;/li&gt;&lt;li&gt;支持对聚合对象的多种遍历&lt;/li&gt;&lt;li&gt;为遍历不同的聚合结构提供一个统一的接口&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;一组对象以复杂的方式进行通信&lt;/li&gt;&lt;li&gt;一个对象引用其他很多对象并且直接与这些对象通信&lt;/li&gt;&lt;li&gt;定制一个分布在多个类中的行为，而又不想生成太多的子类&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备忘录&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;必须保存一个对象在某一个时刻的（部分）状态&lt;/li&gt;&lt;li&gt;如果用接口让其他对象直接得到这些状态，会暴露对象的实现细节并破坏对象的封装性&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;观察者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;当抽象模型有两个方面，其中一个方面依赖于另一个方面&lt;/li&gt;&lt;li&gt;当改变一个对象的同时需要改变其他对象，又不知道有多少对象待改变&lt;/li&gt;&lt;li&gt;当一个对象必须通知其他对象，又不能假定其他对象是谁（不能紧耦合）&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;对象的行为决定于它的状态，且在运行时刻根据状态改变行为&lt;/li&gt;&lt;li&gt;操作中含有庞大的多分支的条件语句&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;许多相关的类仅仅是行为有异&lt;/li&gt;&lt;li&gt;需要使用一个算法的不同变体&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模板方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;一次性实现算法中不变的部分，将可变的行为留给子类实现&lt;/li&gt;&lt;li&gt;各子类中公共行为被提取到公共父类中，避免代码重复&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;访问者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;对象结构包含很多类对象，用户想对这些对象实施操作&lt;/li&gt;&lt;li&gt;对对象结构中的对象进行很多不同且不相关的操作&lt;/li&gt;&lt;li&gt;定义对象结构的类很少改变，但经常需要在此结构上定义新操作&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;个人理解的方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;简述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工厂方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;具体工厂（工厂接口的实现）创建具体对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象工厂&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个具体工厂（抽象工厂的子类）创建多个产品，不同工厂用不同方式创建这一系列产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;复杂对象通过切换构建&lt;code&gt;construct(Builder)&lt;/code&gt;来创建不同表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;多个原型之间通过克隆&lt;code&gt;Prototype.clone()&lt;/code&gt;来复制对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单例&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过私有化无参构造方法、静态&lt;code&gt;Singleton instance&lt;/code&gt;属性和静态&lt;code&gt;getInstance()&lt;/code&gt;方法使对象保持单例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;适配器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;适配器继承目标类，重写目标类的方法，方法将不兼容的接口包装成与目标类一致的接口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桥接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将产品（抽象）与其某属性（实现）分开，通过桥接（组合）产品与其属性独立出来的类来制造不同产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用树形结构和一致的抽象类让部分和整体的操作一致。如文件树。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;装饰器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;装饰器继承被装饰类，通过构造器传入被装饰对象，然后在与被装饰类一致的方法中添加新操作。多个装饰器嵌套可组成一条装饰链。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外观&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;复杂子系统有很多操作，外观将其简化。跟适配器很像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;享元&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;让一个对象假装成许多个对象。就是很多个对象之间可能有一部分属性的值是一样的，定义一个对象然后共享这部分属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;代理就是给被代理对象加一些操作，跟适配器和外观不同的是代理的接口是与被代理对象一致的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;责任链&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;有多个接口一致的对象，将请求在这些对象间层层转发，请求可以被其中一个对象处理（JavaWeb里的过滤器）。和嵌套的装饰器很像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就是一个命令一个对象，调用这些对象的方式一致（对象接口一致）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;解释器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;解释语言的上下文。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;迭代器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在集合对象的外部，通过迭代器访问集合中的元素，对应的迭代器可由集合对象给出&lt;code&gt;iterator()&lt;/code&gt;。跟Java里的迭代器一个样。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;有多个类似对象，这些对象通过中介互相发送消息（就好像微信聊天一样，微信就是中介）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备忘录&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;捕获并保存对象的内部状态，并且可以恢复到原型保存的状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;观察者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在目标对象状态更新时，观察者们可以收到通知&lt;code&gt;update()&lt;/code&gt;，然后更新自身状态，与目标对象的状态保持一致。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个状态一个类，在状态中通过判断变换到其它状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就是动态切换算法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模板方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;模板实现算法操作中不变的部分，其余的交给子类去实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;访问者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就是在&lt;code&gt;Visitor.visit(访问对象)&lt;/code&gt;中定义对象的操作，然后在结构类中提供&lt;code&gt;accept(Visitor)&lt;/code&gt;来访问这些对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据库&#34;&gt;数据库&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/&#34; &gt;软件设计师——数据库篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三级模式两级映像&#34;&gt;三级模式两级映像&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1681373319410.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;三级模式两级映像&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;三级结构有3类数据模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外模型&lt;/strong&gt;：用户使用的&lt;strong&gt;数据视图&lt;/strong&gt;，是一种局部的逻辑数据视图，表示用户所理解的实体、实体属性和实体关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;概念模型&lt;/strong&gt;：全局的&lt;strong&gt;逻辑数据视图&lt;/strong&gt;，是数据库管理员所看到的实体、实体属性和实体之间的联系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内模型&lt;/strong&gt;：数据的物理&lt;strong&gt;存储模型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三个物理模型分别对应数据库系统的3层结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外模式（子模式、用户模式）&lt;/strong&gt;：数据库用户的数据视图，是与某一应用程序有关的数据的逻辑表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念模式（模式）&lt;/strong&gt;：所有用户的公共数据视图，与具体的应用程序和应用程序开发工具无关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内模式（物理模式、存储模式）&lt;/strong&gt;：是数据在数据库内部的表示方式。&lt;/p&gt;
&lt;p&gt;定义&lt;u&gt;所有的&lt;strong&gt;内部记录类型&lt;/strong&gt;、&lt;strong&gt;索引&lt;/strong&gt;和&lt;strong&gt;文件&lt;/strong&gt;的组织方式&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库系统在三级模式之间提供了两级映像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式——内模式映像存在于&lt;u&gt;概念级和内部级&lt;/u&gt;之间，实现&lt;u&gt;概念模式和内模式&lt;/u&gt;间的相互转换。&lt;/li&gt;
&lt;li&gt;外模式——模式映像：存在于&lt;u&gt;外部级和概念级&lt;/u&gt;之间，实现了&lt;u&gt;外模式和概念模式&lt;/u&gt;之间的相互转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二级映像功能保证数据的独立性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理独立性&lt;/strong&gt;：指当数据库的&lt;u&gt;内模式发生改变时，数据的逻辑结构不变&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑独立性&lt;/strong&gt;：指用户的&lt;u&gt;应用程序与数据库的逻辑结构是相互独立的&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整性约束&#34;&gt;完整性约束&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实体完整性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照完整性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户定义完整性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关系代数运算符&#34;&gt;关系代数运算符&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681431891302.png&#34;
	width=&#34;735&#34;
	height=&#34;301&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681431891302_hu474e5e1683bfce1832772e13dcf3cc90_42174_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681431891302_hu474e5e1683bfce1832772e13dcf3cc90_42174_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关系代数运算符&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;586px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;广义笛卡儿积&lt;/strong&gt;（Extended Cartesian Product）：两个元组分别为$n$目和$m$目的关系$R$和$S$的广义笛卡儿积是一个$(n+m)$列的元组的集合。&lt;/p&gt;
&lt;p&gt;元组的前$n$列是关系$R$的一个元组，后$m$列是关系$S$的一个元组，记作$R \times S$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \times S = \{ t| (t \ = \ &amp;lt;t^n, t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \}
$$&lt;/p&gt;
&lt;p&gt;如果$R$和$S$中有相同的属性名，可在属性名前加关系名作为限定，以示区别。若$R$有$K_1$,个元组，$S$有$K_2$个元组，则$R$和$S$的广义笛卡儿积有$K_1 \times K2$个元组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$&amp;lt;t^n, t^m&amp;gt;$是一个元组$t^n$和$t^m$拼接成的一个元组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;投影&lt;/strong&gt;（Projection）：投影运算是从关系的&lt;u&gt;垂直方向&lt;/u&gt;进行运算，在关系$R$中选出若干属性列$A$组成新的关系，记作$\pi_A (R)$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
\pi_A (R) = \{ t[A]|t \in R \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择&lt;/strong&gt;（Selection）：选择运算是从关系的&lt;u&gt;水平方向&lt;/u&gt;进行运算，是从关系$R$中选择满足给定条件的诸元组，记作$\sigma_F (R)$其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
\sigma_A (R) = \{ t| (t \in R) \wedge F(t) = True \}
$$&lt;/p&gt;
&lt;p&gt;其中，$F(t)$中的运算对象可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性名（或列的序号）；&lt;/li&gt;
&lt;li&gt;常数；&lt;/li&gt;
&lt;li&gt;运算符；&lt;/li&gt;
&lt;li&gt;算术比较符（$&amp;lt;, \le, &amp;gt;, \ge, \neq$）；&lt;/li&gt;
&lt;li&gt;逻辑运算符（$\wedge, \vee, \neg$）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接&lt;/strong&gt;（Join）：连接运算是从两个关系$R$和$S$的笛卡儿积中选取满足条件的元组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以认为笛卡儿积是无条件连接，其他的连接操作认为是有条件连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$\theta$连接&lt;/strong&gt;：从$R$与$S$的笛卡儿积中选取属性间满足一定条件的元组。记作：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{X \theta Y} S = \{ t| (t=&amp;lt;t^n,t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[X] \ \theta \ t^m[Y]) \}
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X \theta Y$：连接的条件；&lt;/li&gt;
&lt;li&gt;$\theta$：比较运算符；&lt;/li&gt;
&lt;li&gt;$X$和$Y$分别为$R$和$S$上度数相等且可比的属性组；&lt;/li&gt;
&lt;li&gt;$t^n\left[ X \right]$表示$R$中$t^n$元组的对应于属性$X$的一个分量；&lt;/li&gt;
&lt;li&gt;$t^m[Y]$表示$S$中$t^m$元组的对应于属性$Y$的一个分量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\theta$连接也可以表示为：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{i \theta j} S = \{ t| (t=&amp;lt;t^n,t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] \ \theta \ t^m[j]) \}
$$&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$i=1,2,3,\cdots,n$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$j=1,2,3,\cdots,m$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$i \theta j$：&lt;/p&gt;
&lt;p&gt;从两个关系$R$和$S$中选取$R$的第$i$列和$S$的第$j$列之间满足$\theta$运算的元组进行连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\theta$连接可以由基本的关系运算笛卡儿积和选取运算导出。因此，$\theta$连接可表示为：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{X \theta Y} S = \sigma_{X \theta Y}(R \times S)
$$&lt;/p&gt;
&lt;p&gt;或：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{i \theta j} S = \sigma_{i \theta j}(R \times S)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等值连接&lt;/strong&gt;：当$\theta$为“=”时，称之为等值连接，记为$R \mathop{\Join}\limits_{i = j} S$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{i = j} S = \{ t| (t=&amp;lt;t^n,t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] = t^m[j]) \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$F$连接：从关系$R$和$S$的笛卡尔积中选取属性值满足某一公式$F$的元组，记为$\mathop{\Join}\limits_{F}$。&lt;/p&gt;
&lt;p&gt;$F$是形为$F_1 \wedge F_2 \wedge \cdots \wedge F_n$的公式，每个$F_p$是形为$i \theta j$的式子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自然连接&lt;/strong&gt;：自然连接是一种特殊的等值连接，它要求两个关系中&lt;u&gt;进行比较的分量必须是相同的属性组&lt;/u&gt;，并且在结果集中&lt;u&gt;将重复属性列去掉&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;若：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$t^n \in R$，$t^m \in S$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R$和$S$具有相同的属性组$B$，且$B=(B_1,B_2,,B_k)$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假定$R$关系的属性：&lt;/p&gt;
&lt;p&gt;$$
A_1,A_2,\cdots,A_{n-k},B_1,B_2,\cdots,B_k
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$S$关系的属性：&lt;/p&gt;
&lt;p&gt;$$
B_1,B2,\cdots,B_k,B_{k+1},B_{k+2},\cdots,B_m
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自然连接可以记为$R \Join S$,其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \Join S = \{ t| (t = &amp;lt;t^n, t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (R.B_1 = S.B_1) \wedge (R.B_2 = S.B_2) \wedge \cdots \wedge (R.B_k = S.B_k) \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外连接&lt;/strong&gt;（Outer Jion）：外连接运算是连接运算的扩展，可以处理由于连接运算而缺失的信息。&lt;/p&gt;
&lt;p&gt;外连接运算有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;左外连接&lt;/strong&gt;（Left Outer Jion，⟕）：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值$null$充填所有来自右侧关系的属性，构成新的元组，将其加入自然连接的结果中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;右外连接&lt;/strong&gt;（Right Outer Jion，⟖）：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值$null$填充所有来自左侧关系的属性，构成新的元组，将其加入自然连接的结果中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全外连接&lt;/strong&gt;（Full Outer Jion，⟗）。完成左外连接和右外连接的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681454087063.png&#34;
	width=&#34;762&#34;
	height=&#34;575&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681454087063_hud13edc09469e2a4b2eff4fd4a8bf7c0a_99173_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681454087063_hud13edc09469e2a4b2eff4fd4a8bf7c0a_99173_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql&#34;&gt;SQL&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#sql&#34; &gt;数据库篇——SQL&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DDL&lt;/strong&gt;（&lt;strong&gt;Data Definition Language&lt;/strong&gt;，&lt;strong&gt;数据定义语言&lt;/strong&gt;）：用来定义数据库对象：数据库，表，列等。&lt;/p&gt;
&lt;p&gt;关键字：&lt;code&gt;CREATE&lt;/code&gt;、&lt;code&gt;DROP&lt;/code&gt;、&lt;code&gt;ALTER&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DML&lt;/strong&gt;（&lt;strong&gt;Data Manipulation Language&lt;/strong&gt;，&lt;strong&gt;数据操作语言&lt;/strong&gt;）：用来对数据库中表的数据进行增删改。&lt;/p&gt;
&lt;p&gt;关键字：&lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DQL&lt;/strong&gt;（&lt;strong&gt;Data Query Language&lt;/strong&gt;，&lt;strong&gt;数据查询语言&lt;/strong&gt;）：用来查询数据库中表的记录。&lt;/p&gt;
&lt;p&gt;关键字：&lt;code&gt;SELECT&lt;/code&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DCL&lt;/strong&gt;（&lt;strong&gt;Data Control Language&lt;/strong&gt;，&lt;strong&gt;数据控制语言&lt;/strong&gt;）：用来定义数据库的访问权限和安全级别，及创建用户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;授权语句格式（&lt;code&gt;GRANT&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;] ...
[&lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象类型&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]...
[&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OPTION&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常见的操作权限如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;对象&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;对象类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;操作权限&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属性列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;TABLE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SELECT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INSERT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;DELETE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALL PRIVILEGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;视图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;TABLE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SELECT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INSERT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;DELETE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALL PRIVILEGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;TABLE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SELECT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INSERT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;DELETE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALTER&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INDEX&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALL PRIVILEGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;DATABASE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;CREATETAB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;建立表的权限，可由DBA授予普通用户；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITH GRANT OPTION&lt;/code&gt;：表示获得了这些权限的用户还可以将权限赋给其他用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;收回权限语句格式（&lt;code&gt;REVOKE&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;REVOKE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]...
[&lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象类型&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;函数依赖&#34;&gt;函数依赖&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;结论&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;元组在$X$上的属性值相等，那么在$Y$上的属性值也相等&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X$函数决定$Y$或$Y$函数依赖于$X$，记作$X \rightarrow Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非平凡的函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Y \not\subseteq X$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$是非平凡的函数依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;平凡的函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Y \subseteq X$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$是平凡的函数依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;完全函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$X&#39; \subset X$，$X&#39; \not\rightarrow Y$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;部分函数依赖（局部函数依赖）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$X \stackrel{f}{\not\longrightarrow} Y$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Y$对$X$部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;传递依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Y \not\subseteq X$，$Y \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Z$对$X$传递依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;码（候选码，候选关键字）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;若$K \stackrel{f}{\rightarrow} U$，则$K$为$R$的候选码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;主属性&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包含在任何一个候选码中的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非主属性&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不包含在任何一个候选码中的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X$非$R$的码，但$X$是另一个关系的码，则称$X$为外码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Armstrong公理系统：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;定律&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;F蕴含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自反律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Y \subseteq X \subseteq U$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增广律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Z \subseteq U$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$XZ \rightarrow XZ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;传递律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ Y \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Z$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;规则&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;F蕴含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;合并规则&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ X \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow YZ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;伪传递律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ WY \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$XW \rightarrow Z$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分解规则&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ Z \subseteq Y$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Z$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;关系模式的分解&#34;&gt;关系模式的分解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e6%97%a0%e6%8d%9f%e8%bf%9e%e6%8e%a5&#34; &gt;无损连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e4%bf%9d%e6%8c%81%e5%87%bd%e6%95%b0%e4%be%9d%e8%b5%96&#34; &gt;保持函数依赖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;范式&#34;&gt;范式&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e8%8c%83%e5%bc%8f&#34; &gt;数据库篇——范式&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一范式（1NF）：若关系模式R的&lt;u&gt;每一个分量是不可再分的数据项&lt;/u&gt;，则关系模式R属于第一范式。&lt;/p&gt;
&lt;p&gt;如，关系模式$R&amp;lt;U,F&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U = \{ 学号,姓名,学院,院长,课程号,课程名,成绩 \} \\
F = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长,课程号 \rightarrow 课程名,(学号,课程号) \rightarrow 成绩 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二范式（2NF）：若关系模式$R \in 1NF$，且&lt;u&gt;每一个非主属性完全依赖于码&lt;/u&gt;，则关系模式$R \in 2NF$。&lt;/p&gt;
&lt;p&gt;即当&lt;u&gt;1NF消除了对主键的部分函数依赖后就能满足2NF&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;例如，$学号 \rightarrow 学院$，即$(学号,课程号) \stackrel{P}{\rightarrow} 学院$（部分依赖于码），所以$R \not\in 2NF$。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;模式的分解需要保持函数依赖。&lt;/u&gt;根据$F$，将$R$分解为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$R_1&amp;lt;U_1,F_1&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_1 = \{ 学号,姓名,学院,院长 \} \\
F_1 = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_2&amp;lt;U_2,F_2&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_2 = \{ 课程号,课程名 \} \\
F_2 = \{ 课程号 \rightarrow 课程名 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_3&amp;lt;U_3,F_3&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_3 = \{ 学号,课程号,成绩 \} \\
F_3 = \{ (学号,课程号) \rightarrow 成绩 \}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则，$R1 \in 2NF$，$R2 \in 2NF$，$R3 \in 2NF$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三范式（3NF）：若关系模式$R(R \in 2NF)$中&lt;u&gt;任何一个非主属性都不传递函数依赖于码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;若关系模式$R&amp;lt;U,F&amp;gt;$（$U$为关系集，$F$为函数依赖集）中不存在这样的码$X$，使得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X \rightarrow Y(Y \not\rightarrow X)$，&lt;/li&gt;
&lt;li&gt;$Y \rightarrow Z$，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则关系模式$R \in 3NF$，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Y$为属性组，&lt;/li&gt;
&lt;li&gt;$Z(Z \not\subseteq Y)$为非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即当&lt;u&gt;2NF消除了非主属性对主键的传递函数依赖&lt;/u&gt;，则称为3NF。&lt;/p&gt;
&lt;p&gt;如，$R_1$中有$学号 \rightarrow 学院$，$学院 \rightarrow 院长$（非主属性&amp;quot;院长&amp;quot;传递依赖于主键&amp;quot;学号&amp;quot;）。可将$R_1$分解为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$R_{11}&amp;lt;U_{11},F_{11}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_{11} = \{ 学号,姓名,学院 \} \\
F_{11} = \{ 学号 \rightarrow 姓名, 学号 \rightarrow 学院 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_{12}&amp;lt;U_{12},F_{12}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_{12} = \{ 学院,院长 \} \\
F_{12} = \{ 学院 \rightarrow 院长 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;范式之间的关系：&lt;/p&gt;
&lt;p&gt;$$
5NF \sub 4NF \sub BCNF \sub 3NF \sub 2NF \sub 1NF
$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1681894653450.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;规范化范式的包含关系&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;3NF和BCNE它们是进行规范化的主要目标。&lt;/p&gt;
&lt;p&gt;1NF到4NF之间的转换关系：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;范式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;转换关系&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每一个分量是不可再分的数据项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1NF消除了部分函数依赖后满足2NF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2NF消除了非主属性对码的传递函数依赖后满足3NF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BCNF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3NF消除了主属性对码的部分和传递函数依赖后满足BCNF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BCNF消除非平凡且非函数依赖的多值依赖后满足4NF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1681988070233.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;规范化步骤&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;几种范式及其分解的性质：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;性质&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3NF&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;BCNF&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;4NF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;消除函数依赖带来冗余&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;消除多值函数依赖带来冗余&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保持函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保持多值函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;数据库设计&#34;&gt;数据库设计&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%be%e8%ae%a1&#34; &gt;数据库篇——数据库设计&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;分布式数据库&#34;&gt;分布式数据库&lt;/h2&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分片透明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制透明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;位置透明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑透明&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享性&lt;/strong&gt;：数据存储在不同的结点数据共享。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自治性&lt;/strong&gt;：指每结点对本地数据都能独立管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可用性&lt;/strong&gt;：指当某一场地故障时，系统可以使用其他场地上的副本而不至于使整个系统瘫痪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;结构化设计&#34;&gt;结构化设计&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%bb%93%e6%9e%84%e5%8c%96%e8%ae%be%e8%ae%a1%e7%af%87/&#34; &gt;软件设计师——结构化设计篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;模块化&#34;&gt;模块化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;：是在程序中是数据说明、可执行语句等&lt;u&gt;程序对象的集合&lt;/u&gt;，或者是单独命名和编址的元素，例如高级语言中的过程、函数和子程序等。&lt;/p&gt;
&lt;p&gt;在软件的体系结构中，模块是可组合、分解和更换的单元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化&lt;/strong&gt;：是指&lt;u&gt;将一个待开发的软件分解成若干个小的简单部分一模块&lt;/u&gt;，&lt;u&gt;每个模块可独立地开发、测试，最后组装成完整的程序&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;这是一种&lt;u&gt;复杂问题“分而治之”的原则&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;模块化的&lt;u&gt;目的是使程序的结构清晰，容易阅读、理解、测试和修改。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块独立&lt;/strong&gt;：是指&lt;u&gt;每个模块完成一个相对独立的特定子功能&lt;/u&gt;，并且&lt;u&gt;与其他模块之间的联系简单&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;衡量模块独立程度的标准有（模块独立性的两个定性标准）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;耦合性&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内聚性&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在将软件系统划分模块时，应尽量做到&lt;strong&gt;高内聚&lt;/strong&gt;、&lt;strong&gt;低耦合&lt;/strong&gt;，提高模块的独立性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，可以按照在软件系统中的功能将模块分为四种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传入模块：取得数据或输入数据，经过某些处理，再将其传送给其他模块。&lt;/li&gt;
&lt;li&gt;传出模块：输出数据，在输出前可能进行某些处理。数据可能被输出到系统的外部，或者会输出到其他模块进行进一步处理。&lt;/li&gt;
&lt;li&gt;变换模块：从上级调用模块得到数据，进行特定的处理，转换成其他形式，再将加工结果返回给调用模块。&lt;/li&gt;
&lt;li&gt;协调模块：一般不对数据进行加工，主要是通过调用、协调和管理其他模块来完成特定的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;耦合和内聚&#34;&gt;耦合和内聚&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683443957893.png&#34;
	width=&#34;874&#34;
	height=&#34;133&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683443957893_hub7c8379d83566b7e880998eac437a73f_32408_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683443957893_hub7c8379d83566b7e880998eac437a73f_32408_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;耦合的种类&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;657&#34;
		data-flex-basis=&#34;1577px&#34;
	
&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;耦合类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无直接耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有直接关系，不传递任何信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调用关系，传递简单数据值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;标记耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传递数据结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调用关系，被调模块传递给主调模块控制变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外部耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过软件之外的环境联结&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;公共耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过公共数据环境相互作用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;内容耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;直接使用另一个模块的内部数据&lt;br&gt;或通过非正常入口转入另一个模块内部&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683460613634.png&#34;
	width=&#34;852&#34;
	height=&#34;150&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683460613634_hu1eaacf717e4a21f2e2077ba172b88635_37938_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683460613634_hu1eaacf717e4a21f2e2077ba172b88635_37938_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;内聚的种类&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;568&#34;
		data-flex-basis=&#34;1363px&#34;
	
&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;内聚类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;偶然内聚&lt;br&gt;（巧合内聚）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;各处理之间没有任何联系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逻辑内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;执行若干个逻辑上相似的功能，&lt;br&gt;通过参数确定该模块完成哪一个功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时间内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;把需要同时执行的动作组合在一起&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;过程内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;完成多个任务，这些任务必须按指定的过程执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通信内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有处理都在同一个数据结构上操作，&lt;br&gt;或者各处理使用相同的输入数据或者产生相同的输出数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;顺序内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;各处理都与同一功能密切相关且必须顺序执行，&lt;br&gt;前一功能元素的输出就是下一功能元素的输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;功能内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有元素共同作用完成一个功能，缺一不可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;系统结构设计原则&#34;&gt;系统结构设计原则&lt;/h2&gt;
&lt;p&gt;为保证总体结构设计顺利完成，应遵循以下几条原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分解——协调原则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;系统整体，具有其整体的目的和功能，但这些目的和功能的实现又是由相互联系的各个组成部分共同工作的结果。解决复杂问题的一个很重要的原则就是把它分解成多个小问题分别处理，在处理过程中根据系统总体要求协调各部门的关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自顶向下的原则&lt;/strong&gt;：从上往下，逐层分解；先确定上层模块的功能，再确定下层模块的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息隐蔽、抽象的原则&lt;/strong&gt;：&lt;u&gt;上层模块只规定下层模块做什么和所属模块间的协调关系，但不规定怎么做&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性原则&lt;/strong&gt;：统一的规范、标准、文件模式……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;明确性原则&lt;/strong&gt;：每个模块必须：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能明确、接口明确；&lt;/li&gt;
&lt;li&gt;消除多重功能和无用接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高内聚、低耦合&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块的扇入系数和扇出系数要合理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;扇出系数&lt;/strong&gt;：模块直接调用其他模块的个数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扇入系数&lt;/strong&gt;：模块被其他模块调用时，直接调用它的模块个数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;一个设计得好的系统的平均扇入、扇出系数通常是 3 或 4，一般不应超过 7&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块的规模适当&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;过大的模块常常使系统分解得不充分；&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;过小的模块有可能降低模块的独立性，造成系统接口的复杂性。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;模块的作用范围应该在其控制范围之内。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免或减少使用病态连接：病态连接是指从中部进入或访问一个模块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统文档&#34;&gt;系统文档&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;人员&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;文档&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用户&lt;br&gt;系统分析人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统规划&lt;br&gt;系统分析&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沟通文档，主要是&lt;strong&gt;规划报告&lt;/strong&gt;、&lt;strong&gt;合同&lt;/strong&gt;、&lt;strong&gt;方案&lt;/strong&gt;：&lt;br&gt;&lt;ul&gt;&lt;li&gt;可行性研究报告&lt;/li&gt;&lt;li&gt;总体规划报告&lt;/li&gt;&lt;li&gt;系统开发合同&lt;/li&gt;&lt;li&gt;系统方案说明书&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统开发人员&lt;br&gt;项目管理人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目期内&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沟通文档（项目管理文件），主要是&lt;strong&gt;计划&lt;/strong&gt;、&lt;strong&gt;报告&lt;/strong&gt;类文档：&lt;br&gt;&lt;ul&gt;&lt;li&gt;系统开发计划&lt;ul&gt;&lt;li&gt;工作任务分解表&lt;/li&gt;&lt;li&gt;PERT图&lt;/li&gt;&lt;li&gt;甘特图&lt;/li&gt;&lt;li&gt;预算分配表&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;系统开发月报&lt;/li&gt;&lt;li&gt;系统开发总结报告&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统测试人员&lt;br&gt;系统开发人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;测试&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;系统测试人员根据以下文档对系统进行测试：&lt;br&gt;&lt;ul&gt;&lt;li&gt;系统方案说明书&lt;/li&gt;&lt;li&gt;系统开发合同&lt;/li&gt;&lt;li&gt;系统设计说明书&lt;/li&gt;&lt;li&gt;测试计划&lt;/li&gt;&lt;/ul&gt;系统测试人员再将评估结果撰写成系统测试报告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统开发人员&lt;br&gt;用户&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统运行期间&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户通过系统开发人员撰写的文档运行系统：&lt;br&gt;&lt;ul&gt;&lt;li&gt;用户手册&lt;/li&gt;&lt;li&gt;操作指南&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统开发人员&lt;br&gt;系统维护人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;维护&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沟通文档：&lt;ul&gt;&lt;li&gt;系统设计说明书&lt;/li&gt;&lt;li&gt;系统开发总结报告&lt;ul&gt;&lt;li&gt;研制报告&lt;/li&gt;&lt;li&gt;研制报告&lt;/li&gt;&lt;li&gt;技术手册&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用户&lt;br&gt;维修人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运维&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户将运行过程中的问题进行记载：&lt;ul&gt;&lt;li&gt;系统运行报告&lt;/li&gt;&lt;li&gt;维护修改建议&lt;/li&gt;&lt;/ul&gt;系统维护人员根据以下文档对系统进行维护和升级：&lt;ul&gt;&lt;li&gt;维护修改建议&lt;/li&gt;&lt;li&gt;系统开发人员留下的技术手册等文档&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;数据流图和数据字典&#34;&gt;数据流图和数据字典&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%bb%93%e6%9e%84%e5%8c%96%e8%ae%be%e8%ae%a1%e7%af%87/#%e7%bb%93%e6%9e%84%e5%8c%96%e5%88%86%e6%9e%90%e6%96%b9%e6%b3%95&#34; &gt;结构化设计篇——结构化分析方法&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件工程&#34;&gt;软件工程&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b%e7%af%87/&#34; &gt;软件设计师——软件工程篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;软件过程模型&#34;&gt;软件过程模型&lt;/h2&gt;
&lt;p&gt;能力成熟度模型（从1开始）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;级别&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;杂乱无章，几乎没有明确定义的步骤。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可重复级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;建立基本的项目管理过程和实践来跟踪项目费用、进度和功能特性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已定义级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将管理和工程文档化、标准化并综合成标准软件过程；&lt;br&gt;使用标准开发过程（或方法论）构建（或集成）系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;己管理级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对软件过程和产品质量制定了的详细度量标准，且有定量的理解和控制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优化级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;加强了定量分析，通过过程质量和新观念、新技术使过程不断地改进。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;能力成熟度集成连续式模型（从0开始）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;能力等级&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;目标&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;未完成的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;未执行或未得到等级1中的所有目标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已执行的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可标识的输入工作产品到输出工作产品的转换，实现特定目标。&lt;p&gt;关注：特定目标的完成。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已管理的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已管理的过程的制度化。&lt;p&gt;关注：针对单个过程实例的能力。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已定义级的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已定义的过程的制度化。&lt;p&gt;关注：过程的组织级标准化和部署。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定量管理的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可定量管理的过程的制度化。&lt;p&gt;说明：使用测量和质量保证来控制和改进。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优化的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;优化的过程的制度化。&lt;p&gt;说明：使用量化手段改变和优化。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各开发模型的适用范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;瀑布模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将软件生存周期中的活动定为线性顺序链接的阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求明确、大致固定且变更少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;V模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;瀑布模型的变体，强调测试贯穿项目的始终，是一种测试的开发模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求明确、低风险&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增量模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;融合瀑布模型和原型迭代，核心功能先完成，每轮迭代都会有新的增量，核心功能得到充分测试，强调每个增量均发布一个可操作的产品&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;快速构造可运行的产品，产品升级，领域熟悉或已有原型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;演化模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;迭代的过程模型，需求无法被完整定义，功能在使用过程中不断完善&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对软件需求缺乏准确认识的情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;原型开发方法模型，目的是快速、低成本地构建原型系统&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求不清或多变、领域陌生；不适合大规模系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;螺旋模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;结合瀑布和演化模型，强调引入风险分析，属于面向对象开发模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;庞大、复杂、高风险的系统，开发人员有丰富的风险评估经验和知识&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;喷泉模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向对象模型，特点是迭代、无间隙和支持重用，各阶段无明显界限，可迭代交叉&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向对象的开发过程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;统一过程&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用例驱动、以架构为中心、迭代和增量&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;统一过程模型阶段里程碑和关注点总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;里程碑&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;关注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;生命周期目标&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;项目的初创活动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;精化阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;生命周期架构&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求分析和架构演进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构建阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始运作功能&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;系统的构建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移交阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;产品发布&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件提交方面的工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;软件需求&#34;&gt;软件需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能需求&lt;/strong&gt;：考虑系统要做什么，在何时做，在何时以及如何修改或升级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能需求&lt;/strong&gt;：考虑软件开发的技术性指标。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储容量限制；&lt;/li&gt;
&lt;li&gt;执行速度；&lt;/li&gt;
&lt;li&gt;响应时间；&lt;/li&gt;
&lt;li&gt;吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户或人的因素&lt;/strong&gt;：考虑用户的类型。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各种用户对使用计算机的熟练程度，需要接受的训练；&lt;/li&gt;
&lt;li&gt;用户理解、使用系统的难度；&lt;/li&gt;
&lt;li&gt;用户错误操作系统的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;环境需求&lt;/strong&gt;：考虑未来软件应用的环境，包括硬件和软件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对硬件设备的需求包括：机型、外设、接口、地点、分布、湿度、磁场干扰等；&lt;/li&gt;
&lt;li&gt;对软件的需求包括：操作系统、网络、数据库等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;界面需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自其他系统的输入；&lt;/li&gt;
&lt;li&gt;到其他系统的输出；&lt;/li&gt;
&lt;li&gt;对数据格式的特殊规定；&lt;/li&gt;
&lt;li&gt;对数据存储介质的规定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文档需求&lt;/strong&gt;：考虑需要哪些文档，文档针对哪些读者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入、输出数据的格式；&lt;/li&gt;
&lt;li&gt;接收、发送数据的频率；&lt;/li&gt;
&lt;li&gt;数据的准确性和精度；&lt;/li&gt;
&lt;li&gt;数据流量；&lt;/li&gt;
&lt;li&gt;数据需保持的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源使用需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件运行时所需要的数据、其他软件、内存空间等资源；&lt;/li&gt;
&lt;li&gt;软件开发、维护时，所需的人力、支撑软件、开发设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全保密要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否需要对访问系统或系统信息加以控制；&lt;/li&gt;
&lt;li&gt;隔离用户数据的方法；&lt;/li&gt;
&lt;li&gt;用户程序如何与其他程序和操作系统隔离&lt;/li&gt;
&lt;li&gt;系统备份要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可靠性要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统的可靠性要求；&lt;/li&gt;
&lt;li&gt;系统是否必须检测和隔离错误；&lt;/li&gt;
&lt;li&gt;出错后，重启系统允许的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;软件成本消耗与开发进度需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发是否有规定的时间表；&lt;/li&gt;
&lt;li&gt;软/硬件投资有无限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他非功能性要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;如采用某种开发模式，需要确定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;质量控制标准；&lt;/li&gt;
&lt;li&gt;里程碑和评审；&lt;/li&gt;
&lt;li&gt;验收标准；&lt;/li&gt;
&lt;li&gt;各种质量要求的优先级；&lt;/li&gt;
&lt;li&gt;可维护性方面的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;单元测试&lt;/h2&gt;
&lt;p&gt;在测试中应检查以下要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块接口：模块的接口保证了测试模块的数据流可以正确地流入、流出。&lt;/p&gt;
&lt;p&gt;在测试中应检查以下要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试模块的&lt;u&gt;输入参数&lt;/u&gt;和&lt;u&gt;形式参数&lt;/u&gt;在&lt;u&gt;个数、属性、单位&lt;/u&gt;上&lt;u&gt;是否一致&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;调用其他模块时，所给出的&lt;u&gt;实际参数&lt;/u&gt;和&lt;u&gt;被调用模块的形式参数&lt;/u&gt;在&lt;u&gt;个数、属性、单位&lt;/u&gt;上&lt;u&gt;是否一致&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;调用标准函数时，所用的&lt;u&gt;参数在属性、数目和顺序上是否正确&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;全局变量在各模块中的定义和用法是否一致。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;输入是否仅改变了形式参数。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开/关的语句&lt;/u&gt;是否正确。&lt;/li&gt;
&lt;li&gt;规定的&lt;u&gt;I/O格式&lt;/u&gt;是否与输入/输出语句一致。&lt;/li&gt;
&lt;li&gt;在使用文件之前是否已经打开文件或使用文件之后是否己经关闭文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重要的执行路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出错处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边界条件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集成测试&#34;&gt;集成测试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非增量集成&lt;/strong&gt;：分别测试各个模块，再把这些模块组合起来进行整体测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可以对模块进行并行测试，能充分利用人力，并加快工程进度。&lt;/li&gt;
&lt;li&gt;缺点：容易混乱，出现错误不容易查找和定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增量集成&lt;/strong&gt;：以小增量的方式逐步进行构造和测试。&lt;/p&gt;
&lt;p&gt;增量式测试的范围一步步扩大，错误容易定位，更易于对接口进行彻底测试，并且可以运用系统化的测试方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增量集成策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自项向下集成测试：从主控模块（主程序）开始，以深度优先或广度优先的方式。不需要驱动模块。&lt;/li&gt;
&lt;li&gt;自底向上集成测试：从原子模块开始进行构造和测试。不需要桩模块。&lt;/li&gt;
&lt;li&gt;回归测试&lt;/li&gt;
&lt;li&gt;冒烟测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试方法&#34;&gt;测试方法&lt;/h2&gt;
&lt;p&gt;黑白盒测试法属于动态测试。设计测试用例时应包括合理的输入条件和不合理的输入条件。&lt;/p&gt;
&lt;h2 id=&#34;黑盒测试&#34;&gt;黑盒测试&lt;/h2&gt;
&lt;p&gt;等价类划分：从每个等价类中选取一个代表性数据作为测试用例。用少量代表性的测试用例取得较好的测试效果。&lt;/p&gt;
&lt;p&gt;分为有效等价类和无效等价类。&lt;/p&gt;
&lt;p&gt;定义等价类的原则如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;u&gt;输入条件规定了取值范围或值的个数&lt;/u&gt;的情况下，&lt;u&gt;可以定义1个有效等价类和2个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;输入条件规定了输入值的集合或规定了“必须如何”&lt;/u&gt;的条件的情况下，&lt;u&gt;可以定义1个有效等价类和一个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在输入条件是一个&lt;u&gt;布尔量&lt;/u&gt;的情况下，&lt;u&gt;可以定义一个有效等价类和一个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;规定了输入数据的一组值（假定$n$个）&lt;/u&gt;，并且程序要&lt;u&gt;对每一个输入值分别处理&lt;/u&gt;的情况下，&lt;u&gt;可以定义$n$个有效等价类和1个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;规定了输入数据必须遵守的规则&lt;/u&gt;的情况下，&lt;u&gt;可以定义一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在确知己划分的等价类中，各元素在程序处理中的方式不同的情况下，则应将该等价类进一步划分为更小的等价类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无效等价类的划分：每个无效等价类的测试用例，&lt;u&gt;只违反一个输入的取值范围&lt;/u&gt;。如果违反了多个输入的取值范围，那便是不好的测试用例。&lt;/p&gt;
&lt;p&gt;例如，输入$x$的取值范围是$0 \sim 10$，输入$y$的取值范围是$-10 \sim -1$，那么可以定义三个等价类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类1：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$-10 \sim -1$；&lt;/li&gt;
&lt;li&gt;无效等价类2：$x$的取值范围是$x &amp;lt; 0 \ \ OR \ \ x &amp;gt; 10$，输入$y$的取值范围是$-10 \sim -1$；&lt;/li&gt;
&lt;li&gt;无效等价类3：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$x &amp;lt; -10 \ \ OR \ \ x &amp;gt; -1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了等价类划分还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边界值分析&lt;/li&gt;
&lt;li&gt;错误推测&lt;/li&gt;
&lt;li&gt;因果图&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;白盒测试&#34;&gt;白盒测试&lt;/h2&gt;
&lt;p&gt;逻辑覆盖：考察用测试数据运行被测程序时，对程序逻辑的覆盖程度。&lt;/p&gt;
&lt;p&gt;主要的逻辑覆盖标准有6种，它们的覆盖程度从低到高为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;逻辑覆盖&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语句覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每条语句执行一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支（判定）覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个分支获得一次True/False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个分支中的每个逻辑条件的所有可能取值满足一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;判定/条件覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分支覆盖 + 条件覆盖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件组合覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个判定中条件的各种可能值的组合都出现一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;路径覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;覆盖被测试程序中所有可能的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了逻辑覆盖还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环覆盖&lt;/li&gt;
&lt;li&gt;基本路径测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件维护&#34;&gt;软件维护&lt;/h2&gt;
&lt;p&gt;正确性和完善性维护是针对来自系统内部的维护，适应性和预防性是针对来自系统外部的维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正确性维护针对的是系统内部的错误。&lt;/p&gt;
&lt;p&gt;来自系统内部的，与错误有关的都是属于正确性维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完善性维护针对的是系统内部与功能、性能等方面有关的维护。&lt;/p&gt;
&lt;p&gt;来自系统内部的，与系统功能、性能等方面有关的改善都是完善性维护。完善性维护的需求可以来自外部，例如功能的扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适应性维护是针对来自系统外部的技术、管理需求等方面的变化。&lt;/p&gt;
&lt;p&gt;针对来自系统外部的变化，系统功能等方面没有缺失，仅仅只是适应当前环境变化所做的更改，都是属于适应性维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预防性维护针对的是未来的环境变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;沟通路径&#34;&gt;沟通路径&lt;/h2&gt;
&lt;p&gt;软件项目中沟通路径$m$的计算公式（人数$n$）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;沟通图中无主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;沟通图中有主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = n - 1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;估算模型&#34;&gt;估算模型&lt;/h2&gt;
&lt;p&gt;COCOMO模型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模型分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型或说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态单变量模型，对整个软件系统进行估算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中级COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态多变量模型，将系统模型分为系统和部件2个层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;详细COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将系统模型分为系统、子系统和模块3个层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;COCOMOII&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;层次结构，分为应用组装模型、早期设计阶段模型和体系结构阶段模型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;COCOMOII的使用时期及规模估算选择：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段性模型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;规模估算选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用组装模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;早期设计阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;功能点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;体系结构阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代码行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;甘特图和pert图&#34;&gt;甘特图和PERT图&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b%e7%af%87/#%e8%bf%9b%e5%ba%a6%e7%ae%a1%e7%90%86&#34; &gt;软件工程篇——项目进度管理&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;风险分类&#34;&gt;风险分类&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;威胁到项目计划。&lt;p&gt;风险因素：&lt;br&gt;预算、进度、人员、资源和利益相关者，项目复杂度、规模和结构的不确定性&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;技术风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;威胁到软件的质量及交付时间。&lt;p&gt;风险因素：&lt;br&gt;设计、实现、接口、验证和维护，规格说明的歧义性、技术的不确定性、技术陈旧和使用“前沿”技术&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;市场风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发了一个没有人真正需要的产品或系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发的产品不再符合公司的整体商业策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;销售风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发了一个销售部门不知道如何去销售的产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;管理风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;由于重点的转移或人员的变动而失去了高级管理层的支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;预算风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有得到预算或人员的保证。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;风险管理总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;风险管理&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险识别&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指出对项目计划的威胁。可通过建立风险条目检查表识别。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险预测&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从风险发生的可能性或概率、风险产生的后果评估可能发生的风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险评估&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从风险发生的概率和产生的影响评估风险。可用定义风险参照水准技术评估。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;目的是辅助项目建立处理风险的策略。策略是风险避免、风险监控和RMMM计划。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险避免&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应对风险的最好办法是主动地避免风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险监控&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;项目管理者应监控某些可以提供风险高低变化指示的因素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;isoiec-9126-软件质量模型&#34;&gt;ISO/IEC 9126 软件质量模型&lt;/h2&gt;
&lt;p&gt;由3个层次组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层：&lt;strong&gt;质量特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二层：&lt;strong&gt;质量子特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三层：&lt;strong&gt;度量指标&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该模型的质量特性和质量子特性：&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        质量特性
    &lt;/th&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        质量子特性
    &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;6&#34;&gt;
        &lt;b&gt;功能性&lt;/b&gt;（Functionality）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        适合性（Suitability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        准确性（Accurateness）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        互用性（Interoperability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        依从性（Compliance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        安全性（Security）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
        &lt;b&gt;可靠性&lt;/b&gt;（Reliability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        成熟性（Maturity）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        容错性（Fault tolerance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易恢复性（Recoverability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
        &lt;b&gt;易使用性&lt;/b&gt;（Usability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易理解性（Understandability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易学性（Learnability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易操作性（Operability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;3&#34;&gt;
        &lt;b&gt;效率&lt;/b&gt;（Efficiency）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        时间特性（Time behavior）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        资源特性（Resource behavior）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
        &lt;b&gt;可维护性&lt;/b&gt;（Maintainability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易分析性（Analyzability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易改变性（Changeability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        稳定性（Stability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易测试性（Testability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
        &lt;b&gt;可移植性&lt;/b&gt;（Portability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        适应性（Adaptability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易安装性（Installability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        一致性（Conformance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易替换性（Replaceability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;质量子特性的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适合性&lt;/strong&gt;：与对规定任务能否提供一组功能以及这组功能是否适合有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准确性&lt;/strong&gt;：与能够得到正确或相符的结果或效果有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;互用性&lt;/strong&gt;：&lt;u&gt;与其他指定系统进行交互操作&lt;/u&gt;的能力相关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依从性&lt;/strong&gt;：&lt;u&gt;使软件服从有关的标准、约定、法规及类似规定&lt;/u&gt;的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：与避免对程序及数据的非授权故意或意外访问的能力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成熟性&lt;/strong&gt;：与由软件故障引起失效的频度有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：与&lt;u&gt;在软件错误或违反指定接口的情况下维持指定的性能水平&lt;/u&gt;的能力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易恢复性&lt;/strong&gt;：与&lt;u&gt;在故障发生后，重新建立其性能水平并恢复直接受影响数据&lt;/u&gt;的能力，以及为达到此目的所需的时间和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;易使用性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易理解性&lt;/strong&gt;：与用户为理解逻辑概念及其应用所付出的劳动有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易学性&lt;/strong&gt;：与用户为学习其应用（例如操作控制、输入、输出）所付出的努力相关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易操作性&lt;/strong&gt;：与用户为进行操作和操作控制所付出的努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;效率：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间特性&lt;/strong&gt;：与响应和处理时间以及软件执行其功能时的吞吐量有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源特性&lt;/strong&gt;：与软件执行其功能时，所使用的资源量以及使用资源的持续时间有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可维护性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易分析性&lt;/strong&gt;：与为诊断缺陷或失效原因，或为判定待修改的部分所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易改变性&lt;/strong&gt;：与进行修改、排错或适应环境变换所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：与修改造成未预料效果的风险有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易测试性&lt;/strong&gt;：为确认经修改软件所需努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可移植性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适应性&lt;/strong&gt;：与软件转移到不同环境时的处理或手段有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易安装性&lt;/strong&gt;：与在指定环境下安装软件所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：使软件服从与可移植性有关的标准或约定的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易替换性&lt;/strong&gt;：与一软件在该软件环境中用来替代指定的其他软件的可能和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h2&gt;
&lt;h2 id=&#34;网络分类&#34;&gt;网络分类&lt;/h2&gt;
&lt;p&gt;按通信距离分类：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            网络分类
            &lt;/th&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            分布距离
        &lt;/th&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            计算机分布范围
        &lt;/th&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            传输速率
        &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align:center&#34; rowspan=&#34;4&#34;&gt;
            &lt;b&gt;
                局域网
                &lt;br&gt;
                MAN
            &lt;/b&gt;
        &lt;/td&gt;
        &lt;tr&gt;
            &lt;td&gt;10m左右&lt;/td&gt;
            &lt;td&gt;房间&lt;/td&gt;
            &lt;td rowspan=&#34;3&#34;&gt;
                4Mbps ~ 1Gbps
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;100m左右&lt;/td&gt;
            &lt;td&gt;楼寓&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;1000m左右&lt;/td&gt;
            &lt;td&gt;校园&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align:center&#34;&gt;
            &lt;b&gt;
                城域网
                &lt;br&gt;
                WAN
            &lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;10km&lt;/td&gt;
        &lt;td&gt;城市&lt;/td&gt;
        &lt;td&gt;50Kbps ~ 100 Mbps&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align:center&#34;&gt;
            &lt;b&gt;
                广域网
                &lt;br&gt;
                LAN
            &lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;100km以上&lt;/td&gt;
        &lt;td&gt;国家或全球&lt;/td&gt;
        &lt;td&gt;9.6Kbps ~ 45Mbps&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;isoosi-网络体系结构&#34;&gt;ISO/OSI 网络体系结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875696461.png&#34;
	width=&#34;390&#34;
	height=&#34;339&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875696461_hu39205de4aab8f3d4638771bbe2a09e98_32206_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875696461_hu39205de4aab8f3d4638771bbe2a09e98_32206_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;OSI 参考模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信子网对应于OSI中的低三层：
&lt;ul&gt;
&lt;li&gt;物理层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源子网对应于OSI中的高三层：
&lt;ul&gt;
&lt;li&gt;会话层&lt;/li&gt;
&lt;li&gt;表示层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683877150679.png&#34;
	width=&#34;724&#34;
	height=&#34;404&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683877150679_hu64c4f9fea840087facedf4dd79f952ea_77141_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683877150679_hu64c4f9fea840087facedf4dd79f952ea_77141_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ISO/OSI RM 内信息流动&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;网络的拓扑结构&#34;&gt;网络的拓扑结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总线型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683875429976.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;总线型结构&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;星型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683875460651.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;星型结构&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683875485913.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;环型结构&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683875508387.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;树型结构&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683875530047.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;分布式结构&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络设备&#34;&gt;网络设备&lt;/h2&gt;
&lt;p&gt;按照ISO/OSI的分层将互连设备分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;物理层设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中继器（Repeater）&lt;/li&gt;
&lt;li&gt;集线器（Hub）：一种多端口的中继器。集线器不能自动寻址，但可以检测发送冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据链路层设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网桥（Bridge）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交换机（Switch）：一种多端口的网桥。&lt;/p&gt;
&lt;p&gt;交换技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口交换&lt;/li&gt;
&lt;li&gt;帧交换&lt;/li&gt;
&lt;li&gt;信元交换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层设备：路由器（Router）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683956321797.png&#34;
	width=&#34;554&#34;
	height=&#34;235&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683956321797_hu561f5310d4335c386da88596021542b0_86791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683956321797_hu561f5310d4335c386da88596021542b0_86791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;路由器类型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;235&#34;
		data-flex-basis=&#34;565px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层设备：网关（Gateway）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络传输介质&#34;&gt;网络传输介质&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有线介质：
&lt;ul&gt;
&lt;li&gt;双绞线（Twisted-Pair）&lt;/li&gt;
&lt;li&gt;同轴电缆（Coaxial）&lt;/li&gt;
&lt;li&gt;光纤（Fiber Optic）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无线介质：
&lt;ul&gt;
&lt;li&gt;微波&lt;/li&gt;
&lt;li&gt;红外线和激光&lt;/li&gt;
&lt;li&gt;卫星通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lan-模型&#34;&gt;LAN 模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683879193227.png&#34;
	width=&#34;397&#34;
	height=&#34;252&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683879193227_hu88c8e8da15a4cc0b1b209d5e372c6435_32953_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683879193227_hu88c8e8da15a4cc0b1b209d5e372c6435_32953_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LAN 层次与 ISO/OSI RM 的对应关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;378px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;以太网&#34;&gt;以太网&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IEEE 802.3中定义的标准局域网，速度为10Mbps，传输介质为细同轴电缆；&lt;/li&gt;
&lt;li&gt;IEEE 802.3u中定义的快速以太网，速度为100Mbps，传输介质为双绞线；&lt;/li&gt;
&lt;li&gt;IEEE 802.3z中定义的千兆以太网，速度为1000Mbps，传输介质为光纤或双绞线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcpip-协议族&#34;&gt;TCP/IP 协议族&lt;/h2&gt;
&lt;p&gt;基本特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑编制：IP地址包括：
&lt;ul&gt;
&lt;li&gt;网络ID号：用来标识网络；&lt;/li&gt;
&lt;li&gt;子网ID号：用来标识网络上的一个子网；&lt;/li&gt;
&lt;li&gt;主机ID号：用来标识子网上的一台计算机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由选择&lt;/li&gt;
&lt;li&gt;域名（DNS）解析&lt;/li&gt;
&lt;li&gt;错误检测&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP/IP分层模型由4个层次构成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;网际层&lt;/li&gt;
&lt;li&gt;网络接口层&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683880948768.png&#34;
	width=&#34;697&#34;
	height=&#34;339&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683880948768_huf85223c878afcabc7c687de01d9badd5_93199_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683880948768_huf85223c878afcabc7c687de01d9badd5_93199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;TCP/IP 模型于 OSI 模型的对比&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;205&#34;
		data-flex-basis=&#34;493px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP（传输控制协议）：在IP提供的不可靠数据服务的基础上为应用程序提供了&lt;u&gt;可靠的、面向连接的、全双工的&lt;/u&gt;数据传输服务。&lt;/p&gt;
&lt;p&gt;采用三次握手来确认建立和关闭连接是否成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP（用户数据报协议）：一种&lt;u&gt;不可靠的、无连接的&lt;/u&gt;协议，可以保证应用程序进程间的通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;地址解析协议&#34;&gt;地址解析协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARP（地址解析协议）：将IP地址转换为MAC地址（物理地址）。&lt;/li&gt;
&lt;li&gt;RARP（反地址解析协议）：将MAC地址转换为IP地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态主机配置协议-dhcp&#34;&gt;动态主机配置协议 DHCP&lt;/h2&gt;
&lt;p&gt;DHCP客户端可以从DHCP服务器获得以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本机IP地址&lt;/li&gt;
&lt;li&gt;DNS服务器地址&lt;/li&gt;
&lt;li&gt;DHCP服务器地址&lt;/li&gt;
&lt;li&gt;默认网关的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;无效地址&#34;&gt;无效地址&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows无效地址：169.254.X.X&lt;/p&gt;
&lt;p&gt;169.254.X.X是Windows系统在DHCP信息租用失败时自动给客户机分配的IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux无效地址：0.0.0.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域名和url&#34;&gt;域名和URL&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;主机名.本地名.组名.最高层域名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主机所在的网络级别较高：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;本地名.组名.最高层域名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;URL即统一资源定位器（统一资源定位符）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;协议名://主机名.域名.域名后缀.域名分类/目录/网页文件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ip&#34;&gt;IP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IPv4：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683896541328.png&#34;
	width=&#34;484&#34;
	height=&#34;412&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683896541328_hu1b653364ebbdf1e76eb9cf18be092964_53037_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683896541328_hu1b653364ebbdf1e76eb9cf18be092964_53037_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IPv4各类地址分配方案&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;全&lt;code&gt;0&lt;/code&gt;代表的是网络，全&lt;code&gt;1&lt;/code&gt;代表的是广播。&lt;/p&gt;
&lt;p&gt;IPv4能表示的地址个数为：&lt;/p&gt;
&lt;p&gt;$$
2^{32} \approx 40亿
$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683897195900.png&#34;
	width=&#34;912&#34;
	height=&#34;144&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683897195900_hue345962bd6503581635d067a0b6e714b_38818_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683897195900_hue345962bd6503581635d067a0b6e714b_38818_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IP地址类默认的子网掩码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;633&#34;
		data-flex-basis=&#34;1520px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;**IPv6：**长达128位的地址空间，彻底解决IPv4地址不足的问题。&lt;/p&gt;
&lt;p&gt;IPv6理论上能表示的地址个数：&lt;/p&gt;
&lt;p&gt;$$
2^{128} = 3.4 \times 10^{38}
$$&lt;/p&gt;
&lt;h2 id=&#34;防火墙技术&#34;&gt;防火墙技术&lt;/h2&gt;
&lt;p&gt;防火墙技术是&lt;u&gt;建立在内外网络边界上的过滤封锁机制&lt;/u&gt;，它认为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;内部网络是安全和可信赖的&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;外部网络是不安全和不可信赖的&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;防火墙的作用：&lt;u&gt;防止不希望的、未经授权地进出被保护的内部网络。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;防火墙技术经历了三个发展阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包过滤防火墙&lt;/li&gt;
&lt;li&gt;应用代理网关防火墙&lt;/li&gt;
&lt;li&gt;状态检测技术防火墙&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;入侵检测&#34;&gt;入侵检测&lt;/h2&gt;
&lt;p&gt;入侵检测系统（DS）作为防火墙之后的第二道安全屏障。&lt;/p&gt;
&lt;p&gt;入侵检测系统有效的弥补了防火墙系统对网络上的入侵行为无法识别和检测的不足。&lt;/p&gt;
&lt;p&gt;入侵防御系统（IPS）是在入侵检测系统的基础上发展起来的，不仅能检测到网络中的攻击行为，同时主动对攻击行为发出响应，对攻击进行防御。&lt;/p&gt;
&lt;h2 id=&#34;网络攻击&#34;&gt;网络攻击&lt;/h2&gt;
&lt;p&gt;攻击目标对于攻击者是个黑盒子。&lt;/p&gt;
&lt;p&gt;网络攻击手段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拒绝服务攻击（Dos攻击）：使计算机或网络无法提供正常的服务通过不断向计算机发起请求来实现的。&lt;/li&gt;
&lt;li&gt;重放攻击：攻击者发送一个目的主机已经接受过的报文来达到攻击目的。&lt;/li&gt;
&lt;li&gt;口令入侵攻击。&lt;/li&gt;
&lt;li&gt;特洛伊木马。&lt;/li&gt;
&lt;li&gt;端口欺骗攻击。&lt;/li&gt;
&lt;li&gt;网络监听。&lt;/li&gt;
&lt;li&gt;IP欺骗攻击。&lt;/li&gt;
&lt;li&gt;SQL注入攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;病毒&#34;&gt;病毒&lt;/h2&gt;
&lt;p&gt;病毒类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Worm（蠕虫病毒）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;欢乐时光，&lt;/li&gt;
&lt;li&gt;熊猫烧香，&lt;/li&gt;
&lt;li&gt;红色代码，&lt;/li&gt;
&lt;li&gt;爱虫病毒，&lt;/li&gt;
&lt;li&gt;震网。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trojan（特洛伊木马）：通过内部发起连接与外部主机建立联系，由外部主机控制并盗取用户信息。&lt;/p&gt;
&lt;p&gt;计算机感染特洛伊木马后的典型线型是&lt;u&gt;有未知程序试图建立网络连接&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;常见的木马如冰河。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backdoor（后门病毒）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macro（宏病毒）：&lt;/p&gt;
&lt;p&gt;宏病毒感染的对象主要是&lt;u&gt;文本文档&lt;/u&gt;、&lt;u&gt;电子表格&lt;/u&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;算法设计与分析&#34;&gt;算法设计与分析&lt;/h1&gt;
&lt;p&gt;跳转连接：&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/&#34; &gt;软件设计师——算法设计与分析篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;算法设计方法&#34;&gt;算法设计方法&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;算法设计方法&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;特点&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分治法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ol&gt;&lt;li&gt;将原问题&lt;strong&gt;分解&lt;/strong&gt;成多个&lt;u&gt;与原问题相同的子问题&lt;/u&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;递归地求解&lt;/strong&gt;各子问题&lt;/li&gt;&lt;li&gt;将子问题的解&lt;strong&gt;合并&lt;/strong&gt;成原问题的解&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;原问题规模大且能分解为多个与原问题相同的子问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;归并排序&lt;/li&gt;&lt;li&gt;快速排序&lt;/li&gt;&lt;li&gt;最大字段和问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态规划法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ol&gt;&lt;li&gt;找出并刻画最优解的结构特征&lt;/li&gt;&lt;li&gt;递归地定义最优解的值&lt;/li&gt;&lt;li&gt;自底向上方式计算最优值或构造最优解&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;求解具有某种最优性质的问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;0-1 背包问题&lt;/li&gt;&lt;li&gt;矩阵连乘&lt;/li&gt;&lt;li&gt;最长公共序列（LCS）&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;贪心法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与动态规划类似，但贪心法考虑的是局部最优解&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;并不保证得到全局最优解，但通常能得到近似最优解&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;活动选择问题&lt;/li&gt;&lt;li&gt;背包问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回溯法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在解空间树中，按&lt;u&gt;深度优先策略&lt;/u&gt;，从根结点出发搜索解空间树&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;可以搜索问题的所有解或任一解&lt;/li&gt;&lt;li&gt;适用于求解组合数较大的问题&lt;/li&gt;&lt;li&gt;通过限界函数减少问题的搜索空间&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;0-1背包问题&lt;/li&gt;&lt;li&gt;n皇后问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支限界法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与回溯法类似，在解空间树种按&lt;u&gt;广度优先&lt;/u&gt;或&lt;u&gt;最小耗费&lt;/u&gt;优先方式，搜索满足约束条件的一个解&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;可以给出&lt;u&gt;在某种意义下的最优解&lt;/u&gt;&lt;/li&gt;&lt;li&gt;分为队列式和优先队列式，优先队列式通过最大堆或最小堆实现&lt;/li&gt;&lt;/u&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;0-1 背包问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;算法实例&#34;&gt;算法实例&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/#%e7%ae%97%e6%b3%95%e5%ae%9e%e4%be%8b&#34; &gt;算法设计与分析篇——算法实例&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;查找算法&#34;&gt;查找算法&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/#%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95&#34; &gt;算法设计与分析篇——查找算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查找算法在查找成功时的&lt;u&gt;平均查找长度&lt;/u&gt;关键字和给定值比较次数的期望值：&lt;/p&gt;
&lt;p&gt;$$
ASL = \sum_{i=1}^{n}{P_iC_i}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$P_i$为对表中第$i$个记录进行查找的概率，&lt;/p&gt;
&lt;p&gt;一般认为$P_i=\cfrac{1}{n}, 1 \le i \le n$，即$\sum_{i=1}^{n}{P_i}$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$C_i$为查找成功时，已经进行过比较的关键字个数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态查找表有以下查找方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序查找；&lt;/li&gt;
&lt;li&gt;折半查找；&lt;/li&gt;
&lt;li&gt;分块查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态查找表有以下查找方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉排序树；&lt;/li&gt;
&lt;li&gt;平衡排序树；&lt;/li&gt;
&lt;li&gt;B-树；&lt;/li&gt;
&lt;li&gt;哈希表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;顺序查找&lt;/strong&gt;中，$C_i$取决于所查记录在表中的位置。一般情况下，$C_i = n - i + 1$，在等概率下，顺序查找的平均查找长度为：&lt;/p&gt;
&lt;p&gt;$$
ASL_{ss} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i+1)} = \cfrac{n+1}{2}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;折半查找&lt;/strong&gt;的平均查找长度（假设结点总数为$n=2^h-1$，即折半查找树为深度$h=log_2(n+1)$的满二叉树）：&lt;/p&gt;
&lt;p&gt;$$
ASL_{bs} = \cfrac{1}{n} \sum_{i=1}^{n}{i \times 2^{i-1}} = \cfrac{n+1}{n} log_2{(n+1)} - 1
$$&lt;/p&gt;
&lt;p&gt;当$n$值较大时，$ASL_{bs} \approx log_2{(n+1)} - 1$。&lt;/p&gt;
&lt;h2 id=&#34;哈希函数&#34;&gt;哈希函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;哈希函数构造方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接定址法；&lt;/li&gt;
&lt;li&gt;数字分析法；&lt;/li&gt;
&lt;li&gt;平方取中法；&lt;/li&gt;
&lt;li&gt;折叠法；&lt;/li&gt;
&lt;li&gt;随机数法；&lt;/li&gt;
&lt;li&gt;除留余数法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希函数的构造要考虑到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩性：节省存储空间；&lt;/li&gt;
&lt;li&gt;散列性：尽量减少冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;除留取余数法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$$
f(key)=key \enspace mod \enspace p\quad (p\le m),\ m为散列表长
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冲突处理方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放地址法；&lt;/li&gt;
&lt;li&gt;多重散列法（再哈希法）；&lt;/li&gt;
&lt;li&gt;链地址法；&lt;/li&gt;
&lt;li&gt;公共溢出区法……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开放地址法&lt;/strong&gt;（三种寻找空散列地址的方法）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线性探测法（线性探测再散列）：&lt;/p&gt;
&lt;p&gt;$$
H_i=(H(key)+d) mod m
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$d$取$0,1,2,&amp;hellip;,m-1$；&lt;/li&gt;
&lt;li&gt;$m$为散列表的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$d$初始为0，如果有冲突，那么$d$就通过递增来寻找空的散列地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次探测法（二次探测再散列）：&lt;/p&gt;
&lt;p&gt;$$
H_i=(H(key)+q^2) mod m
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$q$取$0,1,-1,2,-2,&amp;hellip;,\pm k$，$k \le \cfrac{m}{2}$&lt;/li&gt;
&lt;li&gt;$m$为散列表的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;排序算法&#34;&gt;排序算法&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.linner.asia/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/#%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95&#34; &gt;算法设计与分析篇——排序算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;排序算法有稳定排序和不稳定排序两种。假设待排序序列中，$R_i$和$R_j$值相同，且$R_i$领先于$R_j$，排序后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定排序&lt;/strong&gt;：排序后$R_i$和$R_j$相对次序不变，$R_i$任领先于$R_j$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不稳定排序&lt;/strong&gt;：排序后可能出现$R_j$领先于$R_i$的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据记录存储的位置可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内部排序&lt;/strong&gt;：待排序记录存储在内存中进行排序的过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部排序&lt;/strong&gt;：排序记录的数量很大，内存无法容纳全部记录，在排序过程需要对外存进行访问的排序过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;排序算法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;平均时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最坏时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最好时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;空间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;稳定性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;是否归位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;直接插入排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;希尔排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简单选择排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;堆排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冒泡排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;快速排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(log_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;归并排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;是否归位：在排序过程中，能否确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>软考图类汇总篇</title>
        <link>https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/</link>
        <pubDate>Sat, 20 May 2023 13:29:14 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;数据流图dfd&#34;&gt;数据流图（DFD）&lt;/h1&gt;
&lt;p&gt;数据流图是在逻辑上描述系统的功能、输入、输出和数据存储等。&lt;/p&gt;
&lt;p&gt;数据流图中的基本图形元素包括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;基本元素&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;图形表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据流&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182.png&#34;
	width=&#34;193&#34;
	height=&#34;71&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据流&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;652px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加工&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889.png&#34;
	width=&#34;282&#34;
	height=&#34;105&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;加工&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据存储&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926.png&#34;
	width=&#34;350&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据存储&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;443&#34;
		data-flex-basis=&#34;1063px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外部实体&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893.png&#34;
	width=&#34;118&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;外部实体&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;软件系统内部的&lt;strong&gt;数据处理模型&lt;/strong&gt;，使用&lt;u&gt;数据流&lt;/u&gt;、&lt;u&gt;加工&lt;/u&gt;和&lt;u&gt;数据存储&lt;/u&gt;构建。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据流&lt;/strong&gt;（Data Flow）：由一组固定成分的数据组成，表示数据的流向。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182.png&#34;
	width=&#34;193&#34;
	height=&#34;71&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据流&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;652px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在DFD种，数据流的流向由以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;u&gt;加工&lt;/u&gt;流向另一个&lt;u&gt;加工&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;加工&lt;/u&gt;流向&lt;u&gt;数据存储&lt;/u&gt;（写）；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;数据存储&lt;/u&gt;流向&lt;u&gt;加工&lt;/u&gt;（读）；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;外部实体&lt;/u&gt;流向&lt;u&gt;加工&lt;/u&gt;（输入）；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;加工&lt;/u&gt;流向&lt;u&gt;外部实体&lt;/u&gt;（输出）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即数据流的&lt;u&gt;起点或终点必须至少有一个是加工&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;除了与数据存储有关的数据流（流向数据存储或从数据存储流出），DFD中的每个数据流都必须用一个定义明确的名字表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加工&lt;/strong&gt;（Process）：加工描述了输入数据流到输出数据流之间的变换，也就是&lt;u&gt;输入数据流经过什么处理后变成了输出数据流&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889.png&#34;
	width=&#34;282&#34;
	height=&#34;105&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;加工&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每个加工都有一个名字和编号。&lt;/p&gt;
&lt;p&gt;一个加工可以有多个输入数据流和多个输出数据流，但&lt;u&gt;至少有一个输入数据流和一个输出数据流&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;数据流图中常见的3种错误如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;黑洞&lt;/strong&gt;：加工只有输入，没有输出。&lt;/p&gt;
&lt;p&gt;如下图加工1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;白洞&lt;/strong&gt;：加工只有输出但没有输入。&lt;/p&gt;
&lt;p&gt;如下图加工2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灰洞&lt;/strong&gt;：加工中输入数据不足以产生输出数据。&lt;/p&gt;
&lt;p&gt;有几种可能的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个错误的命名过程；&lt;/li&gt;
&lt;li&gt;错误命名的输入或输出；&lt;/li&gt;
&lt;li&gt;不完全的事实。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图加工3。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683528176745.png&#34;
	width=&#34;793&#34;
	height=&#34;542&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683528176745_hu5869eb4ddb2b6e895b99cd504e3e35d8_119530_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683528176745_hu5869eb4ddb2b6e895b99cd504e3e35d8_119530_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据流图中常见错误&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;351px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据存储&lt;/strong&gt;（Data Store）：存储和提供数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926.png&#34;
	width=&#34;350&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据存储&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;443&#34;
		data-flex-basis=&#34;1063px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每个数据存储都有一个定义明确的名字标识。&lt;/p&gt;
&lt;p&gt;数据存储可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储加工的输出数据：数据流流入数据存储，表示数据的写入操作；&lt;/li&gt;
&lt;li&gt;提供加工的输入数据：数据流从数据存储流出，表示数据的读操作。&lt;/li&gt;
&lt;li&gt;双向箭头的数据流指向数据存储，表示对数据的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFD中的数据存储在具体实现时可以用以下方式实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件系统实现；&lt;/li&gt;
&lt;li&gt;数据库系统实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据存储的存储介质可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘、&lt;/li&gt;
&lt;li&gt;磁带、&lt;/li&gt;
&lt;li&gt;其他存储介质。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部实体&lt;/strong&gt;（External Agent，外部主体）：指&lt;u&gt;存在于软件系统之外的人员、组织、物体或外部系统&lt;/u&gt;，它指出系统所需数据的&lt;u&gt;发源地（源）&lt;/u&gt;和&lt;u&gt;系统所产生的数据的归宿地（宿）&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893.png&#34;
	width=&#34;118&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;外部实体&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人员：学生、老师、员工、主观、医生、客户……&lt;/li&gt;
&lt;li&gt;组织：供应商、采购部门……&lt;/li&gt;
&lt;li&gt;物体：传感器、控制器、单车、车辆……&lt;/li&gt;
&lt;li&gt;外部系统：支付系统、车辆交易系统、库存管理系统、道闸控制系统……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在许多系统中，某个源和某个宿可以是同一个人员、组织、物体或外部系统，此时，在DFD中可以用同一个符号表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当数据流从该符号流出时，表示它是源；&lt;/li&gt;
&lt;li&gt;当数据流流向该符号时，表示它是宿；&lt;/li&gt;
&lt;li&gt;当两者皆有时，表示它既是源又是宿。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部实体表示存在于系统之外的对象，用来帮助用户理解系统数据的来源和去向。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据流图必须确保：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据流的起点或终点必须至少有一个是加工。&lt;/li&gt;
&lt;li&gt;加工至少有一个输入数据流和一个输出数据流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分层数据流图：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;顶层图：描述系统的输入和输出。&lt;/p&gt;
&lt;p&gt;即描述系统从哪些外部实体接受数据流，以及系统发送数据流到哪些外部实体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶层图只有一个加工，即待开发的软件系统。&lt;/li&gt;
&lt;li&gt;顶层图中的数据流就是系统的输入/输出信息。&lt;/li&gt;
&lt;li&gt;顶层图中通常没有数据存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0层图：分解顶层图的加工。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再分解：将DFD中某些比较复杂的加工再次分解成一张DFD子图。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;实体联系图e-r-图erd&#34;&gt;实体联系图（E-R 图，ERD）&lt;/h1&gt;
&lt;p&gt;E-R图有以下几个成分（包含扩充的E-R模型成分）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682508598814.png&#34;
	width=&#34;1035&#34;
	height=&#34;391&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682508598814_hub0bc3034b48557bb84109435ab8e458e_191424_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682508598814_hub0bc3034b48557bb84109435ab8e458e_191424_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;E-R图中的主要构件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;635px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体&lt;/strong&gt;：用&lt;strong&gt;矩形&lt;/strong&gt;表示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弱实体&lt;/strong&gt;：使用&lt;strong&gt;双线矩形框&lt;/strong&gt;表示。将需要依赖其他实体存在的实体。&lt;/p&gt;
&lt;p&gt;实体间的所有（Ownership，拥有）关系代表一个实体对另一些实体具有很强的依赖关系，即一个实体的存在必须以另一个实体为前提。&lt;/p&gt;
&lt;p&gt;例如职工与家属的联系，家属总是属于某职工的（在关系模式中需要依赖职工而存在），所以家属是弱实体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特殊化&lt;/strong&gt;：将一个实体集&lt;u&gt;按照某些特性区分为几个&lt;strong&gt;子实体&lt;/strong&gt;&lt;/u&gt;。这种从普遍到特殊的过程即为特殊化。&lt;/p&gt;
&lt;p&gt;子实体的图形表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684564987147.png&#34;
	width=&#34;256&#34;
	height=&#34;145&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684564987147_huad14f3e1152e9df0e94e04c64131c1cf_1087_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684564987147_huad14f3e1152e9df0e94e04c64131c1cf_1087_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;子实体&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;423px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;子实体由称为子类，它会有一个超类，并且能继承超类的属性，超类的属性是实体集中所有子实体的相同属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;联系&lt;/strong&gt;：用&lt;strong&gt;棱形&lt;/strong&gt;表示，并用无向边分别与有关实体连接起来，同时在无向边标注联系的类型。&lt;/p&gt;
&lt;p&gt;联系的类型有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;两个实体间的联系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$1:1$：一对一联系；&lt;/li&gt;
&lt;li&gt;$1:n$：一对多联系；&lt;/li&gt;
&lt;li&gt;$m:n$：多对多联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个以上实体间的联系：&lt;/p&gt;
&lt;p&gt;例如3个实体间的联系有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$1:1:1$&lt;/li&gt;
&lt;li&gt;$1:1:n$&lt;/li&gt;
&lt;li&gt;$1:m:n$&lt;/li&gt;
&lt;li&gt;$r:m:n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;：用&lt;strong&gt;椭圆形&lt;/strong&gt;表示，并用无向边将其与相应的实体连接起来&lt;/p&gt;
&lt;p&gt;E-R模型中的属性有以下分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单属性：是原子的、不可再分的。&lt;/li&gt;
&lt;li&gt;复合属性：可以细分为更小的部分。&lt;/li&gt;
&lt;li&gt;单值属性：一个属性对应一个值。&lt;/li&gt;
&lt;li&gt;多值属性：一个属性对应一组值。&lt;/li&gt;
&lt;li&gt;NULL属性：实体在某个属性上没有值或属性值未知时，使用NULL值表示。&lt;/li&gt;
&lt;li&gt;派生属性：派生属性可以从其他属性得来（通过运算等方式求出）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概念结构模型合并分-e-r-图&#34;&gt;概念结构模型（合并分 E-R 图）&lt;/h2&gt;
&lt;p&gt;建立概念结构模型的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择局部应用：选择适当层次的数据流图，让这一层的每一部分对应一个局部应用，实现某一项功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逐一设计分E-R图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E-R图合并：&lt;/p&gt;
&lt;p&gt;合并时需要考虑各分E-R图之间的冲突：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性冲突&lt;/strong&gt;：同一属性在不同的分E-R图上的属性类型、取值范围和数据单位等可能会不一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名冲突&lt;/strong&gt;：相同意义的属性在不同的分E-R图上可能会有不同的命名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构冲突&lt;/strong&gt;：同一实体在不同的分E-R图中可能会有不同的属性；同一对象在某一分E-R图中被抽象为实体，而在另一分E-R图中又可能被抽象为属性，反之亦然。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;转换关系模式&#34;&gt;转换关系模式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实体向关系模式的转换：&lt;/p&gt;
&lt;p&gt;将E-R图中的实体逐一转换成为一个关系模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体名：对应关系模式的名称；&lt;/li&gt;
&lt;li&gt;实体的属性：转换成关系模式的属性；&lt;/li&gt;
&lt;li&gt;实体标识符：关系的码（键）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;超类和子类的转换：超类和子类定义为两个关系模式，将超类的主键加到子类中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联系向关系模式的转换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一对一联系的转换：&lt;/p&gt;
&lt;p&gt;有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性包括该联系所关联的两个实体的码及联系的属性，关系的码取自任一方实体的码。&lt;/p&gt;
&lt;p&gt;那么一个一对一联系需要转换成三个关系模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式2（一般使用该方式）：将联系归并到关联的两个实体的任一方，给待归并的一方实体属性集中增加另一方实体的码和该联系的属性即可，归并后的实体码保持不变。&lt;/p&gt;
&lt;p&gt;一个一对一联系仅需转换成两个关系模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682562445900.png&#34;
	width=&#34;304&#34;
	height=&#34;358&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682562445900_hu39b33fe28157809884f3b45df834a34e_28041_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682562445900_hu39b33fe28157809884f3b45df834a34e_28041_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;联系向关系模式的转换示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;84&#34;
		data-flex-basis=&#34;203px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式1：&lt;/p&gt;
&lt;p&gt;厂长（&lt;strong&gt;姓名&lt;/strong&gt;，性别，年龄）&lt;/p&gt;
&lt;p&gt;工厂（&lt;strong&gt;厂号&lt;/strong&gt;，厂名，地点）&lt;/p&gt;
&lt;p&gt;管理（（厂长）&lt;strong&gt;姓名&lt;/strong&gt;，厂号，任期）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;粗体代表该关系模式的码。管理的码可以为姓名或厂号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式2：&lt;/p&gt;
&lt;p&gt;厂长（姓名，性别，年龄）&lt;/p&gt;
&lt;p&gt;工厂（厂号，厂名，地点，（厂长）姓名，任期）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一对多联系的转换：&lt;/p&gt;
&lt;p&gt;两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个实体的码及联系的属性，&lt;u&gt;关系的码是多方实体的码&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;方式2（一般使用该方式）：将联系&lt;u&gt;归并到关联的两个实体的多方&lt;/u&gt;，给待归并的多方实体属性集中增加一方实体的码和该联系的属性即可，归并后的多方实体码保持不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682563544291.png&#34;
	width=&#34;315&#34;
	height=&#34;361&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682563544291_hue1cce8af0395e2bd704f6df0a3e3321e_30915_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682563544291_hue1cce8af0395e2bd704f6df0a3e3321e_30915_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一对多联系转换的例子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;209px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式1:&lt;/p&gt;
&lt;p&gt;仓库（&lt;strong&gt;仓库号&lt;/strong&gt;，地点，面积）&lt;/p&gt;
&lt;p&gt;商品（&lt;strong&gt;货号&lt;/strong&gt;，商品名，价格）&lt;/p&gt;
&lt;p&gt;仓储（&lt;strong&gt;货号&lt;/strong&gt;，仓库号，数量）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式2：&lt;/p&gt;
&lt;p&gt;仓库（&lt;strong&gt;仓库号&lt;/strong&gt;，地点，面积）&lt;/p&gt;
&lt;p&gt;商品（&lt;strong&gt;货号&lt;/strong&gt;，商品名，价格，仓库号，数量）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多对多联系的转换：&lt;/p&gt;
&lt;p&gt;多对多联系只能转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个多方实体的码及联系的属性，关系的码是多方实体的码构成的属性组。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682564018777.png&#34;
	width=&#34;327&#34;
	height=&#34;373&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682564018777_hu8cf40dc2a076405a9cb5ca4646519d5e_36334_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682564018777_hu8cf40dc2a076405a9cb5ca4646519d5e_36334_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;多对多联系转换的示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;转换成：&lt;/p&gt;
&lt;p&gt;学生（&lt;strong&gt;学号&lt;/strong&gt;，姓名，性别，年龄）&lt;/p&gt;
&lt;p&gt;课程（&lt;strong&gt;课程号&lt;/strong&gt;，课程名，学时）&lt;/p&gt;
&lt;p&gt;选修（&lt;strong&gt;（学号，课程号）&lt;/strong&gt;，成绩）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;uml&#34;&gt;UML&lt;/h1&gt;
&lt;p&gt;UML（Unified Modeling Language，统一建模语言）是面向对象软件的标准化建模语言。&lt;/p&gt;
&lt;p&gt;UML中包含3种基本构造块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事物；&lt;/li&gt;
&lt;li&gt;关系；&lt;/li&gt;
&lt;li&gt;图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事物&#34;&gt;事物&lt;/h2&gt;
&lt;p&gt;UML中有4种事物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构事物&lt;/strong&gt;（Structural Thing）：模型的&lt;u&gt;静态部分&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055522161.png&#34;
	width=&#34;708&#34;
	height=&#34;294&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055522161_hu872254ba18803fa50bd84092332d0d27_39442_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055522161_hu872254ba18803fa50bd84092332d0d27_39442_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;结构事物的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;577px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行为事物&lt;/strong&gt;（Behavior Thing）：模型的&lt;u&gt;动态部分&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055712246.png&#34;
	width=&#34;621&#34;
	height=&#34;133&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055712246_hu926c842303194b37bd3d84d241da7490_18166_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055712246_hu926c842303194b37bd3d84d241da7490_18166_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;行为事物的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;466&#34;
		data-flex-basis=&#34;1120px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组事物（Grouping Thing）：模型的&lt;u&gt;组织部分&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释事物（Annotational Thing）：模型的&lt;u&gt;解释部分&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关系&#34;&gt;关系&lt;/h2&gt;
&lt;p&gt;UML中有4种关系，这4种关系是UML模型中可以包含的基本关系事物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖&lt;/strong&gt;（Dependency）：是&lt;u&gt;两个事物间的语义关系，其中一个事物（&lt;strong&gt;独立事物&lt;/strong&gt;）发生变化会影响另一个事物（&lt;strong&gt;依赖事物&lt;/strong&gt;）的语义&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在图形上，把一个依赖画成一条&lt;u&gt;可能有方向的虚线&lt;/u&gt;，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089.png&#34;
	width=&#34;200&#34;
	height=&#34;48&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;依赖的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;依赖有偶然性和临时性，即需要的时候依赖，不需要的时候不依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关联&lt;/strong&gt;（Association）：是一种&lt;u&gt;结构关系&lt;/u&gt;，它描述了一组链，&lt;u&gt;链是对象之间的连接&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;关联使用&lt;u&gt;实线&lt;/u&gt;表示，在关联上可以标注重复度（Multiplicity）和角色（Role）。&lt;/p&gt;
&lt;p&gt;描述了&lt;u&gt;整体和部分&lt;/u&gt;间的结构关系的特殊类型的关联：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;聚集&lt;/strong&gt;（Aggregation，聚合）：&lt;u&gt;部分和整体的生命周期不一致&lt;/u&gt;，整体消失了，部分仍然存在，&lt;u&gt;部分可以脱离整体存在&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;使用一端带&lt;u&gt;空心菱形&lt;/u&gt;的实线表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合&lt;/strong&gt;：&lt;u&gt;部分和整体的生命周期一致&lt;/u&gt;，整体消失了，部分也消失了，&lt;u&gt;部分不可以脱离整体而存在&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;使用一端带&lt;u&gt;实心菱形&lt;/u&gt;的实线表示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153.png&#34;
	width=&#34;408&#34;
	height=&#34;101&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关联和聚集的图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;403&#34;
		data-flex-basis=&#34;969px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;聚合和组合中，带菱形的一端指向整体，另一端指向部分。&lt;/p&gt;
&lt;p&gt;关联的关系强度比依赖的关系强度要强一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单向关联：用&lt;u&gt;带箭头实线&lt;/u&gt;表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多重度：&lt;/p&gt;
&lt;p&gt;进行面向对象设计时，类图中可以展现类之间的关联关系，还可以在类图中图示&lt;u&gt;关联中的数量关系&lt;/u&gt;，即多重度。表示数量关系时，&lt;u&gt;用多重度说明数量或数量范围&lt;/u&gt;，&lt;u&gt;表示有多少个实例（对象）能被连接起来&lt;/u&gt;，即&lt;u&gt;一个类的实例能够与另一个类的多少个实例相关联&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关联类：&lt;/p&gt;
&lt;p&gt;当两个类之间的关联的重复度是多对多时，需要借助额外的属性来帮助表达它们之间的关系，而这个属性就需要定义在一个新的关联类中。关联类记录了这两个类之间的关联信息。关联中这些额外的属性用一条&lt;u&gt;垂直于关联的实线&lt;/u&gt;表示，实线的一段连接接到关联的实线上，另一端指向这些属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化&lt;/strong&gt;（Generalization）：是一种特殊/一般关系，&lt;u&gt;特殊元素（子元素）的对象可替代一般元素（父元素）的对象&lt;/u&gt;。用这种方法，&lt;u&gt;子元素共享了父元素的结构和行为&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在图形上，把一个泛化关系画成一条&lt;u&gt;带有空心箭头的实线&lt;/u&gt;，它指向父元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;泛化的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现&lt;/strong&gt;（Realization）：是&lt;u&gt;类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在图形上，把一个实现关系画成一条&lt;u&gt;带有空心箭头的虚线&lt;/u&gt;，箭头指向模板类，另一端于实现类连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682058026631.png&#34;
	width=&#34;167&#34;
	height=&#34;61&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682058026631_hu09469114d42fa29e39948f21a9a04633_1340_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682058026631_hu09469114d42fa29e39948f21a9a04633_1340_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;实现的图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;273&#34;
		data-flex-basis=&#34;657px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uml图&#34;&gt;UML图&lt;/h2&gt;
&lt;h3 id=&#34;类图&#34;&gt;类图&lt;/h3&gt;
&lt;p&gt;类图（Class Diagram）&lt;u&gt;展现了一组对象、接口、协作和它们之间的关系&lt;/u&gt;。在面向对象系统的建模中&lt;u&gt;最常见的图就是类图&lt;/u&gt;。类图给出&lt;u&gt;系统的静态设计视图&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;类图中通常包括下述内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674.png&#34;
	width=&#34;142&#34;
	height=&#34;139&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674_hucae45be9ae605ee21a469444ed126234_7038_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674_hucae45be9ae605ee21a469444ed126234_7038_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;245px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;类中的方法和属性前面有以下三种修饰符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;修饰符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;public&lt;/code&gt; 公有的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;private&lt;/code&gt; 私有的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;protected&lt;/code&gt; 受保护的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;package&lt;/code&gt; 包的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例如：&lt;/p&gt;
  &lt;table style=&#34;width: 200px; margin: auto;&#34;&gt;
      &lt;tr&gt;&lt;th&gt;Student&lt;/th&gt;&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;p&gt;
          &lt;code&gt;- id&amp;nbsp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;int&lt;/code&gt;
          &lt;br&gt;
          &lt;code&gt;+ name&amp;nbsp;:&amp;nbsp;String&lt;/code&gt;
          &lt;br&gt;
          &lt;code&gt;+ age&amp;nbsp;&amp;nbsp;:&amp;nbsp;int&lt;/code&gt;
      &lt;/p&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;p&gt;
          &lt;code&gt;+ getId()&amp;nbsp;:&amp;nbsp;int&lt;/code&gt;
      &lt;/p&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524.png&#34;
	width=&#34;135&#34;
	height=&#34;74&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;接口的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946.png&#34;
	width=&#34;107&#34;
	height=&#34;67&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;协作的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089.png&#34;
	width=&#34;200&#34;
	height=&#34;48&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;依赖的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153.png&#34;
	width=&#34;408&#34;
	height=&#34;101&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关联图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;403&#34;
		data-flex-basis=&#34;969px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;泛化的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921.png&#34;
	width=&#34;619&#34;
	height=&#34;467&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;对象图&#34;&gt;对象图&lt;/h3&gt;
&lt;p&gt;对象图（Object Diagram）展现了&lt;u&gt;某一时刻一组对象以及它们之间的关系&lt;/u&gt;，&lt;u&gt;描述了在类图中所建立的事物的实例的静态快照&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对象图一般包括对象和链，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263.png&#34;
	width=&#34;713&#34;
	height=&#34;312&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对象图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对象：对象图中的对象包含了类名、对象名和属性。&lt;/p&gt;
&lt;p&gt;其图形化如下：&lt;/p&gt;
&lt;table style=&#34;width: 150px; text-align: center;&#34;&gt;
    &lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        对象名 : 类名
    &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
    &lt;p&gt;
        &lt;code&gt;属性1 = 值1&lt;/code&gt;
        &lt;br&gt;
        &lt;code&gt;属性2 = 值2&lt;/code&gt;
        &lt;br&gt;
        ......
    &lt;/p&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;匿名对象（没有对象名）：&lt;/p&gt;
&lt;table style=&#34;width: 150px;&#34;&gt;
    &lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        : 类名
    &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
    &lt;p&gt;
        &lt;code&gt;属性1 = 值1&lt;/code&gt;
        &lt;br&gt;
        &lt;code&gt;属性2 = 值2&lt;/code&gt;
        &lt;br&gt;
        ......
    &lt;/p&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;和类图一样，对象图给出&lt;u&gt;系统的静态设计视图&lt;/u&gt;或&lt;u&gt;静态进程视图&lt;/u&gt;，但它们是&lt;u&gt;从真实的或原型实例的角度建立的&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&#34;用例图&#34;&gt;用例图&lt;/h3&gt;
&lt;p&gt;用例图（Use Case Diagram）通常包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例：是从&lt;strong&gt;用户角度&lt;/strong&gt;描述&lt;strong&gt;系统的行为&lt;/strong&gt;，它将&lt;strong&gt;系统的一个功能&lt;/strong&gt;描述成一系列的事件，这些事件最终对操作者产生有价值的观测结果。&lt;/p&gt;
&lt;p&gt;用例是一个类，它代表&lt;strong&gt;一类功能&lt;/strong&gt;而不是使用该功能的某一具体实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513.png&#34;
	width=&#34;114&#34;
	height=&#34;73&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者：是与系统交互的&lt;strong&gt;外部实体&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;参与者用一个&lt;u&gt;人形图标&lt;/u&gt;表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例之间的关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;包含关系：用带&lt;code&gt;&amp;lt;&amp;lt;include&amp;gt;&amp;gt;&lt;/code&gt;的虚线箭头表示，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948.png&#34;
	width=&#34;613&#34;
	height=&#34;182&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;包含关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;336&#34;
		data-flex-basis=&#34;808px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展关系：用带&lt;code&gt;&amp;lt;&amp;lt;extend&amp;gt;&amp;gt;&lt;/code&gt;的虚线箭头表示，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547.png&#34;
	width=&#34;607&#34;
	height=&#34;136&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;扩展关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;446&#34;
		data-flex-basis=&#34;1071px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;扩展用例是指，一个用例中，符合某些特定情况才会触发的另一个用例。&lt;/p&gt;
&lt;p&gt;即一个用例执行的时候，可能会发生一些特殊情况或可选情况，这种情况就是这个用例的扩展用例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者和用例之间的关联关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用例与用例以及参与者与参与者之间的泛化关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630.png&#34;
	width=&#34;756&#34;
	height=&#34;382&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;474px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;序列图&#34;&gt;序列图&lt;/h3&gt;
&lt;p&gt;序列图（Sequence Diagram，&lt;strong&gt;顺序图&lt;/strong&gt;）&lt;u&gt;描述了以时间顺序组织的对象之间的交互活动&lt;/u&gt;，&lt;u&gt;强调消息时间顺序&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;序列图的组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把参加交互的对象放在图的上方，沿水平方向排列。&lt;/p&gt;
&lt;p&gt;通常把发起交互的对象放在左边，下级对象依次放在右边。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把这些对象发送和接收的消息，沿垂直方向，按时间顺序从上到下放置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751.png&#34;
	width=&#34;691&#34;
	height=&#34;471&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;序列图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;序列图的组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象：用方框框起来的&lt;code&gt;对象名:类名&lt;/code&gt;，没有属性和方法等成分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对象生命线&lt;/strong&gt;：表示&lt;u&gt;一个对象存在的时间段&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如上图中对象下方垂直的虚线。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象可以在交互过程中创建：生命线从接收到构造型&lt;code&gt;create&lt;/code&gt;消息开始；&lt;/li&gt;
&lt;li&gt;也可以在交互过程中撤销：生命线从接收到构造型&lt;code&gt;destroy&lt;/code&gt;消息结束，并且给出一个大$\times$的标记表明生命线的结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制焦点&lt;/strong&gt;：控制焦点表示&lt;u&gt;一个对象执行一个动作所经历的时间段&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如上图中对象下方的空表矩形条框。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;普通的消息用&lt;u&gt;带箭头的实线&lt;/u&gt;表示。所有消息的箭头都是指向接收对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回消息：用&lt;u&gt;带箭头的虚线&lt;/u&gt;表示。&lt;/li&gt;
&lt;li&gt;同步消息（调用消息）：指消息发送给接收对象后，需要等待接收对象返回后才可进行下一步操作。&lt;/li&gt;
&lt;li&gt;异步消息：指消息发送给接收对象后，无需等待接收对象返回即可进行下一步操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;序列图有两个不同于通信图的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列图有对象生命线；&lt;/li&gt;
&lt;li&gt;序列图有控制焦点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通信图&#34;&gt;通信图&lt;/h3&gt;
&lt;p&gt;&lt;u&gt;通信图&lt;/u&gt;（Communication Diagram，&lt;strong&gt;协作图&lt;/strong&gt;）&lt;u&gt;强调收发消息的对象的结构组织&lt;/u&gt;。通信图&lt;u&gt;强调参加交互的对象的组织&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;通信图的组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将参加交互的&lt;u&gt;对象&lt;/u&gt;作为图的&lt;u&gt;顶点&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;把连接这些对象的&lt;u&gt;链&lt;/u&gt;表示为图的&lt;u&gt;弧&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;用对象发送和接收的&lt;u&gt;消息&lt;/u&gt;来&lt;u&gt;修饰这些链&lt;/u&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645.png&#34;
	width=&#34;719&#34;
	height=&#34;314&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;通信图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通信图有以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象：与序列图一样，是用一个方框框起来的&lt;code&gt;对象名:类名&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路径（链接）：用实线表示，可以在链的末端附上一个路径构造型。&lt;/p&gt;
&lt;p&gt;通常仅需显式地表示以下几种链的路径：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;构造型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;local&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;局部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;parameter&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;global&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;全局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;self&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自身&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不必表示&lt;code&gt;association&lt;/code&gt;（关联）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;序号：用来表示消息的时间顺序。是消息前的一个数字前缀，可使用带小数点的号码表示嵌套消息，嵌套可为任意深度。&lt;/p&gt;
&lt;p&gt;如2表示第2个消息，2.1表示嵌套在消息2中的第1个消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息：沿同一个链可以显示许多消息（可能发自不同方向），并且每个消息都有唯一的序号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信图有两个不同于序列图的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信图有路径；&lt;/li&gt;
&lt;li&gt;通信图有序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;状态图&#34;&gt;状态图&lt;/h3&gt;
&lt;p&gt;状态图（State Diagram，状态转换图）关注&lt;u&gt;系统的动态视图&lt;/u&gt;，&lt;u&gt;强调对象行为的事件顺序&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;状态图由以下组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态&lt;/strong&gt;：指对象的生命周期中某个条件或者状态，是&lt;u&gt;任何可以被观察到的系统行为模式&lt;/u&gt;，&lt;u&gt;一个状态代表系统的一种行为模式&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;状态规定了系统内对事件的响应方式。&lt;/p&gt;
&lt;p&gt;系统对事件的响应：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是&lt;u&gt;做一个（或一系列）动作&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;可以是仅仅&lt;u&gt;改变系统本身的状态&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;可以是&lt;u&gt;即改变状态，又做动作&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态转换图中定义的状态主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;初态&lt;/strong&gt;（初始状态）：用一个&lt;u&gt;实心圆点&lt;/u&gt;表示。一张状态图&lt;u&gt;只能有一个初态&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终态&lt;/strong&gt;（最终状态）：用一个&lt;u&gt;实心圆点外加一个圆圈&lt;/u&gt;表示。一张状态图&lt;u&gt;可以没有终态，也可以有多个&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间状态&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态图中的状态用一个&lt;u&gt;圆角矩形&lt;/u&gt;表示，可以用两条水平横线将其分为上中下3个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上面部分（必须）：状态的名称；&lt;/li&gt;
&lt;li&gt;中间部分（可选）：状态变量的名称和值；&lt;/li&gt;
&lt;li&gt;下面部分（可选）：活动表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;状态还可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合状态：含有子状态的状态，这个状态也称为其子状态的超状态。&lt;/p&gt;
&lt;p&gt;子状态：嵌套在另外一个状态中的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转换&lt;/strong&gt;（迁移）：是两个状态之间的一种关系，表示对象将在源状态中执行一定的动作，并在某个特定事件发生，而且某个特定的警界（监护）条件满足时进入目标状态。&lt;/p&gt;
&lt;p&gt;状态转换用一条&lt;u&gt;带箭头的实线&lt;/u&gt;表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件&lt;/strong&gt;：是在某个特定时刻发生的事情，&lt;u&gt;它是对引起系统做动作或（和）从一个状态转换到另个状态的外界事件的抽象&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;事件触发&lt;/u&gt;状态转换：&lt;u&gt;状态变迁通常是由事件触发的。&lt;/u&gt;状态之间带箭头实线上的事件发生时，状态转换开始（还可称之为状态“点火”或状态被“触发”）。&lt;/p&gt;
&lt;p&gt;这种情况下应在表达状态转换的箭头线上标出触发转换的&lt;u&gt;事件表达式&lt;/u&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;事件说明 [守卫条件] / 动作表达式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件说明的语法为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;事件名 (参数表)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;守卫条件（监护条件）：一个布尔表达式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当且仅当事件发生且守卫条件为真时，状态转换才发生；&lt;/li&gt;
&lt;li&gt;只有守卫条件没有事件说明时，只要守卫条件为真，状态转换就发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动作表达式是一个过程表达式，当状态转换（事件）开始时执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;自动触发&lt;/u&gt;状态转换：如果箭头线上未标明事件，则表示&lt;u&gt;在源状态的内部活动执行完之后自动触发转换&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684587930655.png&#34;
	width=&#34;717&#34;
	height=&#34;135&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684587930655_hub194f1dce76ed4c99298044c9667a40d_7727_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684587930655_hub194f1dce76ed4c99298044c9667a40d_7727_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图中的事件和转换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;531&#34;
		data-flex-basis=&#34;1274px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;活动&lt;/strong&gt;：指状态中的活动表中的活动。&lt;/p&gt;
&lt;p&gt;语法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;事件名 (参数表) /动作表达式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件名：可以是任何事件的名称。&lt;/p&gt;
&lt;p&gt;在活动表中经常使用以下3中标准事件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;事件名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;u&gt;入口动作&lt;/u&gt;，指定&lt;u&gt;进入该状态&lt;/u&gt;的动作，立即执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;u&gt;出口动作&lt;/u&gt;，指定&lt;u&gt;退出该状态&lt;/u&gt;的动作，立即执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;u&gt;内部活动&lt;/u&gt;，指定&lt;u&gt;在该状态下&lt;/u&gt;的动作，占有有限时间，并可中断地工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326.png&#34;
	width=&#34;831&#34;
	height=&#34;431&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当状态图对系统、类或用例的动态方面建模时，通常是对反应型对象建模。&lt;/p&gt;
&lt;h3 id=&#34;活动图&#34;&gt;活动图&lt;/h3&gt;
&lt;p&gt;活动图（Activity Diagram）是一种特殊的状态图，它&lt;u&gt;展现了在系统内从一个活动到另一个活动的流程&lt;/u&gt;。活动图&lt;u&gt;专注于系统的动态视图&lt;/u&gt;，&lt;u&gt;强调对象间的控制流程&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114.png&#34;
	width=&#34;654&#34;
	height=&#34;744&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;活动图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;活动图一般包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;状态：&lt;/p&gt;
&lt;p&gt;活动图的状态也包含初态和终态。其余的状态还可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动作状态：不能被分解，动作不能被中断。&lt;/li&gt;
&lt;li&gt;活动状态：能够被进一步分解，可以被中断，其活动由其它的活动图来表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流（转换）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活动图可以表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支（判断）：分支的流上用&lt;code&gt;[]&lt;/code&gt;标记的是监护表达式；&lt;/li&gt;
&lt;li&gt;（并发）分岔：将一个流分为多个可并发执行的流；&lt;/li&gt;
&lt;li&gt;（并发）汇合：将分岔出去的多个流合并为同一个流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当对一个系统的动态方面建模时，有以下几种使用活动图的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对工作流建模；&lt;/li&gt;
&lt;li&gt;对操作建模；&lt;/li&gt;
&lt;li&gt;对业务的复杂流程建模。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构件图&#34;&gt;构件图&lt;/h3&gt;
&lt;p&gt;构件图（Component Diagram，&lt;strong&gt;组件图&lt;/strong&gt;）展现了&lt;u&gt;一组构件之间的组织和依赖&lt;/u&gt;。构件图&lt;u&gt;专注于系统的静态实现视图&lt;/u&gt;，它&lt;u&gt;与类图相关，通常把构件映射为一个或多个类、接口或协作&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459.png&#34;
	width=&#34;638&#34;
	height=&#34;332&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;构件图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;构件图的成分有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构件：用&lt;u&gt;矩形&lt;/u&gt;表示，在矩形&lt;u&gt;右上方有一个小标记&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;供接口：用一个&lt;u&gt;&lt;strong&gt;圆圈&lt;/strong&gt;和连接到构件上的实线&lt;/u&gt;表示。构件提供接口给其它构件使用。&lt;/li&gt;
&lt;li&gt;需接口：用一个&lt;u&gt;&lt;strong&gt;半圆&lt;/strong&gt;和连接到构件上的实线&lt;/u&gt;表示。构件使用需接口表示需要调用其它构件提供接口。&lt;/li&gt;
&lt;li&gt;依赖：将供接口（圆圈）和虚接口（半圆）连接到一起，表示两个构件通过这个接口相依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署图&#34;&gt;部署图&lt;/h3&gt;
&lt;p&gt;部署图（Deployment Diagram）是用来&lt;u&gt;对面向对象系统的&lt;strong&gt;物理方面&lt;/strong&gt;建模&lt;/u&gt;的方法，展现了运行时处理结点以及其中构件（制品）的配置。部署图&lt;u&gt;对系统的静态部署视图进行建模&lt;/u&gt;，它与构件图相关。&lt;/p&gt;
&lt;p&gt;部署图&lt;u&gt;展现了系统的软件和硬件之间的关系，在实施阶段使用&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388.png&#34;
	width=&#34;491&#34;
	height=&#34;327&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;部署图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;artifact&amp;gt;&amp;gt;&lt;/code&gt;表示制品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;UML图分类：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;UML图&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;静态建模&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;动态建模&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;物理建模&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用例图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构件图（组件图)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;部署图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;序列图（顺序图，时序图）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通信图（协作图）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;活动图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;类图成分总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;图示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674.png&#34;
	width=&#34;142&#34;
	height=&#34;139&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674_hucae45be9ae605ee21a469444ed126234_7038_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674_hucae45be9ae605ee21a469444ed126234_7038_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图中的类的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;245px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524.png&#34;
	width=&#34;135&#34;
	height=&#34;74&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图接口的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;协作&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946.png&#34;
	width=&#34;107&#34;
	height=&#34;67&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;协作的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;依赖&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089.png&#34;
	width=&#34;200&#34;
	height=&#34;48&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;依赖的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;泛化&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;泛化的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;关联&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153.png&#34;
	width=&#34;408&#34;
	height=&#34;101&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关联图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;403&#34;
		data-flex-basis=&#34;969px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用例图成分总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;图示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用例&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513.png&#34;
	width=&#34;114&#34;
	height=&#34;73&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包含关系&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948.png&#34;
	width=&#34;613&#34;
	height=&#34;182&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例之间的包含关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;336&#34;
		data-flex-basis=&#34;808px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;扩展关系&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547.png&#34;
	width=&#34;607&#34;
	height=&#34;136&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例之间的扩展关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;446&#34;
		data-flex-basis=&#34;1071px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;泛化关系&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例与用例以及参与者与参与者之间的泛化关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;交互图中，顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;差异&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;center&gt;序列图&lt;/center&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;center&gt;通信图&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;强调&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;center&gt;消息时间顺序&lt;/center&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;center&gt;收发消息的对象的结构组织&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;不同的特性&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有对象生命线：对象存在的时间段&lt;/li&gt;&lt;li&gt;有控制焦点：对象执行动作所经历的时间段&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有路径：表示对象之间有交互&lt;/li&gt;&lt;li&gt;有序号：表示消息的时间顺序，可嵌套表示&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;活动图是一种特殊的状态图，它们的差异如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同点：状态中都有初态和终态。&lt;/li&gt;
&lt;li&gt;主要差异：
&lt;ul&gt;
&lt;li&gt;活动图的转换称为流；&lt;/li&gt;
&lt;li&gt;活动图有分支、并发分岔和并发汇合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是UML图的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类图&lt;/strong&gt;：展现一组&lt;u&gt;对象（类）&lt;/u&gt;、&lt;u&gt;接口&lt;/u&gt;、&lt;u&gt;协作&lt;/u&gt;和它们之间的&lt;u&gt;关系&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921.png&#34;
	width=&#34;619&#34;
	height=&#34;467&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对象图&lt;/strong&gt;：展现某一时刻的一组&lt;u&gt;对象&lt;/u&gt;以及它们之间的&lt;u&gt;关系&lt;/u&gt;，描述了在类图中所建立事物的实例的静态快照&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263.png&#34;
	width=&#34;713&#34;
	height=&#34;312&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对象图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用例图&lt;/strong&gt;：展现了一组&lt;u&gt;用例&lt;/u&gt;、&lt;u&gt;参与者&lt;/u&gt;以及它们之间的&lt;u&gt;关系（包含、扩展、关联和泛化）&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630.png&#34;
	width=&#34;756&#34;
	height=&#34;382&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;474px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;序列图（顺序图，时序图）&lt;/strong&gt;：描述了以&lt;u&gt;时间顺序&lt;/u&gt;组织的&lt;u&gt;对象&lt;/u&gt;之间的&lt;u&gt;交互活动&lt;/u&gt;，强调&lt;u&gt;消息时间顺序&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751.png&#34;
	width=&#34;691&#34;
	height=&#34;471&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;序列图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通信图（协作图）&lt;/strong&gt;：强调&lt;u&gt;收发消息的对象的结构组织&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645.png&#34;
	width=&#34;719&#34;
	height=&#34;314&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;通信图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态图（状态转换图）&lt;/strong&gt;：展现了一个状态机，强调&lt;u&gt;对象行为的事件顺序&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326.png&#34;
	width=&#34;831&#34;
	height=&#34;431&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;活动图&lt;/strong&gt;：一种特殊的状态图，展现了在&lt;u&gt;系统内从一个活动到另一个活动的流程&lt;/u&gt;，强调&lt;u&gt;对象间的控制流程&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114.png&#34;
	width=&#34;654&#34;
	height=&#34;744&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;活动图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构件图（组件图)&lt;/strong&gt;：展现了一组&lt;u&gt;构件之间的组织和依赖&lt;/u&gt;，将构件映射为类、接口或协作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459.png&#34;
	width=&#34;638&#34;
	height=&#34;332&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;构件图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部署图&lt;/strong&gt;：对物理建模，展现了&lt;u&gt;运行时处理结点以及其中构件（制品）的配置&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388.png&#34;
	width=&#34;491&#34;
	height=&#34;327&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;部署图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件工程&#34;&gt;软件工程&lt;/h1&gt;
&lt;h2 id=&#34;沟通路径&#34;&gt;沟通路径&lt;/h2&gt;
&lt;p&gt;沟通图是指项目中人员或部门之间的沟通用一条无向边连接起来，所构成图即为沟通图。沟通图中的路径称为沟通路径。&lt;/p&gt;
&lt;p&gt;软件项目中沟通路径$m$的计算公式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;沟通图中无主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;沟通图中有主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = n - 1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gantt图&#34;&gt;Gantt图&lt;/h2&gt;
&lt;p&gt;Gantt图：一种&lt;u&gt;简单的水平条形图&lt;/u&gt;，它&lt;u&gt;以日历为基准&lt;/u&gt;描述项目任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;垂直轴：表示&lt;u&gt;多个不同的任务&lt;/u&gt;，每个任务按照左侧任务名称垂直排列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平轴：表示&lt;u&gt;日历时间线&lt;/u&gt;（如时、天、周、月和年等）。&lt;/p&gt;
&lt;p&gt;每个水平条表示一个任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一水平条的&lt;u&gt;起点&lt;/u&gt;：表示该任务的&lt;u&gt;开始时间&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;每一水平条的&lt;u&gt;终点&lt;/u&gt;：表示该任务的&lt;u&gt;结束时间&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;每一水平条的&lt;u&gt;长度&lt;/u&gt;：表示&lt;u&gt;完成该任务的持续时间&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当日历中同一时段存在多个水平条时，表示任务之间的并发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683683731050.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Gantt图示例&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gantt图优点：&lt;/p&gt;
&lt;p&gt;能清晰地描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个任务的开始时间；&lt;/li&gt;
&lt;li&gt;每个任务的结束时间；&lt;/li&gt;
&lt;li&gt;任务的进展情况；&lt;/li&gt;
&lt;li&gt;各个任务之间的并行性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gantt图缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能清晰地反映各任务之间的&lt;u&gt;依赖关系&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;难以确定&lt;u&gt;整个项目的关键所在&lt;/u&gt;，即不能清晰地确定影响进度的&lt;u&gt;关键任务&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;不能反映&lt;u&gt;计划中有潜力的部分&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pert图&#34;&gt;PERT图&lt;/h2&gt;
&lt;p&gt;PERT图是一个&lt;u&gt;有向图&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弧&lt;/strong&gt;：表示&lt;strong&gt;任务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;任务包含以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;完成该任务所需的时间&lt;/u&gt;（任务持续时间）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;松弛时间&lt;/u&gt;（Slack Time）：表示在&lt;u&gt;不影响整个工期的前提下完成该任务有多少机动余地&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即松弛时间指当前任务的工期可以推迟的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空任务：用虚线箭头表示，表示任务间的关系所添加。完成空任务的所需时间为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结点&lt;/strong&gt;：表示&lt;strong&gt;事件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事件是流入结点的任务的结束，或流出结点的任务的开始。事件&lt;u&gt;表示某个时间点&lt;/u&gt;，本身不消耗时间和资源。&lt;/p&gt;
&lt;p&gt;事件包含以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件号。&lt;/li&gt;
&lt;li&gt;出现该事件的&lt;strong&gt;最早时刻&lt;/strong&gt;：表示在此时刻之前从该事件出发的任务不可能开始。&lt;/li&gt;
&lt;li&gt;出现该事件的&lt;strong&gt;最迟时刻&lt;/strong&gt;：表示从该事件出发的任务最迟在此时刻开始，否则整个工程就不能如期完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;只有当流入该结点的所有任务都结束时，结点所表示的事件才出现，流出结点的任务才可以开始。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;特殊的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始事件：没有任何任务流向该事件；&lt;/li&gt;
&lt;li&gt;结束事件：没有任务任务从该事件流出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个项目是从开始事件开始到结束事件结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683684995281.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图示例&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$T(e)$：完成任务$e$的所需时间；&lt;/li&gt;
&lt;li&gt;$T_s(e)$：完成任务$e$的松弛时间；&lt;/li&gt;
&lt;li&gt;$T_e(v)$：事件$v$的最早时刻；&lt;/li&gt;
&lt;li&gt;$T_l(v)$：事件$v$的最迟时刻。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PERT图各成分取值（不一定需要满足下面的关系，但是可以用下面的式子推出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事件$V_{in}$的&lt;u&gt;最早时刻&lt;/u&gt;$T_e(V_{in})$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有一个任务流入时，设该任务的流出事件为$V_{out}$，则该任务为$&amp;lt;V_{out}, V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{in}) = T_e(V_{out}) + T
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将$T(&amp;lt;V_{out}, V_{in}&amp;gt;)$简写为了$T$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：&lt;u&gt;该流入任务的流出事件的最早时刻&lt;/u&gt; + &lt;u&gt;完成该流入任务的所需时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个任务流入时，设与每个任务相对应的流出事件为$V_{out}[ \ i \ ]$，则这些任务为$&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{in}) = Max(T_e(V_{out}[ \ i \ ]) + T_i)
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将$T(&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;)$简写为了$T_i$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即&lt;u&gt;流入该事件的每个任务计算出的最早时刻的最大值&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始事件$V_{start}$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{start}) = 0
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件$V_{out}$的&lt;u&gt;最迟时刻&lt;/u&gt;$T_l(V_{out})$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有一个任务流出时，设该任务的流入事件为$V_{in}$，则该任务为$&amp;lt;V_{out}, V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = T_l(V_{in}) - (T + T_s)
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将$T_s(&amp;lt;V_{out}, V_{in}&amp;gt;)$简写为$T_s$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：&lt;u&gt;该流出任务的流入事件的最迟时刻&lt;/u&gt; -（&lt;u&gt;该流出任务的所需时间&lt;/u&gt; + &lt;u&gt;松弛时间&lt;/u&gt;）。&lt;/p&gt;
&lt;p&gt;如果松弛时间未知或为0：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = T_l(V_{in}) - T
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个任务流出时，设与每个任务相对应的流入事件为$V_{in}[ \ i \ ]$，则这些任务为$&amp;lt;V_{out}, V_{in}[ \ i \ ]&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - (T_i + S_i))
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里把$T(&amp;lt;V_{out}, V_{in}[ \ i \ ]&amp;gt;)$简写为$T_i$，把$T_s(&amp;lt;V_{out}, V_{in}[ \ i \ ]&amp;gt;)$简写为$S_i$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即&lt;u&gt;流出该事件的每个任务计算出的最晚时刻的最大值&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如果松弛时间未知或为0：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - T_i)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结束事件$V_{end}$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{end}) = T_e(V_{end})
$$&lt;/p&gt;
&lt;p&gt;即&lt;u&gt;结束事件的最早时刻与最迟时刻相等&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设某任务的流入事件为$V_{in}$，流出事件为$V_{out}$，则该任务$&amp;lt;V_{out}, V_{in}&amp;gt;$的&lt;u&gt;松弛时间&lt;/u&gt;$T_s(&amp;lt;V_{out}, V_{in}&amp;gt;)$。&lt;/p&gt;
&lt;p&gt;$$
T_s = T_l(V_{in}) - T - T_e(V_{out})
$$&lt;/p&gt;
&lt;p&gt;即，该任务的流入事件的最迟时刻 - 该任务的所需时间 - 该任务的流出事件的最早时刻&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683719224977.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图公式参照图&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;PERT图的路径：从开始事件到结束事件的一条通路。&lt;/p&gt;
&lt;p&gt;PERT图的&lt;strong&gt;关键路径&lt;/strong&gt;：指&lt;u&gt;所有的任务的松弛时间都为0的路径&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;关键路径的长度：指结束事件的最早（或最晚）时刻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/uTools_1683706944555.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图的关键路径示例&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;关键路径的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有任务的松弛时间都为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个事件的最早时刻和最迟时刻都是相等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有任务持续时间的和，是PERT图所有路径中最大的，并且与结束事件的最早时刻（或最晚时刻）相等。&lt;/p&gt;
&lt;p&gt;设关键路径中所有事件为$V_i$（$i = 1, 2, \cdots, n$），且该路径下的任务为$&amp;lt;V_j, V_{j+1}&amp;gt;$（$1 \le j \le n-1$）（表示$V_1$是开始事件，$V_2$是$V_1$往下的一个事件，以此类推，$V_n$是结束事件），那么该关键路径结束事件的最早时刻（或最晚时刻）为：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_n) = \sum_{i = 1}^{n-1} T_i
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里$T_i$代表$T(&amp;lt;V_i, V_{i+1}&amp;gt;)$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最迟时刻的另一种求法（PERT图存在关键路径的情况下）：&lt;/p&gt;
&lt;p&gt;已知某PERT图结束事件的最晚时刻（最早时刻），该PERT图中某一条路径（假设该路径没有分支）中所有事件为$V_j$（$j = 1, 2, \cdots, n$），且该路径下的任务为$&amp;lt;V_k, V_{k+1}&amp;gt;$（$1 \le k \le n-1$），该路径下任务的持续时间$T(&amp;lt;V_{k-1}, V_k&amp;gt;)$已知，（即$V_1$是开始事件，按照次序往下，$V_n$是结束事件），计算某一事件的最迟时刻$T_l(V_i)$（$1 \le i &amp;lt; n$）：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_i) = T_l(V_n) - \sum_{j = i}^{n - 1} T_j
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里$T_j$代表$T(&amp;lt;V_j, V_{j + 1}&amp;gt;)$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：&lt;u&gt;结束事件的最晚时刻&lt;/u&gt; - &lt;u&gt;该事件到结束事件之间所有的任务的持续时间总和&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果事件$V_i$到结束事件之间存在多条路径，应该选择那条任务持续时间总和最大的路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PERT图的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出了每个任务的开始时间、结束时间和完成该任务所需的时间；&lt;/li&gt;
&lt;li&gt;给出了任务之间的关系（依赖关系）。即任务之间的执行顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PERT图不能清晰地描述任务之间的并行情况。&lt;/p&gt;
&lt;h2 id=&#34;项目活动图&#34;&gt;项目活动图&lt;/h2&gt;
&lt;p&gt;项目活动图是一种有向图（与PERT图十分类似）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;弧：表示活动。弧的权值表示活动的持续时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顶点：表示项目里程碑。&lt;/p&gt;
&lt;p&gt;特殊的里程碑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始里程碑：没有任何活动指向该里程碑；&lt;/li&gt;
&lt;li&gt;结束里程碑：没有任何活动从该里程碑指出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目活动图的关键路径：按照PERT图的方法求出松弛时间为0的、从开始里程碑到结束里程碑的路径。&lt;/p&gt;
&lt;p&gt;关键路径的长度：为结束里程碑的最早时刻（或最晚时刻）。它可以用来表示项目完成的最少时间。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>算法设计与分析篇</title>
        <link>https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/</link>
        <pubDate>Wed, 17 May 2023 12:52:42 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;算法概述&#34;&gt;算法概述&lt;/h1&gt;
&lt;p&gt;算法（Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中每一条指令表示一个或多个操作。算法具有下列5个重要特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有穷性&lt;/strong&gt;：一个算法必须总是（对任何合法的输入值）在&lt;u&gt;执行有穷步之后结束&lt;/u&gt;，且&lt;u&gt;每一步都可在有穷时间内完成&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定性&lt;/strong&gt;：算法中的&lt;u&gt;每一条指令必须有确切的含义&lt;/u&gt;，理解时&lt;u&gt;不会产生二义性&lt;/u&gt;。并且在任何条件下，算法只有唯一的一条执行路径，即对于&lt;u&gt;相同的输入只能得出相同的输出&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可行性&lt;/strong&gt;：一个算法是可行的，即算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入&lt;/strong&gt;：一个算法有&lt;u&gt;零个或多个输入&lt;/u&gt;，这些输入取自于某个特定的对象的集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出&lt;/strong&gt;：一个算法有&lt;u&gt;一个或多个输出&lt;/u&gt;，这些输出是同输入有着某些特定关系的量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的表示算法的方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自然语言&lt;/strong&gt;：优点是易理解；缺点是易出现二义性，算法通常很冗长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流程图&lt;/strong&gt;：优点是直观易懂；缺点是严密性不如程序设计语言，灵活性不如自然语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序设计语言&lt;/strong&gt;：优点是能用计算机直接执行；缺点是抽象性差，使算法设计者拘泥于描述算法的具体细节，忽略了“好”算法和正确逻辑的重要性，要求算法设计者掌握程序设计语言及编程技巧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;伪代码&lt;/strong&gt;：伪代码是介于自然语言和程序设计语言之间的方法，它采用某一程序设计语言的基本语法，同时结合自然语言来表达。&lt;/p&gt;
&lt;p&gt;计算机科学家从来没有对伪代码的书写形式达成过共识。&lt;/p&gt;
&lt;p&gt;在伪代码中，可以采用最具表达力的、最简明扼要的方法来表达一个给定的算法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;算法分析&#34;&gt;算法分析&lt;/h1&gt;
&lt;h2 id=&#34;复杂度&#34;&gt;复杂度&lt;/h2&gt;
&lt;p&gt;由于时间复杂度与空间复杂度分别对算法占用的时间和空间资源进行分析，计算方法相似。&lt;/p&gt;
&lt;p&gt;算法的时间复杂度分析主要时分析算法的运行时间，即算法执行所需要的基本操作数。算法时间复杂度以算法中基本操附重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，只要大致计算出相应的数量级即可。&lt;/p&gt;
&lt;p&gt;算法的复杂度通常是用大O表示法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法规则：多项相加，保留最高阶项，并将系数化为1；&lt;/li&gt;
&lt;li&gt;乘法规则：多项相乘都保留，并将系数化为1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/1681099842666.png&#34;
	width=&#34;1014&#34;
	height=&#34;100&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/1681099842666_hu8fb0d0a3c83abecf36c375990db2efe0_51379_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/1681099842666_hu8fb0d0a3c83abecf36c375990db2efe0_51379_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;算法复杂度大小比较&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1014&#34;
		data-flex-basis=&#34;2433px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;递归式的时间（空间）复杂度：&lt;/p&gt;
&lt;p&gt;$$
递归的次数 \times 每次递归的时间（空间）复杂度
$$&lt;/p&gt;
&lt;h2 id=&#34;渐进符号&#34;&gt;渐进符号&lt;/h2&gt;
&lt;p&gt;可以用渐进符号来表示渐进复杂度。&lt;/p&gt;
&lt;p&gt;渐进符号包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$O$：算法运行时间的渐进上界。&lt;/p&gt;
&lt;p&gt;给定一个函数$g(n)$，$O\big( g(n)  \big) = \{ f(n):\exists 正常数c和n_0, 使得\forall n \ge n_0, 有 0 \le f(n) \le cg(n) \}$。&lt;/p&gt;
&lt;p&gt;即，当$n \ge n_0$时，$f(n) \le c \cdot g(n) $。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Omega$：算法运行时间的渐进下界。&lt;/p&gt;
&lt;p&gt;给定一个函数$g(n) $，$O\big( g(n) \big) = \{ f(n):\exists 正常数c和n_0,使得\forall n \ge n_0, 有 0 \le cg(n) \le f(n) \}$。&lt;/p&gt;
&lt;p&gt;即，当$n \ge n_0$时，$c \cdot g(n) \le f(n)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Theta$：算法运行时间的渐进上界和渐进下界，即渐进紧致界（又叫紧缺界）。&lt;/p&gt;
&lt;p&gt;给定一个函数$g(n)$，$O\big( g(n) \big) = \{ f(n):\exists 正常数c_1、c_2和n_0,使得\forall n \ge n_0, 有 0 \le c_1g(n) \le f(n) \le c_2g(n) \}$。&lt;/p&gt;
&lt;p&gt;即，当$n \ge n_0$时，$c_1g(n) \le f(n) \le c_2g(n)$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1681110832416.png&#34;
	width=&#34;966&#34;
	height=&#34;1204&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1681110832416_hud8e84328d379d2eda520e5c710188239_380512_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1681110832416_hud8e84328d379d2eda520e5c710188239_380512_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;递归式主方法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;192px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;算法设计方法&#34;&gt;算法设计方法&lt;/h1&gt;
&lt;h2 id=&#34;分治法&#34;&gt;分治法&lt;/h2&gt;
&lt;p&gt;任何一个可以用计算机求解的问题所需要的计算时间都与其规模有关。要想直接解决一个较大的问题，有时是相当困难的。问题的规模越小，解题所需要的计算时间往往越少，从而较容易处理。分治法的设计思想是&lt;u&gt;将一个难以直接解决的大问题分解成一些规模较小的相同问题，以便各个击破，分而治之&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如果规模为$n$的问题可分解成$k$个子问题（$1 &amp;lt; k \le n $），这些子问题互相独立且与原问题相同。分治法产生的子问题往往是原问题的较小模式。&lt;/p&gt;
&lt;p&gt;一般来说，分治算法在每一层递归上都有3个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分解&lt;/strong&gt;：将原问题分解成一系列子问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;求解&lt;/strong&gt;：递归地求解各子问题。&lt;/p&gt;
&lt;p&gt;若子问题足够小，则直接求解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;合并&lt;/strong&gt;：将子问题的解合并成原问题的解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分治的典型实例有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;归并排序；&lt;/li&gt;
&lt;li&gt;快速排序；&lt;/li&gt;
&lt;li&gt;最大子段和问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;递归&#34;&gt;递归&lt;/h3&gt;
&lt;p&gt;递归是指子程序（或函数）直接调用自己或通过一系列调用语句间接调用自己，是一种描述问题和解决问题的常用方法。还有一些问题，虽然其本身并没有明显的递归结构，但用递归技术来求解使设计出的算法简洁易懂且易于分析。&lt;/p&gt;
&lt;p&gt;递归有两个基本要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边界条件（递归出口）：确定递归到何时终止。&lt;/li&gt;
&lt;li&gt;递归模式（递归体）：大问题是如何分解为小问题的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;递归可以将大规模的问题分解为若干个小规模的问题，然后先解决小规模问题，再将解决完的小规模问题合并再一起，再次进行处理，最后解决完所有问题。这与分治的思想不谋而合。&lt;/p&gt;
&lt;p&gt;递归是分治的一个解决方案，而分治并不一定需要通过递归实现。分治还可以通过循环结构实现。&lt;/p&gt;
&lt;h2 id=&#34;动态规划法&#34;&gt;动态规划法&lt;/h2&gt;
&lt;p&gt;动态规划算法与分治法类似，其基本思想也是&lt;u&gt;将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;与分治法不同的是，适合用动态规划法求解的问题，&lt;u&gt;经分解得到的子问题往往不是独立的&lt;/u&gt;。不同子问题的数目常常只有多项式量级，可以&lt;u&gt;用一个表来记录所有己解决的子问题的答案，在需要时再找出己求得的答案&lt;/u&gt;，这样就可以避免大量的重复计算，从而得到多项式时间的算法。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。&lt;/p&gt;
&lt;p&gt;动态规划算法通常&lt;u&gt;用于求解具有某种最优性质的问题&lt;/u&gt;。在这类问题中，可能会有许多可行解，每个解都对应于一个值。而最优解可能会有多个，动态规划算法能找出其中的一个最优解。设计一个动态规划算法，通常按照以下几个步骤进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;找出最优解的性质，并刻画其结构特征。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归地定义最优解的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以自底向上的方式计算出最优值。&lt;/p&gt;
&lt;p&gt;到此步骤为止的以上步骤（包括此步骤），是动态规划算法的基本步骤。&lt;/p&gt;
&lt;p&gt;如果需要给出最优解，通常需要在此步骤中记录更多的信息，以便在步骤4中根据所记录的信息快速构造出一个最优解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据计算最优值时得到的信息，构造一个最优解。&lt;/p&gt;
&lt;p&gt;在只需要求出最优值的情形下，该步骤可省略；若需要求出问题的一个最优解，该步骤必须执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于一个给定的问题，若其具有以下两个性质，可以考虑用动态规划法来求解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最优子结构&lt;/strong&gt;：如果一个问题的最优解中包含了其子问题的最优解，就说该问题具有最优子结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个问题具有最优子结构时，提示我们动态规划法可能会适用，但是此时贪心策略可能也是适用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重叠子问题&lt;/strong&gt;：指用来解原问题的递归算法可反复地解同样的子问题，而不是总在产生新的子问题。&lt;/p&gt;
&lt;p&gt;即当一个递归算法不断地调用同一个问题时，就说该问题包含重叠子问题。&lt;/p&gt;
&lt;p&gt;此时若用分治法递归求解，则每次遇到子问题都会视为新问题，会极大地降低算法的效率，而动态规划法总是充分利用重叠子问题，对每个子问题仅计算一次，把解保存在一个在需要时就可以查看的表中，而每次查表的时间为常数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态规划的经典问题：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;空间复杂度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0-1 背包问题&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nW)$，$W$为背包容量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nW)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;矩阵连乘&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^3)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;最长公共序列（LCS）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;矩阵连乘：&lt;/p&gt;
&lt;p&gt;两个矩阵$A_{(m \cdot n)}$和$B_{(n \cdot p)}$相乘的次数为：$m \cdot n \cdot p$，相乘后得到的新矩阵为：$(A \cdot B)_{(m \cdot p)}$。&lt;/p&gt;
&lt;h2 id=&#34;贪心法&#34;&gt;贪心法&lt;/h2&gt;
&lt;p&gt;和动态规划一样，贪心法也经常&lt;u&gt;用于解决最优化问题&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;与动态规划法不同的是，贪心法在解决问题的策略上是仅根据当前己有的信息做出选择，而且一旦做出了选择，不管将来有什么结果，这个选择都不会改变。换而言之，贪心法并&lt;u&gt;不是从整体最优考虑&lt;/u&gt;，它所&lt;u&gt;做出的选择只是在某种意义上的局部最优&lt;/u&gt;。&lt;u&gt;这种局部最优选择并不能保证总能获得全局最优解，但通常能得到较好的近似最优解。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;例如，平时购物找钱时，为使找回的零钱的硬币数最少，从最大面值的币种开始，按递减的顺序考虑各币种，先尽量用大面值的币种，当不足大面值币种的金额时才去考虑下一种较小面值的币种，这就是在采用贪心法。这种方法在这里总是最优，是因为银行对其发行的硬币种类和硬币面值的巧妙安排。如果只有面值分别为1、5和11单位的硬币，而希望找回总额为15单位的硬币，按贪心算法，应找1个11单位面值的硬币和4个1单位面值的硬币，共找回5个硬币。但最优的解答应是3个5单位面值的硬币。&lt;/p&gt;
&lt;p&gt;贪心法的典型实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动选择问题&lt;/li&gt;
&lt;li&gt;背包问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回溯法&#34;&gt;回溯法&lt;/h2&gt;
&lt;p&gt;回溯法有“通用的解题法”之称，用它&lt;u&gt;可以系统地搜索一个问题的所有解或任一解&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;回溯法是一个既带有系统性又带有跳跃性的搜索算法。它在包含问题的所有解的解空间树中，按照深度优先的策略，从根结点出发搜索解空间树。算法搜索至解空间树的任一结点时，总是先判断该结点是否肯定不包含问题的解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果肯定不包含：跳过对以该结点为根的子树的系统搜索，逐层向其祖先结点回溯；&lt;/li&gt;
&lt;li&gt;否则：进入该子树，继续按深度优先的策略进行搜索。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用回溯法求解问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来求问题的所有解时，要回溯到根，且根结点的所有子树都已被搜索遍才结束；&lt;/li&gt;
&lt;li&gt;用来求问题的任一解时，只要搜索到问题的一个解就可以结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回溯法适用于解一些组合数较大的问题。&lt;/p&gt;
&lt;p&gt;回溯法经典实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0-1 背包问题&lt;/li&gt;
&lt;li&gt;n 皇后问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解空间&#34;&gt;解空间&lt;/h3&gt;
&lt;p&gt;应用回溯法解问题时，首先应明确定义问题的解空间。问题的解空间应至少包含问题的一个（最优）解。&lt;/p&gt;
&lt;p&gt;通常将解空间表示为树或图的形式。&lt;/p&gt;
&lt;h3 id=&#34;基本思想&#34;&gt;基本思想&lt;/h3&gt;
&lt;p&gt;确定解空间的组织结构后，回溯法从开始结点（根结点）出发，以深度优先的方式搜索整个解空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始时根结点成为一个活结点（有多个活结点），同时也成为当前的扩展结点（只能有一个扩展结点）。&lt;/li&gt;
&lt;li&gt;在当前的扩展结点处，搜索向纵深方向移至一个新结点。这个新结点就成为一个新的活结点，并成为当前扩展结点。&lt;/li&gt;
&lt;li&gt;如果在当前扩展结点处不能再向纵深方向移动，则当前的扩展结点就成为死结点。此时，应往回移动（回溯）至最近的一个活结点处，并使这个活结点成为当前的扩展结点。&lt;/li&gt;
&lt;li&gt;回溯法即以这种工作方式递归地在解空间中搜索，直到找到所要求的解或解空间中己无活结点时为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运用回溯法解题通常包含以下3个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对所给问题，定义问题的解空间。&lt;/li&gt;
&lt;li&gt;确定易于搜索的解空间结构。&lt;/li&gt;
&lt;li&gt;以深度优先的方式搜索解空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;限界函数&#34;&gt;限界函数&lt;/h3&gt;
&lt;p&gt;限界函数的设计是回溯法的核心问题，也是难题。问题的解空间往往很大，为了有效地进行搜索，需要在搜索的过程中对某些结点进行剪枝，而对哪些结点进行剪枝，需要设计限界函数来判断。&lt;/p&gt;
&lt;p&gt;设计限界函数的通用的指导原则是尽可能多和尽可能早地“杀掉”不可能产生最优解的活结点。好的限界函数可以大大减少问题的搜索空间，从而大大提高算法的效率。&lt;/p&gt;
&lt;h2 id=&#34;分支限界法&#34;&gt;分支限界法&lt;/h2&gt;
&lt;p&gt;分支限界法类似于回溯法，也是一种&lt;u&gt;在问题的解空间树$T$上搜索问题解&lt;/u&gt;的算法。在一般情况下，分支限界法的求解目标是&lt;u&gt;找出满足约束条件的一个解&lt;/u&gt;，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即&lt;u&gt;在某种意义下的最优解&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;分支限界法以&lt;u&gt;广度优先&lt;/u&gt;或以&lt;u&gt;最小耗费优先&lt;/u&gt;的方式&lt;u&gt;搜索解空间树$T$&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;分支限界法的搜索策略是：每一个活结点只有一次机会成为扩展结点。&lt;/p&gt;
&lt;p&gt;活结点一旦成为扩展结点，就一次性产生其所有子结点。在这些子结点中，那些导致不可行解或非最优解的子结点被舍弃，其余子结点被加入活结点表中。此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所需的解或活结点表为空时为止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前己有许多利用分支限界法解决大量离散最优化的实际问题的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与回溯法相似，限界函数的设计是分支限界法的一个核心问题和难题。如何设计限界函数来有效地减小搜索空间是应用分支限界法要考虑的问题。&lt;/p&gt;
&lt;p&gt;根据从活结点表中选择下一扩展结点的不同方式，可将分支限界法分为几种不同的类型。最常用的有以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;队列式（FIFO，先进先出）分支限界法：将活结点表组织成一个队列，并按队列的先进先出原则选择下一个结点作为扩展结点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先队列式分支限界法：将活结点表组织成一个优先队列，并按优先队列中规定的结点优先级选取优先级最高的下一个结点作为扩展结点。&lt;/p&gt;
&lt;p&gt;结点优先级：通常用一个与该结点相关的数值$p$来表示，规定$p$值较大的结点优先级较高。&lt;/p&gt;
&lt;p&gt;在算法实现时，有两种实现方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常用一个最大堆（根结点比左右子结点大）来实现最大优先队列，用最大堆的Deletemax操作（删除最大堆顶）抽取堆中下一个结点成为当前扩展结点。&lt;/li&gt;
&lt;li&gt;最小优先队列规定$p$值较小的结点优先级较高。通常用一个最小堆根结点比左右子结点小）来实现最小优先队列，用最小堆的Deletemin操作（删除最小堆顶）抽取堆中下一个结点成为当前扩展结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分支限界法经典实例：0-1 背包问题。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;算法设计方法&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;特点&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分治法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ol&gt;&lt;li&gt;将原问题&lt;strong&gt;分解&lt;/strong&gt;成多个&lt;u&gt;与原问题相同的子问题&lt;/u&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;递归地求解&lt;/strong&gt;各子问题&lt;/li&gt;&lt;li&gt;将子问题的解&lt;strong&gt;合并&lt;/strong&gt;成原问题的解&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;原问题规模大且能分解为多个与原问题相同的子问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;归并排序&lt;/li&gt;&lt;li&gt;快速排序&lt;/li&gt;&lt;li&gt;最大字段和问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态规划法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ol&gt;&lt;li&gt;找出并刻画最优解的结构特征&lt;/li&gt;&lt;li&gt;递归地定义最优解的值&lt;/li&gt;&lt;li&gt;自底向上方式计算最优值或构造最优解&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;求解具有某种最优性质的问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;0-1 背包问题&lt;/li&gt;&lt;li&gt;矩阵连乘&lt;/li&gt;&lt;li&gt;最长公共序列（LCS）&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;贪心法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与动态规划类似，但贪心法考虑的是局部最优解&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;并不保证得到全局最优解，但通常能得到近似最优解&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;活动选择问题&lt;/li&gt;&lt;li&gt;背包问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回溯法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在解空间树中，按&lt;u&gt;深度优先策略&lt;/u&gt;，从根结点出发搜索解空间树&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;可以搜索问题的所有解或任一解&lt;/li&gt;&lt;li&gt;适用于求解组合数较大的问题&lt;/li&gt;&lt;li&gt;通过限界函数减少问题的搜索空间&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;0-1背包问题&lt;/li&gt;&lt;li&gt;n皇后问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支限界法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与回溯法类似，在解空间树种按&lt;u&gt;广度优先&lt;/u&gt;或&lt;u&gt;最小耗费&lt;/u&gt;优先方式，搜索满足约束条件的一个解&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;可以给出&lt;u&gt;在某种意义下的最优解&lt;/u&gt;&lt;/li&gt;&lt;li&gt;分为队列式和优先队列式，优先队列式通过最大堆或最小堆实现&lt;/li&gt;&lt;/u&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;0-1 背包问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;算法实例&#34;&gt;算法实例&lt;/h1&gt;
&lt;h2 id=&#34;最大子段和问题&#34;&gt;最大子段和问题&lt;/h2&gt;
&lt;p&gt;给定$n$个整数$a_1, a_2, \cdots, a_n$（可能有负数），求该序列形如$\sum\limits_{k=i}^{j} a_k$的子段和的最大值。当序列中所有整数均为负数时，其最大子段和为$0$。即所求最大值为：&lt;/p&gt;
&lt;p&gt;$$
max \left\{
0,
\mathop{max}\limits_{1 \le i \le j \le n}
\sum_{k=i}^{j} a_k
\right\}
$$&lt;/p&gt;
&lt;p&gt;给定序列$A[1 \dots n]$，采用分治策略解决问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分解：将$A[1 \dots n]$分解为长度大致相等的两段$A\left[1 \dots {n}/{2}\right]$和$A\left[ {n}/{2}+1 \dots n \right]$，分别求出这两段的最大子段和。&lt;/p&gt;
&lt;p&gt;最大字段和有3中情形：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$A[1 \dots n]$与$A\left[1 \dots {n}/{2}\right]$（左边那段）的最大子段和相同。&lt;/li&gt;
&lt;li&gt;$A[1 \dots n]$与$A\left[ {n}/{2}+1 \dots n \right]$（右边那段）的最大子段和相同。&lt;/li&gt;
&lt;li&gt;$A[1 \dots n]$的最大子段和为$\sum\limits_{k=i}^{j} a_k$，且$1 \le i \le n/2$，$n/2+1 \le j \le n$（横跨两个子段）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;情形1和2：再将子段进行分解，按照以上3种情形递归地计算子段的最大子段和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;情形3：$A\left[1 \dots {n}/{2} \right]$和$A\left[ {n}/{2}+1 \dots n \right]$都包含了最优子段的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在$A\left[1 \dots {n}/{2}\right]$中计算出：&lt;/p&gt;
&lt;p&gt;$$
s_1 =
\mathop{max}\limits_{1 \le i \le \frac{n}{2}}
\left(\sum_{k=i}^{\frac{n}{2}} A[ \ k \ ]\right)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在$A\left[ {n}/{2}+1 \dots n \right]$中计算出：&lt;/p&gt;
&lt;p&gt;$$
s_2 =
\mathop{max}\limits_{ \frac{n}{2}+1 \le j \le n }
\left(\sum\limits_{k=\frac{n}{2}+1}^{j} A[ \ k \ ]\right)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$s_1 + s_2$即为情形3的最优值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合并：取分解阶段3种情况下最大子段和中最大值为原问题的解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以上3个步骤需要递归地进行，实际情况是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将$A[1 \dots n]$分解为由单个元素组成的$n$个子序列$\{ [a_1], [a_2], \cdots, [a_n] \}$，这$n$个子序列的最大子段和即为其唯一一个元素的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自底向上，先分别将相邻的两个子段组合起来，并根据上述分解中描述的3种情形计算其组合后的最大子段和。&lt;/p&gt;
&lt;p&gt;例如$[a_1, a_2]$最大子段和有3种可能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;情形1：$[a_1]$；&lt;/li&gt;
&lt;li&gt;情形2：$[a_2]$；&lt;/li&gt;
&lt;li&gt;情形3：$[a_1, a_2]$（即将$a_1$作为$s_1$，$a_2$作为$s_2$）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将取$\{[a_2], [a_1, a_2]\}$中值最大的序列作为$s_1$返回给上层调用。&lt;/p&gt;
&lt;p&gt;$[a_3, a_4]$最大子段和也是类似以上情况，最后取$\{[a_3], [a_3, a_4]\}$中值最大的序列作为$s_2$返回给上层调用。&lt;/p&gt;
&lt;p&gt;$A[1 \dots n]$中其他序列也是类似的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着来到上一步骤的上层调用中。&lt;/p&gt;
&lt;p&gt;例如$[a_1, a_2, a_3, a_4]$的最大子段和也是有3种可能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;情形1：$[a_1, a_2]$；&lt;/li&gt;
&lt;li&gt;情形2：$[a_3, a_4]$；&lt;/li&gt;
&lt;li&gt;情形3：$[a_1, a_2]$的$s_1$加上$[a_3, a_4]$的$s_2$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后计算$[a_1, a_2, a_3, a_4]$的$s_1$值，可能为$[a_1, a_2, a_3, a_4]$、$[a_2, a_3, a_4]$、$[a_3, a_4]$或$[a_4]$，取其中值最大者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他层次的调用也是类似上述步骤，最后得到$[a_1, a_2, \cdots, a_{\frac{n}{2}}]$和$[a_{\frac{n}{2}+1}, \cdots, a_n]$的$s_1$和$s_2$还有它们的两个最大子段和。
根据3种情况，取3种情况中最大值者作为$A[1 \dots n]$的最大子段和。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0-1-背包问题&#34;&gt;0-1 背包问题&lt;/h2&gt;
&lt;p&gt;有$n$个物品，第$i$个物品价值为$v_i$，重量为$w_i$，背包可容纳最大重量为$W$，$v_i$、$w_i$和$W$均为非负数。考虑如何选择装入背包的物品，使装入背包的物品总价值最大。该问题可以形式化描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目标函数：$max\sum\limit_{i=1}^{n}v_ix_i$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;约束条件：$\sum\limit_{i=1}^{n}w_ix_i \le W$，$x_i \in {0, 1}$。&lt;/p&gt;
&lt;p&gt;当物品$i$放入背包时，$x_i$为$1$，否则为$0$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足约束条件的任一集合（$x_1, x_2, \cdots, x_n$）是问题的一个可行解，问题的目标是求问题的一个最优解。&lt;/p&gt;
&lt;h3 id=&#34;使用动态规划求解&#34;&gt;使用动态规划求解&lt;/h3&gt;
&lt;p&gt;根据动态规划的4个步骤求解该问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;刻画 0-1 背包问题的最优解的结构：&lt;/p&gt;
&lt;p&gt;有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;$x_n = 1$&lt;/u&gt;：即问题的最优解包含了物品$n$，那么其余$x_1, x_2, \cdots, x_{n-1}$一定构成子问题：物品$1, 2, \cdots, n-1$在容量为&lt;u&gt;$W-w_n$&lt;/u&gt;时的最优解。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;$x_n = 0$&lt;/u&gt;：即最优解不包含物品$n$，那么其余$x_1, x_2, \cdots, x_{n-1}$一定构成子问题：物品$1, 2, \cdots, n-1$在容量为&lt;u&gt;$W$&lt;/u&gt;时的最优解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归定义最优解的值：&lt;/p&gt;
&lt;p&gt;设$c[i, w]$，表示背包可容纳重量为$w$时，第$i$个物品导致的最优解的总价值：&lt;/p&gt;
&lt;p&gt;$$
c[i, w] =
\begin{aligned}
0,                                      &amp;amp; i = 0 或 w = 0 \\
c[i-1, w],                              &amp;amp; w_i &amp;gt; w \\
max\{ c[i-1, w-w_i] + c[i-1, w] \},   &amp;amp; i &amp;gt; 0 且 w_i \le w
\end{aligned}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算背包问题最优解的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据计算的结果构造问题最优解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用回溯法求解&#34;&gt;使用回溯法求解&lt;/h3&gt;
&lt;p&gt;以$n=3, W=30$的0-1背包问题为例，物品的价值和重量如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;物品$i$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;价值$v_i$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重量$w_i$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;45&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义问题的解空间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684485061214.png&#34;
	width=&#34;1112&#34;
	height=&#34;493&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684485061214_hua26943b3666cfead45e3354c9c250048_93761_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684485061214_hua26943b3666cfead45e3354c9c250048_93761_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;0-1背包问题解空间树示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;541px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中$X(i)$即为$x_i$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义限界函数：&lt;/p&gt;
&lt;p&gt;考虑贪心策略，先对所有物品按其单位重量价值从大到小排序。对搜索空间树中的某个结点，有确定的$X(i)$（$1 \le i \le k$），而其他的$X(i)$（$k + 1 \le i \le n$）待定。&lt;/p&gt;
&lt;p&gt;此时可以将0-1背包问题松弛为背包问题，求从当前结点扩展下去，计算能获得的最大价值。若该价值比当前已经得到的某个可行解的值要小，则该结点不必再扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以深度优先的方式搜索解空间：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开始时根结点是唯一的活结点，也是当前的扩展结点。在扩展结点处，按照深度优先策略移至结点$B$或$C$。&lt;/p&gt;
&lt;p&gt;假设先移至$B$，此时$A$和$B$均是活结点，结点$B$成为当前扩展结点。&lt;/p&gt;
&lt;p&gt;当前$X(1) = 1$表示选择了物品$1$，当前背包剩余容量$w = 14$，获取的价值是$v=45$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从当前扩展结点$B$可以移至$D$或$E$。&lt;/p&gt;
&lt;p&gt;由于$w_2=15$，移至$D$不是一个可行解，所以选择移至$E$。&lt;/p&gt;
&lt;p&gt;此时$E$成为新扩展结点，$A$、$B$和$E$是当前的活结点，当前的$w$和$v$不变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从$E$可以移至$J$或$K$。&lt;/p&gt;
&lt;p&gt;移至$J$导致一个不可行解，所以移至$K$，$K$成为新扩展结点。&lt;/p&gt;
&lt;p&gt;$K$是叶结点，故得到一个可行解。解$x$的取值是由根到叶结点$K$的路径唯一确定的，即$x = (1, 0, 0)$，对应$v = 45$。&lt;/p&gt;
&lt;p&gt;由于$K$已不能在向纵深扩展，所以$K$成为死结点。返回到上一个活结点$E$，此时$E$也没有可扩展的结点，它也成为一个死结点。$B$此时也是死结点，最后回到$A$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$A$还可扩展，按照类似上述步骤继续搜索。搜索结束后找到的最好解就是0-1背包问题的最优解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;背包问题&#34;&gt;背包问题&lt;/h2&gt;
&lt;p&gt;有$n$个物品，第$i$个物品价值为$v_i$，重量为$w_i$，背包容量为$W$，$v_i$、$w_i$和$W$均为非负数。背包问题与0-1背包问题类似，但是每个物品可以部分装入背包，即$0 \le x_i \le 1$。&lt;/p&gt;
&lt;p&gt;假设$n = 5, W = 100$，各物品的重量、价值和单位重量的价值如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684482734674.png&#34;
	width=&#34;1278&#34;
	height=&#34;225&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684482734674_hu5b03cee14e409ca2e1a9d512eb500245_36650_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684482734674_hu5b03cee14e409ca2e1a9d512eb500245_36650_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;物品基本信息&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;568&#34;
		data-flex-basis=&#34;1363px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;为了得到最优解，必须把背包放满。用贪心法求解，有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按最大价值优先放入背包的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先放物品$1$和$4$，获得价值$65+60=125$，背包容量剩$100-30-50=20$。&lt;/li&gt;
&lt;li&gt;此时物品$5$价值最大，但不能全部放入背包。而将物品$2$和$3$放入背包比把物品$5$的一半放入背包的价值大。&lt;/li&gt;
&lt;li&gt;把物品$2$放入背包，目前获得价值共$125+20=145$，剩余容量$20-10=10$。&lt;/li&gt;
&lt;li&gt;此时可再放入物品$3$的$\cfrac{1}{3}$，得到总价值$145 + 1.5 \times 10 = 160$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对应的解为$\left\{1,\ 1,\ \cfrac{1}{3},\ 1,\ 0 \right\}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按最小重量优先放入背包的原则：将物品$2$、$3$、$1$和$5$放入背包，刚好装满，得到价值$20+30+60+40=155$，对应的解为$\{ 1, 1, 1, 0, 1 \}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按最大单位重量价值优先放入背包的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将物品$1$、$2$和$3$放入背包，得到价值$65+20+30=115$，剩余容量$100-30-10-20=40$。&lt;/li&gt;
&lt;li&gt;还可将物品$4$的$\cfrac{4}{5}$放入背包，得到总价值$115 + \cfrac{4}{5} \times 60 = 163$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对应的解为$\left\{ 1,\ 1,\ 1,\ \cfrac{4}{5},\ 0 \right\}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最长公共子序列lcs&#34;&gt;最长公共子序列（LCS）&lt;/h2&gt;
&lt;p&gt;非形式化地讲，子序列可以是从给定序列中随意地（不一定是连续的）去掉若干元素（可能一个也不去掉）后所形成的序列。令序列$X = x_1x_2\cdots x_m$，序列$Y=y_1y_2\cdots y_k$是$X$的子序列，存在$X$的一个严格递增下标序列$&amp;lt;i_1, i_2, \cdots, i_k&amp;gt;，使得对于所有的$j=1, 2, \cdots, k$有$x_{i_j}=y_j$。&lt;/p&gt;
&lt;p&gt;公共子序列：给定两个序列$X$和$Y$，序列$Z$同时是$X$和$Y$的子序列，这个序列$Z$即为$X$和$Y$的公共子序列。&lt;/p&gt;
&lt;p&gt;最长公共子序列问题定义为：给定序列$X=x_1x2 \cdots x_m$和序列$Y=y_1y2 \cdots y_n$，求这两个序列的最长公共子序列。&lt;/p&gt;
&lt;p&gt;动态规划法求解最长公共子序列问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;刻画最长公共子序列问题的最优子结构：&lt;/p&gt;
&lt;p&gt;LCS最优子结构定理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x_m = y_n$：$z_k = x_m = y_n$，且$Z_{k-1}$是$X_{m-1}$和$Y_{n-1}$的一个最长公共子序列。&lt;/li&gt;
&lt;li&gt;$x_m \neq y_n$：
&lt;ul&gt;
&lt;li&gt;$z_k \neq x_m$：蕴含$Z$是$X_{m-1}$和$Y$的一个最长公共子序列；&lt;/li&gt;
&lt;li&gt;$z_k \neq y_n$：蕴含$Z$是$X$和$Y_{n-1}$的一个最长公共子序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归定义最优解的值：&lt;/p&gt;
&lt;p&gt;设$l[i, j]$表示序列$X_i$和$Y_j$的最长公共子序列的长度：&lt;/p&gt;
&lt;p&gt;$$
l[i, j] =
\begin{aligned}
0,                          &amp;amp; i=0 或 j=0 \\
l[i-1, j-1],                &amp;amp; i,j &amp;gt; 0 且 x_i = y_j \\
max(l[i-1, j], l[i, j-1]),  &amp;amp; i,j &amp;gt; 0 且 x_i \neq y_j
\end{aligned}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算最优解的值：&lt;/p&gt;
&lt;p&gt;根据上述递归式自底向上地求出最优解的值。将$l[i, j]$的值存储在表$l[1 \dots m, 1 \dots n]$中，以行为主序从左到右计算表$l$中的元素，同时维持表$b[1 \dots m, 1 \dots n]$，用其中的元素$b[i, j]$记录使得$l[i, j]$取最优值的最优子结构。&lt;/p&gt;
&lt;p&gt;例如$X=ABCBDAD$和$Y=BDCABA$，对应的表$l$和$b$如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684475662212.png&#34;
	width=&#34;599&#34;
	height=&#34;480&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684475662212_huf8741ffb03170f75828435beb229b8f8_55892_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684475662212_huf8741ffb03170f75828435beb229b8f8_55892_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;动态规划求解LCS示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;299px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造最优解：&lt;/p&gt;
&lt;p&gt;用表$b$中的信息构造$X$和$Y$的一个LCS。从$b[m, n]$开始，在表中沿着箭头方向跟踪，$b[i, j]$的值和含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$“\nwarrow”$：表示$x_i = y_j$为LCS中的元素，接下来要判断（跟踪）$b[i-1, j-1]$。&lt;/li&gt;
&lt;li&gt;$“\uparrow”$：表示$x_i \neq y_j$，此时需要判断（跟踪）$b[i-1, j]$。&lt;/li&gt;
&lt;li&gt;$“\leftarrow”$：表示$x_i \neq y_j$，此时需要判断（跟踪）$b[i, j-1]$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;活动选择问题&#34;&gt;活动选择问题&lt;/h2&gt;
&lt;p&gt;活动选择问题是指若干个具有竞争性的活动，要求互斥使用某一公共资源时，如何选择最大的相容活动集合。&lt;/p&gt;
&lt;p&gt;假设有一个需要使用某一资源的$n$个活动组成的集合$S=\{a_1, a_2, \cdots, a_n\}$，该资源一次只能被一个资源占用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动$a_i$有一个开始时间$s_i$和结束时间$f_i$，且$0 \le s_i \le f_i &amp;lt; \infin$。&lt;/li&gt;
&lt;li&gt;一旦被选择后，活动$a_i$就占据半开时间区间$[s_i, f_i)$。&lt;/li&gt;
&lt;li&gt;如果两个活动$a_i$和$a_j$的时间区间互不重叠，则称活动$a_i$和$a_j$是兼容的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活动选择问题就是要选择出一个由互相兼容的活动组成的最大子集合。&lt;/p&gt;
&lt;p&gt;该问题可用动态规划法和贪心法求解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用贪心法求解&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;定义集合$S_{ij} = \{a_k \in S: f_i \le s_k &amp;lt; f_k \le s_j \}$。为了完整表示，加入两个虚拟活动$a_0$和$a_{n+1}$，其中$f_0=0,s_{n+1} = \infin$，则$S = S_{0, n+1}$。&lt;/p&gt;
&lt;p&gt;定理：&lt;/p&gt;
&lt;p&gt;对于任意非空子问题$S_{ij}$，设$a_m$是$S_{ij}$中具有最早结束时间的活动，那么有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$a_m$在$S_{ij}$的某个最大兼容活动子集中。&lt;/li&gt;
&lt;li&gt;子问题$S_{im}$为空，选择$a_m$将使$S_{mj}$为唯一可能非空的子问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;n-皇后问题&#34;&gt;n 皇后问题&lt;/h2&gt;
&lt;p&gt;$n$皇后问题要求在$n \times n$格的棋盘上放置$n$个皇后，使得它们彼此不受攻击。按照规则，皇后可以攻击与之处在同一行、同一列或同一斜线上的其他任何棋子。$n$皇后问题等价于要求在一个$n \times n$棋盘上放置$n$个皇后，使得任何两个皇后不能被放在同一行、同一列或同一斜线上。&lt;/p&gt;
&lt;p&gt;求解过程从空棋盘开始，设在第$1$行至第$m$行都己经正确地放置了$m$个皇后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在第$m+1$行上，从第1$列开始找适合放置皇后的位置，共有$n$个可选位置。当一个位置不合适时就顺序选择下一列的位置进行判断。&lt;/p&gt;
&lt;p&gt;一个位置上共有以下几种情形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前位置的所在列上，已经有一个皇后存在，该位置不合适。&lt;/li&gt;
&lt;li&gt;当前位置所在的斜线上，已经有一个皇后存在，该位置不合适。&lt;/li&gt;
&lt;li&gt;当前位置所在的列和斜线上，均无皇后存在，该位置合适。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着往下一行，寻找下一行中适合放皇后的位置，然后再继续往下找。&lt;/p&gt;
&lt;p&gt;此时有以下几种情形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一直寻找到第$n$行，每一行上都有适合放皇后的位置。此时为一个可行解。&lt;/p&gt;
&lt;p&gt;如果第$n$行还有剩余的位置，那么便继续判断这些位置，以希望再获得一个可行解；否则进行回溯，按步骤1的方式改变上一行的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往下搜寻，在中途发现某一行上的所有位置都不能放置皇后，此时也要进行回溯，回到上一行按步骤1的方式改变位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用回溯法求解4-皇后问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684495382071.png&#34;
	width=&#34;1275&#34;
	height=&#34;506&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684495382071_huc186b02913aa15127675d2c019dabd0c_58233_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1684495382071_huc186b02913aa15127675d2c019dabd0c_58233_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用回溯法求解4-皇后问题的搜索过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;251&#34;
		data-flex-basis=&#34;604px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;查找算法&#34;&gt;查找算法&lt;/h1&gt;
&lt;p&gt;查找是一种常用的基本运算。查找表是指由同一类型的数据元素（或记录）构成的集合。&lt;/p&gt;
&lt;p&gt;查找表经常要进行的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询某个特定的数据元素是否在查找表中。&lt;/li&gt;
&lt;li&gt;检索某个特定的数据元素的各种属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常将只进行这两种操作的查找表称为&lt;strong&gt;静态查找表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;查找表经常要进行的另外两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在查找表中插入一个数据元素。&lt;/li&gt;
&lt;li&gt;从查找表中删除一个数据元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要在查找表中插入或删除元素，称此类查找表为&lt;strong&gt;动态查找表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;是数据元素（或记录）的某个数据项的值，用它来识别（标识）这个数据元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主关键字&lt;/strong&gt;：能唯一标识一个数据元素的关键字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;次关键字&lt;/strong&gt;：能标识多个数据元素的关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;平均查找长度&#34;&gt;平均查找长度&lt;/h2&gt;
&lt;p&gt;查找算法基本操作是&lt;u&gt;“将记录的关键字与给定值进行比较”&lt;/u&gt;。因此，通常&lt;u&gt;以“其关键字和给定值进行过比较的记录个数的期望值”作为衡量查找算法好坏的依据&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;查找算法在查找成功时的&lt;u&gt;平均查找长度&lt;/u&gt;关键字和给定值比较次数的期望值：&lt;/p&gt;
&lt;p&gt;$$
ASL = \sum_{i=1}^{n}{P_iC_i}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$P_i$为对表中第$i$个记录进行查找的概率，&lt;/p&gt;
&lt;p&gt;一般认为$P_i=\cfrac{1}{n}, 1 \le i \le n$，即$\sum_{i=1}^{n}{P_i}$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$C_i$为查找成功时，已经进行过比较的关键字个数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查找算法-1&#34;&gt;查找算法&lt;/h2&gt;
&lt;p&gt;静态查找表有以下查找方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序查找；&lt;/li&gt;
&lt;li&gt;折半查找；&lt;/li&gt;
&lt;li&gt;分块查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态查找表有以下查找方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉排序树；&lt;/li&gt;
&lt;li&gt;平衡排序树；&lt;/li&gt;
&lt;li&gt;B-树；&lt;/li&gt;
&lt;li&gt;哈希表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;顺序查找&#34;&gt;顺序查找&lt;/h3&gt;
&lt;p&gt;顺序查找是从表的一端开始，按照顺序（从左往右或从右往左）逐一进行查找。顺序查找的方法&lt;u&gt;对于&lt;strong&gt;顺序存储方式&lt;/strong&gt;和&lt;strong&gt;链式存储方式&lt;/strong&gt;的查找表都适用&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;顺序查找中，$C_i$取决于所查记录在表中的位置。一般情况下，$C_i = n - i + 1$，在等概率下，顺序查找的平均查找长度为：&lt;/p&gt;
&lt;p&gt;$$
ASL_{ss} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i+1)} = \cfrac{n+1}{2}
$$&lt;/p&gt;
&lt;h3 id=&#34;二分查找&#34;&gt;二分查找&lt;/h3&gt;
&lt;p&gt;二分查找又叫折半查找，是在有序列表的基础上进行查找，每次查找可以筛掉一半的元素。步骤如下：&lt;/p&gt;
&lt;p&gt;以升序数列$L[0&amp;hellip;n-1]$为例，假设要查找的数为$x$：&lt;/p&gt;
&lt;p&gt;让$x$与数列中间位置的元素$L\left[ \left\lfloor \cfrac{n}{2} \right\rfloor \right]$进行比较，如果相等则返回该元素下标，否则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果$x$比中间元素小，递归地对中间元素左边的数列（比$x$小的元素）进行二分查找；&lt;/li&gt;
&lt;li&gt;如果$x$比中间元素大，递归地对中间元素右边的数列（比$x$大的元素）进行二分查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;折半查找的过程可用二叉树描述。$n$个结点的二叉树深度为$\lfloor log_2{n} \rfloor + 1$，折半查找进行比较的关键字个数最多不超过树的深度。所以，折半查找在查找成功时和给定值&lt;u&gt;进行比较的关键字个数最多为$\lfloor log_2{n} \rfloor + 1$&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;折半查找的平均查找长度（假设结点总数为$n=2^h-1$，即折半查找树为深度$h=log_2(n+1)$的满二叉树）：&lt;/p&gt;
&lt;p&gt;$$
ASL_{bs} = \cfrac{1}{n} \sum_{i=1}^{n}{i \times 2^{i-1}} = \cfrac{n+1}{n} log_2{(n+1)} - 1
$$&lt;/p&gt;
&lt;p&gt;当$n$值较大时，$ASL_{bs} \approx log_2{(n+1)} - 1$。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;哈希表&#34;&gt;哈希表&lt;/h1&gt;
&lt;p&gt;哈希表查找（又叫散列表查找）是通过散列技术，将存储位置和关键字构建一个确定的关系$H$，使得每个关键字$key$对应一个存储位置$H(key)$。其中，$H$称为哈希函数或者散列函数。&lt;/p&gt;
&lt;p&gt;根据设定的&lt;strong&gt;哈希函数&lt;/strong&gt;$H(key)$和&lt;strong&gt;处理冲突的方法&lt;/strong&gt;，将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这块连续的空间称为哈希表或散列表，这一映射过程称为&lt;strong&gt;哈希造表&lt;/strong&gt;或&lt;strong&gt;散列表&lt;/strong&gt;，所得的存储位置称为&lt;strong&gt;哈希地址&lt;/strong&gt;或&lt;strong&gt;散列地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于哈希表，主要考虑两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何构造哈希函数；&lt;/li&gt;
&lt;li&gt;如何解决冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;冲突&#34;&gt;冲突&lt;/h2&gt;
&lt;p&gt;对于某个哈希函数$H$和两个关键字$key_1$和$key_2$,如果$key_1 \neq key_2$，而$H(key_1)=H(key_2)$，则称为冲突。&lt;/p&gt;
&lt;p&gt;具有相同哈希函数值的关键字对该哈希函数来说称为同义词。&lt;/p&gt;
&lt;p&gt;一般情况下，冲突只能尽可能减少而不能完全避免。&lt;/p&gt;
&lt;h2 id=&#34;哈希函数的构造方法&#34;&gt;哈希函数的构造方法&lt;/h2&gt;
&lt;p&gt;常用的哈希函数构造方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接定址法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数字分析法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平方取中法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;折叠法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机数法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除留余数法&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希函数的构造要考虑到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;压缩性：节省存储空间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;散列性：尽量减少冲突。&lt;/p&gt;
&lt;p&gt;要减少冲突，就要设法使哈希函数尽可能均匀地把关键字映射到存储区的各个存储单元。在构造哈希函数时，一般都要对关键字进行计算，且尽可能使关键字的所有组成部分都能起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;除留取余数法&#34;&gt;除留取余数法&lt;/h3&gt;
&lt;p&gt;除留取余数法是最常用的构造散列函数方法。&lt;/p&gt;
&lt;p&gt;除留取余数法：&lt;/p&gt;
&lt;p&gt;$$
f(key)=key \enspace mod \enspace p\quad (p\le m),\ m为散列表长
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$mod$ 是取模运算。&lt;/p&gt;
&lt;p&gt;根据经验，若散列表表长为$m$，通常$p$为小于或等于表长（最好接近$m$）的最小质数，可以更好的减小冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;冲突处理方法&#34;&gt;冲突处理方法&lt;/h2&gt;
&lt;p&gt;解决冲突就是为出现冲突的关键字找到另一个“空”的哈希地址。在处理冲突的过程中可能得到一个地址序列$H_i,(i=1,2,\dots,k)$。常见的处理冲突的方法有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放地址法；&lt;/li&gt;
&lt;li&gt;多重散列法（再哈希法）；&lt;/li&gt;
&lt;li&gt;链地址法；&lt;/li&gt;
&lt;li&gt;公共溢出区法……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开放地址法&#34;&gt;开放地址法&lt;/h3&gt;
&lt;p&gt;开放地址就是一旦发生冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并且记录它。&lt;/p&gt;
&lt;p&gt;有三种寻找空散列地址的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线性探测法（线性探测再散列）：&lt;/p&gt;
&lt;p&gt;$$
H_i=(H(key)+d) mod m
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$d$取$0,1,2,&amp;hellip;,m-1$；&lt;/li&gt;
&lt;li&gt;$m$为散列表的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$d$初始为0，如果有冲突，那么$d$就通过递增来寻找空的散列地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次探测法（二次探测再散列）：&lt;/p&gt;
&lt;p&gt;$$
H_i=(H(key)+q^2) mod m
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$q$取$0,1,-1,2,-2,&amp;hellip;,\pm k$，$k \le \cfrac{m}{2}$&lt;/li&gt;
&lt;li&gt;$m$为散列表的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二次探测法其实是对线性探测的一个优化，增加了平方可以不让关键字聚集在某一块区域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性探测法市能使第$i$个哈希地址的同义词存入第$i+1$个哈希地址，这样本应存入第$i+1$个哈希地址的元素变成了第$i+2$个哈希地址元素的同义词，……，因此，可能出现很多元素在相邻的哈希地址上“聚集”起来的现象，大大降低了查找效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;排序算法&#34;&gt;排序算法&lt;/h1&gt;
&lt;p&gt;排序算法有稳定排序和不稳定排序两种。假设待排序序列中，$R_i$和$R_j$值相同，且$R_i$领先于$R_j$，排序后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定排序&lt;/strong&gt;：排序后$R_i$和$R_j$相对次序不变，$R_i$任领先于$R_j$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不稳定排序&lt;/strong&gt;：排序后可能出现$R_j$领先于$R_i$的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据记录存储的位置可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内部排序&lt;/strong&gt;：待排序记录存储在内存中进行排序的过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部排序&lt;/strong&gt;：排序记录的数量很大，内存无法容纳全部记录，在排序过程需要对外存进行访问的排序过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;排序过程需要进行的两种基本操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;比较两个关键字的大小。&lt;/p&gt;
&lt;p&gt;这种操作对于大多数排序方法来说是必需的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将记录从一个位置移动到另一个位置。&lt;/p&gt;
&lt;p&gt;这种操作可以通过改变记录的存储方式来避免。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;排序算法及其时间、空间复杂度：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;排序算法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;平均时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最坏时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最好时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;空间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;稳定性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;是否归位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;直接插入排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;希尔排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简单选择排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;堆排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冒泡排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(1)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;快速排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n^2)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(log_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;归并排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(nlog_2{n})$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$O(n)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;稳定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;是否归位：在排序过程中，能否确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;选择排序&#34;&gt;选择排序&lt;/h2&gt;
&lt;p&gt;选择排序（Selection Sort）是一种简单直观的排序算法，无论什么数据进去都是 $O(n²)$ 的时间复杂度。&lt;/p&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。&lt;/li&gt;
&lt;li&gt;再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。&lt;/li&gt;
&lt;li&gt;重复步骤2，直到所有元素均排序完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectionSort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;// 走访未排序的元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 找到最小值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr[min])
                min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
        &lt;span style=&#34;color:#75715e&#34;&gt;// i 不是最小数时，将 i 和最小数进行交换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; min)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[i];
            arr[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[min];
            arr[min] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp; 
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(arr) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arr);
    selectionSort(arr, len);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr[i]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h2&gt;
&lt;p&gt;冒泡排序（Bubble Sort）是一种简单直观的排序算法。&lt;/p&gt;
&lt;p&gt;这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;p&gt;假设一个序列长度为n，m（m≤n）是已排序完成的在末尾的数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。对比结束后，最后的元素会是最大的数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对接下来n-m个未排序的数重复步骤1和2，直到没有任何一对数字需要比较。&lt;/p&gt;
&lt;p&gt;第一趟对序列中所有n个数进行比对，第二趟对序列中n-1个未排序完成的数进行比对，以此类推。每次比对的数为n-m。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bubbleSort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[j];
                arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
                arr[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
            }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(arr) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arr);
    bubbleSort(arr, len);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr[i]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;直接插入排序&#34;&gt;直接插入排序&lt;/h2&gt;
&lt;p&gt;直接插入排序的做法是：在插入第$i$个记录（$R_i$）时，序列中的前$i-1$个记录$R_1,R_2,\cdots,R_{i-1}$已排好序。将$R_i$与前面的有序序列做比较，找到应该插入的位置将$R_i$插入，并将插入位置后的记录依序向后移动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。&lt;/p&gt;
&lt;p&gt;对于基本有序的序列用直接插入排序效率是最高的。&lt;/p&gt;
&lt;p&gt;不归位：在排序过程中，不能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h2&gt;
&lt;p&gt;希尔排序又称为“缩小增量排序”，它是对直接插入排序方法的改进。&lt;/p&gt;
&lt;p&gt;希尔排序的基本思想是：先将整个待排记录序列分割成若干子序列，然后分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择一个增量序列$t_1,t_2,&amp;hellip;,t_k$，其中$t_i &amp;lt; t_{i-1}(1 \le i \le k),t_k = 1$；&lt;/p&gt;
&lt;p&gt;一般来说，$t_1 \le \cfrac{n}{2}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按增量序列个数$k$，对序列进行$k$趟排序；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每趟排序，根据对应的增量$t_i$，将待排序列分割成若干长度为$t_i$的子序列，分别对各子表进行直接插入排序。仅增量因子为$1$时，整个序列作为一个表来处理，表长度即为整个序列的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1681209778321.png&#34;
	width=&#34;649&#34;
	height=&#34;460&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1681209778321_hu3445f2349c32f6de565415fce2b1b7c8_87538_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E7%AF%87/uTools_1681209778321_hu3445f2349c32f6de565415fce2b1b7c8_87538_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;希尔排序示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;计数排序&#34;&gt;计数排序&lt;/h2&gt;
&lt;p&gt;计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。&lt;/p&gt;
&lt;p&gt;当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是$Θ(n + k)$。计数排序不是比较排序，排序的速度快于任何比较排序算法。&lt;/p&gt;
&lt;p&gt;由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计数排序是用来排序0到100之间的数字的最好的算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找出待排序的数组中最大和最小的元素。&lt;/li&gt;
&lt;li&gt;统计数组中每个值为 &lt;code&gt;i&lt;/code&gt;的元素出现的次数，存入数组 &lt;code&gt;C&lt;/code&gt;的第 &lt;code&gt;i&lt;/code&gt;项。&lt;/li&gt;
&lt;li&gt;对所有的计数累加（从 &lt;code&gt;C&lt;/code&gt;中的第一个元素开始，每一项和前一项相加）。&lt;/li&gt;
&lt;li&gt;反向填充目标数组：将每个元素 &lt;code&gt;i&lt;/code&gt;放在新数组的第 &lt;code&gt;C(i)&lt;/code&gt; 项，每放一个元素就将 &lt;code&gt;C(i)&lt;/code&gt; 减去 &lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;堆排序&#34;&gt;堆排序&lt;/h2&gt;
&lt;p&gt;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。&lt;/p&gt;
&lt;p&gt;堆积是一种近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;
&lt;p&gt;堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；&lt;/li&gt;
&lt;li&gt;小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将待排序的数组构造出一个堆 &lt;code&gt;H[0……n-1]&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把堆首（堆顶结点，即最大值）和堆尾（堆的最下层最右边的结点）互换；&lt;/p&gt;
&lt;p&gt;此时不再对原堆顶（最大值）进行操作，即原堆顶已经被“移出”，堆的长度缩小1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把新的数组顶端数据调整到相应位置；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复步骤 2 到 3，直到堆的尺寸为 1。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;快速排序&#34;&gt;快速排序&lt;/h2&gt;
&lt;p&gt;快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。&lt;/p&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从序列中选择一个元素作为“基准”（pivot）。&lt;/li&gt;
&lt;li&gt;将所有比基准数小的放在基准左边，所有比基准数大的放在基准右边（相同的数可以在任一边）。这个称为分区（partition）操作。&lt;/li&gt;
&lt;li&gt;分区完成后，该基准就会归到序列中的相应位置，该位置是排序完成后的位置。&lt;/li&gt;
&lt;li&gt;分别递归地把小于基准数的子序列（左边）和大于基准数的子序列（右边）重复执行1到3操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;归位：在排序过程中，能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;归并排序&#34;&gt;归并排序&lt;/h2&gt;
&lt;p&gt;归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。&lt;/p&gt;
&lt;p&gt;作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自上而下的递归；&lt;/li&gt;
&lt;li&gt;自下而上的迭代。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；&lt;/li&gt;
&lt;li&gt;设定两个指针，最初位置分别为两个已经排序序列的起始位置；&lt;/li&gt;
&lt;li&gt;比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；&lt;/li&gt;
&lt;li&gt;重复步骤 3 直到某一指针达到序列尾；将另一序列剩下的所有元素直接复制到合并序列尾。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;不归位：在排序过程中，不能确定某些元素的最终排序位置。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>计算机网络篇</title>
        <link>https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/</link>
        <pubDate>Fri, 12 May 2023 06:01:08 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;网络概述&#34;&gt;网络概述&lt;/h1&gt;
&lt;p&gt;计算机网络是计算机技术与通信技术相结合的产物，它实现了远程通信、远程信息处理和资源共享。现代计算机网络已具有统一的网络体系结构。&lt;/p&gt;
&lt;p&gt;计算机网络提供的主要功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据通信&lt;/li&gt;
&lt;li&gt;资源共享&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;高可共享性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机网络分类&#34;&gt;计算机网络分类&lt;/h2&gt;
&lt;p&gt;按通信距离分类：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            网络分类
            &lt;/th&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            分布距离
        &lt;/th&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            计算机分布范围
        &lt;/th&gt;
        &lt;th style=&#34;text-align:center&#34;&gt;
            传输速率
        &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align:center&#34; rowspan=&#34;4&#34;&gt;
            &lt;b&gt;
                局域网
                &lt;br&gt;
                MAN
            &lt;/b&gt;
        &lt;/td&gt;
        &lt;tr&gt;
            &lt;td&gt;10m左右&lt;/td&gt;
            &lt;td&gt;房间&lt;/td&gt;
            &lt;td rowspan=&#34;3&#34;&gt;
                4Mbps ~ 1Gbps
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;100m左右&lt;/td&gt;
            &lt;td&gt;楼寓&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;1000m左右&lt;/td&gt;
            &lt;td&gt;校园&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align:center&#34;&gt;
            &lt;b&gt;
                城域网
                &lt;br&gt;
                WAN
            &lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;10km&lt;/td&gt;
        &lt;td&gt;城市&lt;/td&gt;
        &lt;td&gt;50Kbps ~ 100 Mbps&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align:center&#34;&gt;
            &lt;b&gt;
                广域网
                &lt;br&gt;
                LAN
            &lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;100km以上&lt;/td&gt;
        &lt;td&gt;国家或全球&lt;/td&gt;
        &lt;td&gt;9.6Kbps ~ 45Mbps&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;其它分类方式与其分类如：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th style=&#34;text-align: center;&#34;&gt;
            分类方式
        &lt;/th&gt;
        &lt;th&gt;
            分类内容
        &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
            信息交换方式
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;电路交换网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;分组交换网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;综合交换网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
            网络拓扑结构
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;星型网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;树型网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;环型网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;总线网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
            通信介质
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;双绞线网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;同轴电缆网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;光纤网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;卫星网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;3&#34;&gt;
            传输带宽
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;基带网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;宽带网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;3&#34;&gt;
            使用范围
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;公用网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;专用网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
            速率
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;高速网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;中速网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;低速网&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;3&#34;&gt;
            通信传播方式
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;广播式&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;点到点式&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;isoosi-网络体系结构&#34;&gt;ISO/OSI 网络体系结构&lt;/h2&gt;
&lt;p&gt;ISO/OSI的参考模型共有7层：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875696461.png&#34;
	width=&#34;390&#34;
	height=&#34;339&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875696461_hu39205de4aab8f3d4638771bbe2a09e98_32206_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875696461_hu39205de4aab8f3d4638771bbe2a09e98_32206_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;OSI 参考模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;计算机网络按照数据通信和数据处理的功能可分为两层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;内层通信子网（通信子网）：由计算机和高速通信线路组成独立的数据系统，承担全网的通信工作（解决数据传输和通信控制问题）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外层资源子网（资源子网）：包括计算机、终端、通信子网接口设备、外部设备、软件资源等，它负责全网的数据处理和提供网络资源及网络服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个网络层符合国际标准化组织所制定的开放式系统互连参考模型（OSI）的思想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信子网对应于OSI中的低三层：
&lt;ul&gt;
&lt;li&gt;物理层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源子网对应于OSI中的高三层：
&lt;ul&gt;
&lt;li&gt;会话层&lt;/li&gt;
&lt;li&gt;表示层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务端要向用户端传送数据（信息流向）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务端将数据送入应用层，然后数据逐层向物理层传递。&lt;/p&gt;
&lt;p&gt;在传递过程中，每一层对数据做相应处理（附加控制信息、数据变换、报文分段、报文分组、变换为帧等）。&lt;/p&gt;
&lt;p&gt;最后，经由物理层将数据发送至用户端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户端接受信息，按照与服务端相反顺序的动作，从物理层开始层层剥去控制信息。&lt;/p&gt;
&lt;p&gt;最后把原数据展示给用户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683877150679.png&#34;
	width=&#34;724&#34;
	height=&#34;404&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683877150679_hu64c4f9fea840087facedf4dd79f952ea_77141_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683877150679_hu64c4f9fea840087facedf4dd79f952ea_77141_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ISO/OSI RM 内信息流动&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有物理层是实通信（有物理连接），其余各层均为虚通信（无连线）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;网络的拓扑结构&#34;&gt;网络的拓扑结构&lt;/h2&gt;
&lt;p&gt;网络拓扑结构是指网络中通信线路和结点的几何排序，用于表示整个网络的结构外貌，反映各结点之间的结构关系。&lt;/p&gt;
&lt;p&gt;常用的网络拓扑结构有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总线型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875429976.png&#34;
	width=&#34;223&#34;
	height=&#34;139&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875429976_hu5b093505ed802d7d1a1c5817591c0eaa_1389_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875429976_hu5b093505ed802d7d1a1c5817591c0eaa_1389_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;总线型结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;385px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;星型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875460651.png&#34;
	width=&#34;198&#34;
	height=&#34;164&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875460651_hu8efe65f8b46b3e28417b2693def45240_4232_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875460651_hu8efe65f8b46b3e28417b2693def45240_4232_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;星型结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;289px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875485913.png&#34;
	width=&#34;166&#34;
	height=&#34;157&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875485913_huac7b91d4a6d672465402bf6e2160e44f_4244_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875485913_huac7b91d4a6d672465402bf6e2160e44f_4244_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;环型结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树型结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875508387.png&#34;
	width=&#34;184&#34;
	height=&#34;141&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875508387_hua92772052d44a07e8f2401ed8c07dfa6_1740_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875508387_hua92772052d44a07e8f2401ed8c07dfa6_1740_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;树型结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;313px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875530047.png&#34;
	width=&#34;164&#34;
	height=&#34;138&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875530047_hu4467481de8ae2f8fd02cecbf5efa7b7b_5249_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683875530047_hu4467481de8ae2f8fd02cecbf5efa7b7b_5249_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;分布式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;285px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;网络互连设备&#34;&gt;网络互连设备&lt;/h1&gt;
&lt;p&gt;构建一个实际的网络需要网络的传输介质、网络互连设备作为支持。&lt;/p&gt;
&lt;h2 id=&#34;网络设备&#34;&gt;网络设备&lt;/h2&gt;
&lt;p&gt;按照ISO/OSI的分层将互连设备分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;物理层设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中继器（Repeater）&lt;/li&gt;
&lt;li&gt;集线器（Hub）：一种多端口的中继器。集线器不能自动寻址，但可以检测发送冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据链路层设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网桥（Bridge）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交换机（Switch）：一种多端口的网桥。&lt;/p&gt;
&lt;p&gt;交换技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口交换&lt;/li&gt;
&lt;li&gt;帧交换&lt;/li&gt;
&lt;li&gt;信元交换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层设备：路由器（Router）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683956321797.png&#34;
	width=&#34;554&#34;
	height=&#34;235&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683956321797_hu561f5310d4335c386da88596021542b0_86791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683956321797_hu561f5310d4335c386da88596021542b0_86791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;路由器类型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;235&#34;
		data-flex-basis=&#34;565px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683956407885.png&#34;
	width=&#34;554&#34;
	height=&#34;163&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683956407885_hu10ca2431c18c804496582fc4c7f1a0a5_39421_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683956407885_hu10ca2431c18c804496582fc4c7f1a0a5_39421_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;各种路由来源的管理距离&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;339&#34;
		data-flex-basis=&#34;815px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层设备：网关（Gateway）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络传输介质&#34;&gt;网络传输介质&lt;/h2&gt;
&lt;p&gt;传输介质是信号传输的媒体，常用的介质分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有线介质：
&lt;ul&gt;
&lt;li&gt;双绞线（Twisted-Pair）&lt;/li&gt;
&lt;li&gt;同轴电缆（Coaxial）&lt;/li&gt;
&lt;li&gt;光纤（Fiber Optic）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无线介质：
&lt;ul&gt;
&lt;li&gt;微波&lt;/li&gt;
&lt;li&gt;红外线和激光&lt;/li&gt;
&lt;li&gt;卫星通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络组件&#34;&gt;网络组件&lt;/h2&gt;
&lt;p&gt;在一个局域网中，其基本组成部件为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器（Server）&lt;/li&gt;
&lt;li&gt;客户端（Client）&lt;/li&gt;
&lt;li&gt;网络设备&lt;/li&gt;
&lt;li&gt;通信介质&lt;/li&gt;
&lt;li&gt;网络软件&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;网络协议与标准&#34;&gt;网络协议与标准&lt;/h1&gt;
&lt;p&gt;计算机网络中的两个实体，想要成功通信，必须具有相同的语言，在计算机网络中称为协议（规程）。&lt;/p&gt;
&lt;p&gt;网络协议指的是网络中的计算机与计算机进行通信时，为了能够实现数据的正常发送与接收必须要遵循的一些事先约定好的规则（标准或约定），在这些规程中明确规定了通信时的数据格式、数据传送时序以及相应的控制信息和应答信号等内容。&lt;/p&gt;
&lt;h2 id=&#34;网络标准&#34;&gt;网络标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电信标准：由国际电信联盟（International Telecommunication Union，ITU）发布的标准，有ITU-T的V系列、X系列等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;国际标准：由国际标准化组织（ISO）负责制定。&lt;/p&gt;
&lt;p&gt;其他标准化组织：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ANSI：美国国家标准研究所，ISO的美国代表。&lt;/li&gt;
&lt;li&gt;NIST：美国国家标准和技术研究所，美国商业部的标准化机构。&lt;/li&gt;
&lt;li&gt;IEEE：电气和电子工程师协会（Institute of Electrical and Electronics Engineers）。&lt;/li&gt;
&lt;li&gt;ElA：电子工业协会（Electronic Industries Association）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Internet标准：特点是自发而非政府干预的，管理松散。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有民间性质的协会ISOC（Internet Society）进行必要的协调与管理。&lt;/li&gt;
&lt;li&gt;有网络信息中心（NIC）来管理IP地址，保证注册地址的唯一性。&lt;/li&gt;
&lt;li&gt;ISOC设有nternet总体管理机构结构（IAB）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;局域网协议&#34;&gt;局域网协议&lt;/h2&gt;
&lt;p&gt;IEEE 802系列标准己被ISO采纳为国际标准。&lt;/p&gt;
&lt;p&gt;局域网的基本组成主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络服务器&lt;/li&gt;
&lt;li&gt;网络工作站&lt;/li&gt;
&lt;li&gt;网络适配器&lt;/li&gt;
&lt;li&gt;传输介质&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;决定局域网特性的主要技术有3个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于传输数据的传输介质；&lt;/li&gt;
&lt;li&gt;用于连接各种设备的拓扑结构；&lt;/li&gt;
&lt;li&gt;用于共享资源的介质访问控制方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lan-模型&#34;&gt;LAN 模型&lt;/h3&gt;
&lt;p&gt;在IEEE 802局域网（LAN）标准中只定义了两层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;物理层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据链路层：&lt;/p&gt;
&lt;p&gt;根据LAN的特点把数据链路层分成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逻辑链路控制（Logical Link Control，LLC）子层：&lt;/p&gt;
&lt;p&gt;实现网络层中的寻址、排序、流控和差错控制等功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介质访问控制（Medium Access Control，MAC）子层&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683879193227.png&#34;
	width=&#34;397&#34;
	height=&#34;252&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683879193227_hu88c8e8da15a4cc0b1b209d5e372c6435_32953_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683879193227_hu88c8e8da15a4cc0b1b209d5e372c6435_32953_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LAN 层次与 ISO/OSI RM 的对应关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;378px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;以太网&#34;&gt;以太网&lt;/h3&gt;
&lt;p&gt;以太网技术采用的“存取方法”是带冲突检测的载波监听多路访问协议（Carrier-Sense Multiple Access with Collision Detection，CSMA/CD）技术。&lt;/p&gt;
&lt;p&gt;以太网主要包括3中类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IEEE 802.3中定义的标准局域网，速度为10Mbps，传输介质为细同轴电缆；&lt;/li&gt;
&lt;li&gt;IEEE 802.3u中定义的快速以太网，速度为100Mbps，传输介质为双绞线；&lt;/li&gt;
&lt;li&gt;IEEE 802.3z中定义的千兆以太网，速度为1000Mbps，传输介质为光纤或双绞线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;令牌环网&#34;&gt;令牌环网&lt;/h3&gt;
&lt;p&gt;IEEE 802.5的介质访问使用的是令牌环控制技术。&lt;/p&gt;
&lt;h3 id=&#34;fddi&#34;&gt;FDDI&lt;/h3&gt;
&lt;p&gt;FDDI（Fiber Distributed Data Interface,光纤分布式数据接口）类似令牌环网的协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用光纤作为传输介质；&lt;/li&gt;
&lt;li&gt;采用一种新的编码技术，称为4B/5B编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无线局域网&#34;&gt;无线局域网&lt;/h3&gt;
&lt;p&gt;无线局域网（WLAN）使用的是带冲突避免的载波侦听多路访问方法（CSMA/CA）。&lt;/p&gt;
&lt;h2 id=&#34;广域网协议&#34;&gt;广域网协议&lt;/h2&gt;
&lt;p&gt;用于广域网的主要协议有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点对点协议（PPP）&lt;/li&gt;
&lt;li&gt;数字用户线（xDSL）&lt;/li&gt;
&lt;li&gt;数字专线&lt;/li&gt;
&lt;li&gt;帧中继&lt;/li&gt;
&lt;li&gt;异步传输模式&lt;/li&gt;
&lt;li&gt;X.25 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcpip-协议族&#34;&gt;TCP/IP 协议族&lt;/h2&gt;
&lt;p&gt;TCP/IP作为Internet的核心协议，被广泛应用于局域网和广域网中，成为事实上的国际标准。&lt;/p&gt;
&lt;p&gt;TCP/IP基本特性的5个表现方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逻辑编制：&lt;/p&gt;
&lt;p&gt;每台连入Internet的计算机都会被分配一个逻辑地址，即IP地址。&lt;/p&gt;
&lt;p&gt;IP地址包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络ID号：用来标识网络；&lt;/li&gt;
&lt;li&gt;子网ID号：用来标识网络上的一个子网；&lt;/li&gt;
&lt;li&gt;主机ID号：用来标识子网上的一台计算机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路由选择：定义路由器如何选择网络路径的协议，即IP数据包的路由选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域名解析：&lt;/p&gt;
&lt;p&gt;域名：一种易记的字母式地址结构，也称为DNS（域名服务）名。&lt;/p&gt;
&lt;p&gt;将域名映射为IP地址的操作即为域名解析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;域名较稳定，而IP地址较易发生变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误检测：TPC/IP具有分组交换确保数据信息在网络上可靠传递的特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量控制：检测网络系统信息中的信息流量，防止出现网络拥塞，也属于分组交换确保数据信息在网络上可靠传递。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcpip-分层模型&#34;&gt;TCP/IP 分层模型&lt;/h3&gt;
&lt;p&gt;TCP/IP分层模型由4个层次构成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;网际层&lt;/li&gt;
&lt;li&gt;网络接口层&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683880948768.png&#34;
	width=&#34;697&#34;
	height=&#34;339&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683880948768_huf85223c878afcabc7c687de01d9badd5_93199_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683880948768_huf85223c878afcabc7c687de01d9badd5_93199_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;TCP/IP 模型于 OSI 模型的对比&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;205&#34;
		data-flex-basis=&#34;493px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;传输层协议-tcp-和-udp&#34;&gt;传输层协议 TCP 和 UDP&lt;/h3&gt;
&lt;p&gt;TCP和UDP都是应用于传输层的网络协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP（Transmission Control Protocol，传输控制协议）：&lt;/p&gt;
&lt;p&gt;在IP提供的不可靠数据服务的基础上为应用程序提供了可靠的、面向连接的、全双工的数据传输服务。&lt;/p&gt;
&lt;p&gt;采用三次握手来确认建立和关闭连接是否成功。&lt;/p&gt;
&lt;p&gt;TCP的功能或服务有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可靠传输&lt;/li&gt;
&lt;li&gt;连接管理&lt;/li&gt;
&lt;li&gt;差错校验和重传&lt;/li&gt;
&lt;li&gt;流量控制：采用可变大小的滑动窗口协议&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;端口寻址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP（User Datagram Protocol，用户数据报协议）：&lt;/p&gt;
&lt;p&gt;是一种不可靠的、无连接的协议，可以保证应用程序进程间的通信。&lt;/p&gt;
&lt;p&gt;UDP上的应用有VoIP等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UDP的首部8B，TCP的首部20B，UDP相比TCP来说，开销较小。&lt;/p&gt;
&lt;p&gt;TCP和UDP均提供了端口寻址功能。&lt;/p&gt;
&lt;h3 id=&#34;电子邮件协议-smtp-和-pop3&#34;&gt;电子邮件协议 SMTP 和 POP3&lt;/h3&gt;
&lt;p&gt;SMTP和POP3都使用TCP端口传输和接收邮件。&lt;/p&gt;
&lt;p&gt;SMTP：邮件发送协议；常用端口号：25。&lt;/p&gt;
&lt;p&gt;SMTP只能传输SACII码文本和文字附件，可以使用MIME邮件扩充协议，添加其他类型的附件。&lt;/p&gt;
&lt;p&gt;POP3：邮件接收协议；常用端口号：110。&lt;/p&gt;
&lt;p&gt;POP3基于C/S模式（Client/Server模式，客户端/服务器模式）。&lt;/p&gt;
&lt;h3 id=&#34;arp-和-rarp-协议&#34;&gt;ARP 和 RARP 协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP（Address Resolution Protocol，地址解析协议）：将IP地址转换为MAC地址（物理地址）。&lt;/p&gt;
&lt;p&gt;IP到MAC地址的转换过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询ARP高速缓存中是否有该IP地址&lt;/li&gt;
&lt;li&gt;如果该IP地址在ARP高速缓存中，便使用与它对应的MAC地址，将数据报发送给所需的物理网卡&lt;/li&gt;
&lt;li&gt;如果ARP高速缓存中没有该IP地址，ARP便在局域网上&lt;u&gt;以广播方式发送一个ARP请求包&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;如果局域网上IP地址与某台计算机中的IP地址相一致，那么该计算机便生成一个ARP应答信息，信息中包含对应的MAC地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RARP（反地址解析协议）：将MAC地址转换为IP地址，主要用于无盘工作站。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;动态主机配置协议-dhcp&#34;&gt;动态主机配置协议 DHCP&lt;/h3&gt;
&lt;p&gt;DHCP协议的功能和作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中的管理、分配IP地址；&lt;/li&gt;
&lt;li&gt;使网络环境中的主机动态地获得IP地址、Gateway地址、DNS服务器地址等信息；&lt;/li&gt;
&lt;li&gt;提升地址的使用率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DHCP客户端可以从DHCP服务器获得以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本机IP地址&lt;/li&gt;
&lt;li&gt;DNS服务器地址&lt;/li&gt;
&lt;li&gt;DHCP服务器地址&lt;/li&gt;
&lt;li&gt;默认网关的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无效地址&#34;&gt;无效地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows无效地址：169.254.X.X&lt;/p&gt;
&lt;p&gt;169.254.X.X是Windows系统在DHCP信息租用失败时自动给客户机分配的IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux无效地址：0.0.0.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;icmp&#34;&gt;ICMP&lt;/h3&gt;
&lt;p&gt;ICMP（Internet Control Message Protocol，Internet控制信息协议）是一种用于发送差错报文的协议。IP传送的数据报可能丢失、重复、延迟或乱序，而ICMP就是这样一种避免差错并在发生差错时报告的机制。&lt;/p&gt;
&lt;p&gt;ICMP定义了5种差错报文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源抑制&lt;/li&gt;
&lt;li&gt;超时&lt;/li&gt;
&lt;li&gt;目的不可达&lt;/li&gt;
&lt;li&gt;重定向&lt;/li&gt;
&lt;li&gt;要求分段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还定义了4种信息报文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回应请求&lt;/li&gt;
&lt;li&gt;回应应答&lt;/li&gt;
&lt;li&gt;地址屏蔽码请求&lt;/li&gt;
&lt;li&gt;地址屏蔽码应答&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IP在需要一个差错报文时要使用ICMP，而ICMP也是利用IP来传送报文。&lt;/p&gt;
&lt;p&gt;ICMP可以用于测试因特网，如ping工具就是利用ICMP报文进行目标是否可达测试。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;internet-地址&#34;&gt;Internet 地址&lt;/h1&gt;
&lt;p&gt;Internet地址格式主要有两种书写形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域名&lt;/li&gt;
&lt;li&gt;IP地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域名&#34;&gt;域名&lt;/h2&gt;
&lt;p&gt;域名（Domain Name）：通常是用户所用主机的名字或地址。&lt;/p&gt;
&lt;p&gt;域名格式由若干部分组成，每个部分又称子域名（用&lt;code&gt;.&lt;/code&gt;分开，最少由两个字母或数字组成）。&lt;/p&gt;
&lt;p&gt;通常，一个完整、通用的层次型主机域名由以下4个部分组成：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;主机名.本地名.组名.最高层域名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以理解为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;主机名.域名.域名后缀.域名分类
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683894526429.png&#34;
	width=&#34;554&#34;
	height=&#34;180&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683894526429_hu6282ff5faa954c949385bb63ae9b2c04_25931_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683894526429_hu6282ff5faa954c949385bb63ae9b2c04_25931_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域名分类及其含义&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;307&#34;
		data-flex-basis=&#34;738px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果一个主机所在的网络级别较高，它可能拥有的域名仅包含3部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;本地名.组名.最高层域名
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;url&#34;&gt;URL&lt;/h2&gt;
&lt;p&gt;URL即统一资源定位器（统一资源定位符），它的形式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;协议名://主机名.域名.域名后缀.域名分类/目录/网页文件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ip-地址&#34;&gt;IP 地址&lt;/h2&gt;
&lt;p&gt;IP地址：Internet中的主机地址实际上是用IP地址来唯一标识的。&lt;/p&gt;
&lt;p&gt;IP地址有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IPv4&lt;/li&gt;
&lt;li&gt;IPv6&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通常IP地址是指IPv4。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ipv4&#34;&gt;IPv4&lt;/h3&gt;
&lt;p&gt;每个IPv4地址都由4个小于256的数字组成（每个数字8位，共32位），数字之间用&lt;code&gt;.&lt;/code&gt;分开，可分为5类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683896541328.png&#34;
	width=&#34;484&#34;
	height=&#34;412&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683896541328_hu1b653364ebbdf1e76eb9cf18be092964_53037_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683896541328_hu1b653364ebbdf1e76eb9cf18be092964_53037_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IPv4各类地址分配方案&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在IPv4中，全&lt;code&gt;0&lt;/code&gt;代表的是网络，全&lt;code&gt;1&lt;/code&gt;代表的是广播。&lt;/p&gt;
&lt;p&gt;IPv4能表示的地址个数为：&lt;/p&gt;
&lt;p&gt;$$
2^{32} \approx 40亿
$$&lt;/p&gt;
&lt;h3 id=&#34;子网掩码&#34;&gt;子网掩码&lt;/h3&gt;
&lt;p&gt;网络软件和路由器使用&lt;strong&gt;子网掩码&lt;/strong&gt;（Subnet Mask）来识别报文是仅存放在网络内部还是被路由转发到其他地方。&lt;/p&gt;
&lt;p&gt;子网掩码是用来指明特定的IP地址中的网络号和主机号部分。子网掩码的格式与IP地址相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有对应网络号的部分用&lt;code&gt;1&lt;/code&gt;填上；&lt;/li&gt;
&lt;li&gt;所有对应主机号的部分用&lt;code&gt;0&lt;/code&gt;填上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683897195900.png&#34;
	width=&#34;912&#34;
	height=&#34;144&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683897195900_hue345962bd6503581635d067a0b6e714b_38818_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87/uTools_1683897195900_hue345962bd6503581635d067a0b6e714b_38818_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IP地址类默认的子网掩码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;633&#34;
		data-flex-basis=&#34;1520px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ipv6&#34;&gt;IPv6&lt;/h3&gt;
&lt;p&gt;IPv6具有长达128位的地址空间，可以彻底解决IPv4地址不足的问题。&lt;/p&gt;
&lt;p&gt;IPv6理论上能表示的地址个数：&lt;/p&gt;
&lt;p&gt;$$
2^{128} = 3.4 \times 10^{38}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在想象得到的将来，IPv6的地址空间是不可能用完的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dns-域名解析&#34;&gt;DNS 域名解析&lt;/h2&gt;
&lt;p&gt;Internet中的域名地址和IP地址是等价的，它们之间是通过域名服务（DNS域名解析）来完成映射变换的。&lt;/p&gt;
&lt;p&gt;DNS是一种分布式地址信息数据库系统，服务器中包含整个数据库的某部分信息，并供客户查询。DNS允许局部控制整个数据库的某些部分，但数据库的每一部分都可通过全网查询得到。&lt;/p&gt;
&lt;p&gt;域名系统采用的是客户端/服务器模式，整个系统由以下两部分组成：&lt;/p&gt;
&lt;p&gt;解析器和域名服务器组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解析器（客户端）：&lt;/p&gt;
&lt;p&gt;负责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询域名服务器&lt;/li&gt;
&lt;li&gt;解释从服务器返回来的应答&lt;/li&gt;
&lt;li&gt;将信息返回给请求方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域名服务器（服务器）：通常保存着一部分域名空间的全部信息，这部分域名空间称为区（Zone）。&lt;/p&gt;
&lt;p&gt;一个域名服务器可以管理一个或多个区。&lt;/p&gt;
&lt;p&gt;域名服务器可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主服务器&lt;/li&gt;
&lt;li&gt;Caching Only服务器&lt;/li&gt;
&lt;li&gt;转发服务器（Forwarding Server）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主域名服务器在接收到域名请求后，查询顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地缓存：缓存在该服务器中的域名信息。如果先前有多个用户对该域名进行访问，域名服务器会根据需要对该域名的信息进行缓存，以便加快后续用户访问的速度。&lt;/li&gt;
&lt;li&gt;本地&lt;code&gt;hosts&lt;/code&gt;文件：存储在服务器中的一种记录域名与其对应IP的文件。在PC中也有这样的文件存在。&lt;/li&gt;
&lt;li&gt;本地数据库：存储域名信息的数据库。&lt;/li&gt;
&lt;li&gt;转发域名服务器：如果用户访问的域名在以上内容中都不存在时，域名服务器会根据访问的域名，到对应的其他域名服务器中查询。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户A查找用户B时，域名系统工作过程如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析器向本地域名服务器发出请求查阅用户B的域名。&lt;/li&gt;
&lt;li&gt;本地域名服务器向最高层域名服务器发出查询地址的请求。&lt;/li&gt;
&lt;li&gt;最高层域名服务器返回给本地域名服务器一个IP地址。&lt;/li&gt;
&lt;li&gt;本地域名服务器向组域名服务器发出查询地址的请求。&lt;/li&gt;
&lt;li&gt;组域名服务器返回给本地域名服务器一个IP地址。&lt;/li&gt;
&lt;li&gt;本地服务器向刚返回的域名服务器发出查询域名地址请求。&lt;/li&gt;
&lt;li&gt;P地址返回给本地域名服务器。&lt;/li&gt;
&lt;li&gt;本地域名服务器将该地址返回给解析器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，在访问主机的时候只需要知道域名，通过DNS服务器将域名变换为IP地址。&lt;/p&gt;
&lt;p&gt;DNS所用的是UDP端口，端口号为53。&lt;/p&gt;
&lt;p&gt;在浏览器中访问网站时，通常是使用服务方的域名进行访问。在计算机上使用域名访问内容，本地计算机并不会直接去DNS服务器查询，而是会先在本地查询该域名。计算机使用域名访问时，域名查询的顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地&lt;code&gt;hosts&lt;/code&gt;文件：存储在计算机电脑中的一个文件，例如&lt;code&gt;localhost&lt;/code&gt;就是在本地&lt;code&gt;hosts&lt;/code&gt;文件中与本地IP&lt;code&gt;127.0.0.1&lt;/code&gt;对应。&lt;/li&gt;
&lt;li&gt;本地DNS缓存：先前访问的域名与其对应的IP等信息会被计算机缓存在本地中，如果本地中有该域名的缓存，那便无须访问DNS服务器。&lt;/li&gt;
&lt;li&gt;本地DNS服务器。&lt;/li&gt;
&lt;li&gt;根域名服务器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当在Wb浏览器的地址栏中输入某URL并按下回车，则处理过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对URL进行DNS域名解析，得到对应的IP地址；&lt;/li&gt;
&lt;li&gt;根据这个IP，找到对应的服务器，发起TCP连接，进行三次握手：&lt;/li&gt;
&lt;li&gt;建立TCP连接后发起HTTP请求；&lt;/li&gt;
&lt;li&gt;服务器响应HTTP请求，浏览器得到HTML代码；&lt;/li&gt;
&lt;li&gt;通信完成，断开TCP连接；&lt;/li&gt;
&lt;li&gt;浏览器解析HTML代码，并请求HTML代码中的资源（如s、css图片等）；&lt;/li&gt;
&lt;li&gt;浏览器将页面呈现给用户。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;无线通信技术&#34;&gt;无线通信技术&lt;/h1&gt;
&lt;p&gt;流行的无线通信技术有WiFi、蓝牙等。&lt;/p&gt;
&lt;p&gt;其中，蓝牙覆盖范围最小、通信距离最短。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ipconfig-命令&#34;&gt;ipconfig 命令&lt;/h1&gt;
&lt;p&gt;ipconfig是Windows中，调试计算机网络常用的命令（软件），类似于Linux中的ifconfig。&lt;/p&gt;
&lt;p&gt;ipconfig命令的用法如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;参数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无参数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示所有网络适配器的IP地址、子网掩码和缺省网关值&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示所有网络适配器的完整TCP/IP配置信息，包括DHCP服务是否已启动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig /all&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/displaydns&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示本地DNS内容&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig /displaydns&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/flushdns&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;清除本地DNS缓存内容&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig /flushdns&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/registerdns&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DNS客户端手工向服务器进行注册&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig /registerdns&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/release&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DHCP客户端手工释放IP地址&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig /release&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/renew&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DHCP客户端手工向服务器刷新请求（重新申请IP地址）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ipconfig /renew&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;网络信息安全&#34;&gt;网络信息安全&lt;/h1&gt;
&lt;p&gt;网络存在的威胁主要表现在以下5方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非授权访问&lt;/li&gt;
&lt;li&gt;信息泄露或丢失&lt;/li&gt;
&lt;li&gt;破坏数据完整性&lt;/li&gt;
&lt;li&gt;拒绝服务攻击&lt;/li&gt;
&lt;li&gt;利用网络传播病毒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络安全控制技术主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防火墙技术&lt;/li&gt;
&lt;li&gt;加密技术&lt;/li&gt;
&lt;li&gt;用户识别技术&lt;/li&gt;
&lt;li&gt;访问控制技术&lt;/li&gt;
&lt;li&gt;网络反病毒技术&lt;/li&gt;
&lt;li&gt;网络安全漏洞扫描技术&lt;/li&gt;
&lt;li&gt;入侵检测技术&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;要保护网络安全除了网络安全措施（使用网络安全控制技术）之外，还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理线路安全措施：例如设备防雷。&lt;/li&gt;
&lt;li&gt;系统安全措施：例如漏洞发现与补丁管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;防火墙技术&#34;&gt;防火墙技术&lt;/h2&gt;
&lt;p&gt;防火墙（Firewall）是&lt;u&gt;建立在内外网络边界上的过滤封锁机制&lt;/u&gt;，它认为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;内部网络是安全和可信赖的&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;外部网络是不安全和不可信赖的&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;防火墙是网络安全体系的基础和核心控制设施，同时也承担着繁重的通信任务。&lt;/p&gt;
&lt;p&gt;防火墙的作用：&lt;u&gt;防止不希望的、未经授权地进出被保护的内部网络。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;防火墙对通过受控干线的任何通信行为进行安全处理，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;审计&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报警&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反应&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;防火墙技术经历了三个发展阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包过滤防火墙&lt;/li&gt;
&lt;li&gt;应用代理网关防火墙&lt;/li&gt;
&lt;li&gt;状态检测技术防火墙&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;包过滤防火墙&#34;&gt;包过滤防火墙&lt;/h3&gt;
&lt;p&gt;包过滤防火墙一般有一个包检查块（通常称为包过滤器），数据包过滤可以根据数据包头中的各项信息来控制以下内容之间的相互访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;站点与站点&lt;/li&gt;
&lt;li&gt;站点与网络&lt;/li&gt;
&lt;li&gt;网络与网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包过滤防火墙无法控制传输数据的内容，因为内容是应用层数据，而&lt;u&gt;包过滤器处在网络层和数据链路层（即TCP和P层）之间&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;通过检查模块，防火墙能够拦截和检查所有出站和进站的数据，其过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开包&lt;/li&gt;
&lt;li&gt;取出包头&lt;/li&gt;
&lt;li&gt;根据包头的信息确定该包是否符合包过滤规则&lt;/li&gt;
&lt;li&gt;对过滤进行记录&lt;/li&gt;
&lt;li&gt;对于不符合规则的包，进行报警并丢弃该包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;过滤型防火墙的&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;对用户完全透明，速度较快&lt;/u&gt;（通常直接转发报文）；&lt;/li&gt;
&lt;li&gt;对每条传入和传出网络的包&lt;u&gt;实行低水平控制&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;每个IP包的字段都被检查&lt;/u&gt;，例如：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源地址，&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的IP地址，&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议，&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以识别和丢弃带欺骗性源IP地址的包；&lt;/li&gt;
&lt;li&gt;包过滤防火墙是两个网络之间访问的唯一来源；&lt;/li&gt;
&lt;li&gt;包过滤通常被包含在路由器数据包中，所以不需要额外的系统来处理这个特征。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过滤型防火墙的&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;不能防范黑客攻击&lt;/u&gt;，因为网管不可能区分出可信网络与不可信网络的界限；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;不支持应用层协议&lt;/u&gt;，因为它不识别数据包中的应用层协议，访问控制粒度太粗糙；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;不能处理新的安全威胁。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用代理网关防火墙&#34;&gt;应用代理网关防火墙&lt;/h3&gt;
&lt;p&gt;应用代理网关防火墙&lt;u&gt;彻底隔断内网与外网的直接通信&lt;/u&gt;：&lt;u&gt;内网用户对外网的访问变成防火墙对外网的访问&lt;/u&gt;，然后再由防火墙转发给内网用户。&lt;u&gt;所有通信都必须经应用层代理软件转发，访问者任何时候都不能与服务器建立直接的TCP连接&lt;/u&gt;，应用层的协议会话过程必须符合代理的安全策略要求。&lt;/p&gt;
&lt;p&gt;应用代理网关的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以检查应用层、传输层和网络层的协议特征；&lt;/li&gt;
&lt;li&gt;对数据包的检测能力比较强。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用代理网关的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;难以配置；&lt;/li&gt;
&lt;li&gt;处理速度非常慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;状态检测技术防火墙&#34;&gt;状态检测技术防火墙&lt;/h3&gt;
&lt;p&gt;状态检测技术防火墙&lt;u&gt;结合了代理防火墙的安全性和包过滤防火墙的高速度等优点&lt;/u&gt;，在不损失安全性的基础上，提高了代理防火墙的性能。&lt;/p&gt;
&lt;h2 id=&#34;入侵检测与防御&#34;&gt;入侵检测与防御&lt;/h2&gt;
&lt;p&gt;入侵检测系统（Intrusion Detection System，DS）作为防火墙之后的第二道安全屏障，通过从计算机系统或网络中的若干关键点收集网络的安全日志、用户的行为、网络数据包和审计记录等信息并对其进行分析，从中检查是否有违反安全策略的行为和遭到入侵攻击的迹象。入侵检测系统根据检测结果，自动做出响应。&lt;/p&gt;
&lt;p&gt;入侵检测系统有效的弥补了防火墙系统对网络上的入侵行为无法识别和检测的不足。&lt;/p&gt;
&lt;p&gt;入侵防御系统（IPS）是在入侵检测系统的基础上发展起来的，入侵防御系统不仅能够检测到网络中的攻击行为，同时主动的对攻击行为能够发出响应，对攻击进行防御。两者相较，主要存在以下区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在网络中的部署位置的不同；&lt;/li&gt;
&lt;li&gt;入侵响应能力的不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络攻击&#34;&gt;网络攻击&lt;/h2&gt;
&lt;p&gt;网络攻击是攻击者针对特定目标实施的有特定目的的活动，攻击目标对于攻击者是个黑盒子。&lt;/p&gt;
&lt;p&gt;常见的网络攻击手段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拒绝服务攻击（Dos攻击）：目的是使计算机或网络无法提供正常的服务。&lt;/p&gt;
&lt;p&gt;拒绝服务攻击是不断向计算机发起请求来实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重放攻击：攻击者发送一个目的主机已经接受过的报文来达到攻击目的。&lt;/p&gt;
&lt;p&gt;攻击者利用网络监听或者其他方式盗取认证凭据，之后再重新发送给认证服务器。&lt;/p&gt;
&lt;p&gt;重放攻击主要用于身份认证过程，目的是破坏认证的正确性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;口令入侵攻击：使用某些合法用户的账号和口令登录到目的主机，然后再实施攻击活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特洛伊木马：被伪装成程序或游戏，当用户下载了带有木马的软件或附件时，这个程序就会向黑客发起连接请求，建立连接后黑客就实施攻击活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;端口欺骗攻击：采用端口扫描找到系统漏洞从而实施攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络监听：攻击者可以接收某一网段在同一条物理通道上传输的所有信息，使用网络监听可以轻松截取包括账号和口令在内的信息资料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IP欺骗攻击：产生的IP数据包为伪造的源IP地址，以便冒充其他系统或发件人的身份。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL注入攻击：是黑客对数据库进行攻击的常用手段之一。&lt;/p&gt;
&lt;p&gt;SQL注入产生的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。&lt;/li&gt;
&lt;li&gt;攻击者可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，&lt;/li&gt;
&lt;li&gt;获取数据库的权限，就可获取用户账号和口令信息，以及对某些数据修改等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;入侵检测技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专家系统&lt;/li&gt;
&lt;li&gt;模型检测&lt;/li&gt;
&lt;li&gt;简单匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;病毒&#34;&gt;病毒&lt;/h2&gt;
&lt;p&gt;计算机病毒（Computer Virus）是指编制者在计算机程序中插入的&lt;u&gt;破坏计算机功能或者数据的代码&lt;/u&gt;，能影响计算机使用，&lt;u&gt;能自我复制&lt;/u&gt;的一组计算机&lt;u&gt;指令或者程序代码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;计算机病毒的特征包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传播性&lt;/li&gt;
&lt;li&gt;隐蔽性&lt;/li&gt;
&lt;li&gt;感染性&lt;/li&gt;
&lt;li&gt;潜伏性&lt;/li&gt;
&lt;li&gt;触发性&lt;/li&gt;
&lt;li&gt;破坏性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的病毒类型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Worm（蠕虫病毒）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;欢乐时光，&lt;/li&gt;
&lt;li&gt;熊猫烧香，&lt;/li&gt;
&lt;li&gt;红色代码，&lt;/li&gt;
&lt;li&gt;爱虫病毒，&lt;/li&gt;
&lt;li&gt;震网。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trojan（特洛伊木马）：通过内部发起连接与外部主机建立联系，由外部主机控制并盗取用户信息。&lt;/p&gt;
&lt;p&gt;计算机感染特洛伊木马后的典型线型是&lt;u&gt;有未知程序试图建立网络连接&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;常见的木马如冰河。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backdoor（后门病毒）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macro（宏病毒）：&lt;/p&gt;
&lt;p&gt;宏病毒感染的对象主要是&lt;u&gt;文本文档&lt;/u&gt;、&lt;u&gt;电子表格&lt;/u&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络安全&#34;&gt;网络安全&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSL（Secure Socket Layer，安全套接层）：传输层安全协议，用于实现Web安全通信。&lt;/p&gt;
&lt;p&gt;SSL常用端口号为443。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS（Transport Layer Security，传输层安全协议：建立在SSL3.0协议规范之上，是SSL3.0的后续版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH（Secure Shell）：终端设备与远程站点之间建立安全连接的协议，是建立在应用层和传输层基础上的安全协议。&lt;/p&gt;
&lt;p&gt;SSH是专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。&lt;/p&gt;
&lt;p&gt;SSH最初是UNIX上的程序，后来又迅速扩展到其他操作平台（如Linux、Windows）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer）：是以安全为目标的HTTP通道，即使用SSL加密算法的HTTP。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MME（Multipurpose Internet Mail Extensions，多用途互联网邮件扩展类型）：是一个互联网标准，扩展了电子邮件标准。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PGP（Pretty Good Privacy，优良保密协议）：是一个基于RSA公匙加密体系的邮件加密软件。&lt;/p&gt;
&lt;p&gt;可以用它对邮件保密以防止非授权者阅读，还能对邮件加上数字签名从而使收信人可以确认邮件的发送方。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>软件工程篇</title>
        <link>https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/</link>
        <pubDate>Mon, 08 May 2023 10:02:34 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;软件工程是指应用计算机科学、数学及管理科学等原理，以工程化的原则和方法来解决软件问题的工程，其目的是提高软件生产率、提高软件质量、降低软件成本。&lt;/p&gt;
&lt;p&gt;软件工程学：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件开发技术
&lt;ul&gt;
&lt;li&gt;软件开发方法学&lt;/li&gt;
&lt;li&gt;软件工具&lt;/li&gt;
&lt;li&gt;软件工程环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件工程管理
&lt;ul&gt;
&lt;li&gt;软件工程管理学&lt;/li&gt;
&lt;li&gt;软件经济学&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件工程涉及软件开发、维护、管理等多方面的原理、方法、工具与环境。&lt;/p&gt;
&lt;h2 id=&#34;计算机软件&#34;&gt;计算机软件&lt;/h2&gt;
&lt;p&gt;计算机软件是指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机系统中的程序：计算任务的处理对象和处理规则的描述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算任务：任何以计算机为处理工具的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据：如数字、文字、图形、图像、声音等，它们只是表示，而无含义。&lt;/li&gt;
&lt;li&gt;信息：数据及有关的含义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理规则：一般指处理的动作和步骤。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序文档：文档是为了便于了解程序所需的阐述性资料。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照软件的应用领域，可以将计算机软件分为十大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统软件&lt;/li&gt;
&lt;li&gt;应用软件&lt;/li&gt;
&lt;li&gt;工程/科学软件&lt;/li&gt;
&lt;li&gt;嵌入式软件&lt;/li&gt;
&lt;li&gt;产品线软件&lt;/li&gt;
&lt;li&gt;Web应用&lt;/li&gt;
&lt;li&gt;人工智能软件&lt;/li&gt;
&lt;li&gt;开放计算&lt;/li&gt;
&lt;li&gt;网络资源&lt;/li&gt;
&lt;li&gt;开源软件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件生存周期&#34;&gt;软件生存周期&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可行性分析与项目开发计划&lt;/li&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;/li&gt;
&lt;li&gt;编码&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件过程模型&#34;&gt;软件过程模型&lt;/h1&gt;
&lt;p&gt;软件开发中所遵循的路线图（一系列可预测的步骤）称为“软件过程”。过程是活动的集合，活动是任务的集合。&lt;/p&gt;
&lt;p&gt;软件过程有3层含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个体含义&lt;/li&gt;
&lt;li&gt;整体含义&lt;/li&gt;
&lt;li&gt;工程含义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;能力成熟度模型&#34;&gt;能力成熟度模型&lt;/h2&gt;
&lt;p&gt;软件过程能力成熟度模型（Capability Maturity Model of Software，CMM）是对软件组织进化阶段的描述，随着软件组织定义、实施、测量、控制和改进其软件过程，软件组织的能力经过这些阶段逐步提高。&lt;/p&gt;
&lt;p&gt;能力成熟度模型使软件组织能够较容易地确定其当前过程的成熟度并识别其软件过程执行中的薄弱环节，确定对软件质量和过程改进最为关键的几个问题，从而形成对其过程的改进策略。&lt;/p&gt;
&lt;p&gt;CMM将软件过程改进分为以下5个成熟度级别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始级&lt;/strong&gt;（Initial）：&lt;/p&gt;
&lt;p&gt;软件过程的特点是杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可重复级&lt;/strong&gt;（Repeatable）：&lt;/p&gt;
&lt;p&gt;建立了基本的项目管理过程和实践来跟踪项目费用、进度和功能特性；建立了有必要的过程准则来重复以前在同类项目中的成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;已定义级&lt;/strong&gt;（Defined）：&lt;/p&gt;
&lt;p&gt;管理和工程两方面的软件过程已经文档化、标准化，并综合成整个软件开发组织的标准软件过程。所有项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;己管理级&lt;/strong&gt;（Managed）：&lt;/p&gt;
&lt;p&gt;制定了软件过程和产品质量的详细度量标准。软件过程和产品质量都被开发组织的成员所理解和控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化级&lt;/strong&gt;（Optimized）：&lt;/p&gt;
&lt;p&gt;加强了定量分析，通过来自过程质量反馈和来自新观念、新技术的反馈使过程能不断持续地改进。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;能力成熟度模型集成&#34;&gt;能力成熟度模型集成&lt;/h2&gt;
&lt;p&gt;能力成熟度模型集成（CMMI）是若干过程模型的综合和改进，是支持多个工程学科和领域的、系统的、一致的过程改进框架，能适应现代工程的特点和需要，能提高过程的质量和工作效率&lt;/p&gt;
&lt;p&gt;CMMI提供了两种表示方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;阶段式模型&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;结构类以于CMM，它&lt;u&gt;关注组织的成熟度&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;CMMI-SE/SW/IPPD 1.1版中有5个成熟度等级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始的&lt;/strong&gt;：过程不可预测且缺乏控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;己管理的&lt;/strong&gt;：过程为项目服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已定义的&lt;/strong&gt;：过程为组织服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定量管理的&lt;/strong&gt;：过程已度量和控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化的&lt;/strong&gt;：集中于过程改进。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连续式模型&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;关注每个&lt;u&gt;过程域的能力&lt;/u&gt;，一个组织对不同的过程域可以达到不同的过程域&lt;strong&gt;能力等级&lt;/strong&gt;（Capability Level，&lt;strong&gt;CL&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;能力等级包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共性目标&lt;/li&gt;
&lt;li&gt;共性实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能力等级可以独立地应用于任何单独的过程域，任何一个能力等级都必须满足比它等级低的能力等级的所有准则。&lt;/p&gt;
&lt;p&gt;CMMI中包括6个过程域能力等级（0~5）：&lt;/p&gt;
  &lt;ol start=&#34;0&#34;&gt;
  &lt;li&gt;
      $CL_0$（未完成的）：
      &lt;br&gt;
      过程域&lt;u&gt;未执行&lt;/u&gt;或&lt;u&gt;未得到$CL_1$中定义的所有目标&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_1$（已执行的）：
      &lt;br&gt;
      其共性目标是&lt;u&gt;过程将可标识的输入工作产品转换成可标识的输出工作产品&lt;/u&gt;，以&lt;u&gt;实现支持过程域的特定目标&lt;/u&gt;。
      &lt;br&gt;
      关注于&lt;u&gt;过程域的特定目标的完成&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_2$（已管理的）：
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;已管理的过程的制度化&lt;/u&gt;。
      &lt;br&gt;
      关注于&lt;u&gt;针对单个过程实例的能力&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_3$（已定义级的）：
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;已定义的过程的制度化&lt;/u&gt;。
      &lt;br&gt;
      关注于&lt;u&gt;过程的组织级标准化和部署&lt;/u&gt;。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_4$（定量管理的）：
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;可定量管理的过程的制度化&lt;/u&gt;。
      &lt;br&gt;
      使用测量和质量保证来控制和改进过程域，建立和使用关于质量和过程执行的定量目标作为管理准则。
  &lt;/li&gt;
  &lt;li&gt;
      $CL_5$（优化的）：
      &lt;br&gt;
      使用量化（统计学）手段改变和优化过程域，以满足客户要求的改变和持续改进计划中的过程域的功效。
      &lt;br&gt;
      其共性目标集中于&lt;u&gt;优化的过程的制度化&lt;/u&gt;，表明&lt;u&gt;过程得到很好地执行&lt;/u&gt;且&lt;u&gt;持续得到改进&lt;/u&gt;。
  &lt;/li&gt;
  &lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;瀑布模型&#34;&gt;瀑布模型&lt;/h2&gt;
&lt;p&gt;瀑布模型（Waterfall Model）是&lt;u&gt;将软件生存周期中的各个活动规定为依线性顺序连接的若干阶段的模型&lt;/u&gt;（它规定了&lt;u&gt;由前至后、相互衔接的固定次序，如同瀑布流水逐级下落&lt;/u&gt;），包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需求分析&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行与维护&lt;/strong&gt;（运维）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683592633324.png&#34;
	width=&#34;380&#34;
	height=&#34;289&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683592633324_hu10aad72076ed5213bbae0299f40787a3_17688_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683592633324_hu10aad72076ed5213bbae0299f40787a3_17688_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;瀑布模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;315px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;瀑布模型假设：&lt;u&gt;一个待开发的系统需求是完整的、简明的、一致的&lt;/u&gt;，而且&lt;u&gt;可以先于设计和实现完成之前产生&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;瀑布模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易理解；&lt;/li&gt;
&lt;li&gt;管理成本低；&lt;/li&gt;
&lt;li&gt;每个阶段都有对应的成果产物；&lt;/li&gt;
&lt;li&gt;各个阶段有明显的界限划分和顺序需求；&lt;/li&gt;
&lt;li&gt;强调开发的阶段性早期计划及需求调查和产品测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要客户能够完整、正确和清晰地表达自己的需要；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在开始的两个或3个阶段中，很难评估真正的进度状态；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当接近项目结束时，出现了大量的集成和测试工作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直到项目结束之前，都不能演示系统的能力；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一旦发生错误，整个项目要推到重新开始。&lt;/p&gt;
&lt;p&gt;需求或设计中的错误往往只有到了项目后期才能够被发现，对于项目风险的控制能力较弱，从而导致项目常常延期完成，开发费用超出预算。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瀑布模式适合用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;开发需求明确&lt;/u&gt;的，&lt;u&gt;需求大致固定且不会随意变更&lt;/u&gt;的系统；&lt;/li&gt;
&lt;li&gt;开发人员对软件的应用领域很熟悉；&lt;/li&gt;
&lt;li&gt;开发工作对用户参与的要求很低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v模型&#34;&gt;V模型&lt;/h2&gt;
&lt;p&gt;V模型式是瀑布模型的一个变体，&lt;u&gt;描述了质量保证活动和沟通、建模相关活动以及早期构建相关的活动之间的关系&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683593148604.png&#34;
	width=&#34;492&#34;
	height=&#34;423&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683593148604_hu8d0af94f252673c89f90c5f2916cf2f6_46173_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683593148604_hu8d0af94f252673c89f90c5f2916cf2f6_46173_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;V模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计、开发：随着软件团队工作沿着&lt;u&gt;V模型左侧步骤向下推进&lt;/u&gt;，&lt;u&gt;基本问题需求逐步细化&lt;/u&gt;，形成问题及解决方案的技术描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试：一旦编码结束，团队沿着&lt;u&gt;V模型右侧的步骤向上推进&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;其实际上是&lt;u&gt;执行了一系列测试&lt;/u&gt;（质量保证活动），这些测试&lt;u&gt;验证了团队沿着V模型左侧步骤向下推进过程中所生成的每个模型&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V模型是一种测试的开发模型，强调测试贯穿项目的始终，而不是集中在测试阶段。V模型提供了一种将验证确认活动（测试）应用于早期软件工程工作中的方法。&lt;/p&gt;
&lt;h2 id=&#34;增量模型&#34;&gt;增量模型&lt;/h2&gt;
&lt;p&gt;增量模型（Incremental Model）融合了&lt;u&gt;瀑布模型的基本成分&lt;/u&gt;和&lt;u&gt;原型实现的迭代特征&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;增量模型&lt;u&gt;假设可以将需求分段为一系列增量产品，每一增量可以分别开发&lt;/u&gt;。该模型采用&lt;u&gt;随着日程时间的进展而交错的线性序列&lt;/u&gt;，每一个线性序列产生软件的一个可发布的“增量”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683593818710.png&#34;
	width=&#34;747&#34;
	height=&#34;325&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683593818710_hudfc99a041ac3ab639e6b9eda80f6b6b9_59071_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683593818710_hudfc99a041ac3ab639e6b9eda80f6b6b9_59071_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;增量模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从分析到测试为一个增量的过程（线性序列）。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;核心功能先完成&lt;/u&gt;：第1个增量往往是核心的产品。&lt;/li&gt;
&lt;li&gt;客户对每个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每一个增量发布后不断重复，直到产生了最终的完善产品。&lt;/li&gt;
&lt;li&gt;增量模型强调&lt;u&gt;每一个增量均发布一个可操作的产品&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增量模型作为&lt;u&gt;瀑布模型的一个变体&lt;/u&gt;，具有瀑布模型的所有优点。此外，它还有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;第一个可交付版本所需要的成本和时间很少&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开发由增量表示的小系统所承担的风险不大&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;由于很快发布了第一个版本，因此&lt;u&gt;可以减少用户需求的变更&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;优先级高的功能先交付，使得重要的功能经历更多的测试。&lt;/li&gt;
&lt;li&gt;运行增量投资，即在项目开始时，可以仅对一个或两个增量投资。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有对用户的变更要求进行规划，那么&lt;u&gt;产生的初始增量可能会造成后来增量的不稳定&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;如果需求不像早期思考的那样稳定和完整，那么&lt;u&gt;一些增量就可能需要重新开发、重新发布&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;管理发生的成本、进度和配置的复杂性可能会超出组织的能力&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;量模型适合用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要快速构造可运行的产品的项目（对完成期限严格要求的产品）；&lt;/li&gt;
&lt;li&gt;进行已有产品升级或新版本开发；&lt;/li&gt;
&lt;li&gt;对所开发的领域比较熟悉而且已有原型系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;演化模型&#34;&gt;演化模型&lt;/h2&gt;
&lt;p&gt;演化模型（Evolutionary Model）演化模型是&lt;u&gt;迭代的过程模型&lt;/u&gt;，使得软件开发人员能够&lt;u&gt;逐步开发出更完整的软件版本&lt;/u&gt;。演化模型特别&lt;u&gt;适用于对软件需求缺乏准确认识的情况&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;典型的演化模型有原型模型和螺旋模型等。&lt;/p&gt;
&lt;h3 id=&#34;原型模型&#34;&gt;原型模型&lt;/h3&gt;
&lt;p&gt;&lt;u&gt;并非所有的需求都能够预先定义&lt;/u&gt;。大量的实践表明，在&lt;u&gt;开发初期很难得到一个完整的、准确的需求规格说明&lt;/u&gt;。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;客户往往不能准确地表达对未来系统的全面要求&lt;/u&gt;，导致形成的需求规格说明不完整、不准确，甚至是有歧义。&lt;/li&gt;
&lt;li&gt;在整个开发过程中，&lt;u&gt;用户可能会产生新的要求，导致需求的变更&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瀑布模型难以适应这种需求的不确定性和变化，于是出现了快速原型（Rapid Prototype）这种新的开发方法。&lt;/p&gt;
&lt;p&gt;原型模型（Prototype Model）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适合于&lt;u&gt;用户需求不清&lt;/u&gt;、&lt;u&gt;需求经常变化&lt;/u&gt;的情况；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;不适合大规模系统的开发&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原型的目的是能&lt;u&gt;快速、低成本地构建原型系统&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;能够采用原型方法是因为开发工具的快速发展，使得能够迅速地开发出一个让用户看得见、摸得着的系统框架。这样，对于计算机不是很熟悉的用户就可以根据这个框架提出自己的需求。&lt;/p&gt;
&lt;p&gt;开发原型系统首先确定用户需求，开发初始原型，然后征求用户对初始原型的改进意见，并根据意见修改原型:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683596611929.png&#34;
	width=&#34;398&#34;
	height=&#34;318&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683596611929_huf32b7c912e3ca230941152f200b2d348_39995_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683596611929_huf32b7c912e3ca230941152f200b2d348_39995_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;原型模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;125&#34;
		data-flex-basis=&#34;300px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;交流：目的是定义软件的总体目标，标识需求，然后&lt;/li&gt;
&lt;li&gt;快速计划：快速制订原型开发的计划，确定原型的目标和范围。&lt;/li&gt;
&lt;li&gt;采用快速设计方式进行建模。&lt;/li&gt;
&lt;li&gt;构建原型。&lt;/li&gt;
&lt;li&gt;部署交付和反馈：被开发的原型应交付给客户使用，并收集客户的反馈意见，这些反馈意见可在下一轮中对原型进行改进。&lt;/li&gt;
&lt;li&gt;下一轮迭代：在前一个原型需要改进，或者需要扩展其范围的时候，进入下一轮原型的迭代开发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据使用原型的目的不同，原型可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索型原型：目的是要弄清目标的要求，确定所希望的特性，并探讨多种方案的可行性。&lt;/li&gt;
&lt;li&gt;实验型原型：目的是验证方案或算法的合理性，是在大规模开发和实现前，用于考查方案是否合适、规格说明是否可靠等。&lt;/li&gt;
&lt;li&gt;演化型原型：目的是将原型作为目标系统的一部分，通过对原型的多次改进，逐步将原型演化成最终的目标系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;螺旋模型&#34;&gt;螺旋模型&lt;/h3&gt;
&lt;p&gt;对于复杂的大型软件，开发一个原型往往达不到要求。&lt;/p&gt;
&lt;p&gt;螺旋模型&lt;u&gt;将瀑布模型和演化模型结合起来&lt;/u&gt;，&lt;u&gt;加入了两种模型均忽略的风险分析&lt;/u&gt;（以风险为驱动），弥补了这两种模型的不足。&lt;/p&gt;
&lt;p&gt;螺旋模型将开发过程分为几个螺旋周期，每个螺旋周期大致和瀑布模型相符合：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683597373666.png&#34;
	width=&#34;559&#34;
	height=&#34;482&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683597373666_huf1bec98ef9b3abd276da6fc698ab12a6_107839_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683597373666_huf1bec98ef9b3abd276da6fc698ab12a6_107839_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;螺旋模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每个螺旋周期分为如下4个工作步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;制订计划&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;确定软件的目标&lt;/li&gt;
&lt;li&gt;选定实施方案&lt;/li&gt;
&lt;li&gt;明确项目开发的限制条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险分析&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;分析所选的方案&lt;/li&gt;
&lt;li&gt;识别风险&lt;/li&gt;
&lt;li&gt;消除风险&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实施工程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;实施软件开发&lt;/li&gt;
&lt;li&gt;验证阶段性产品&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户评估&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;评价开发工作，提出修正建议&lt;/li&gt;
&lt;li&gt;建立下一个周期的开发计划&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;u&gt;螺旋模型属于面向对象开发模型。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;螺旋模型适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;庞大、复杂并且具有高风险的系统&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;新近开发，需求不明的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;螺旋模型&lt;u&gt;强调风险分析&lt;/u&gt;，使得开发人员和用户对每个演化层出现的风险有所了解，从而做出应有的反应。&lt;/li&gt;
&lt;li&gt;螺旋模型&lt;u&gt;支持用户需求的动态变化&lt;/u&gt;，有助于提高软件的适应能力，降低了软件开发的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要开发人员具有相当丰富的风险评估经验和专门知识。&lt;/li&gt;
&lt;li&gt;过多的迭代次数会增加开发成本，延迟提交时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;喷泉模型&#34;&gt;喷泉模型&lt;/h2&gt;
&lt;p&gt;喷泉模型（Water Fountain Model）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以用户需求为动力；&lt;/li&gt;
&lt;li&gt;以对象作为驱动；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;适合于面向对象。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;喷泉模型&lt;u&gt;克服了瀑布模型不支持软件重用和多项开发活动集成的局限性&lt;/u&gt;。其开发过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683598210327.png&#34;
	width=&#34;247&#34;
	height=&#34;361&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683598210327_hu1a269d21ed951b906d4bd7f5636da6a5_34545_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683598210327_hu1a269d21ed951b906d4bd7f5636da6a5_34545_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;喷泉模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;68&#34;
		data-flex-basis=&#34;164px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;喷泉模型使开发过程具有以下性质或特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;迭代性&lt;/strong&gt;：意味着模型中的开发活动常常需要重复多次，在迭代过程中不断地完善软件系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无间隙性&lt;/strong&gt;：指在开发活动（如分析、设计、编码）之间不存在明显的边界。&lt;/p&gt;
&lt;p&gt;喷泉不像瀑布模型那样，在需求分析活动结束后才开始设计活动，在设计活动结束后才开始编码活动，而是&lt;u&gt;允许各开发活动交叉、迭代地进行&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;喷泉模型的&lt;u&gt;各个阶段没有明显的界线&lt;/u&gt;，开发人员&lt;u&gt;可以同步进行&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持软件重用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：可以提高软件项目的开发效率，节省开发时间。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于喷泉模型在各个开发阶段是重叠的，在开发过程中&lt;u&gt;需要大量的开发人员，不利于项目的管理&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;喷泉模型&lt;u&gt;要求严格管理文档，使得审核的难度加大&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;统一过程模型&#34;&gt;统一过程模型&lt;/h2&gt;
&lt;p&gt;统一过程（UP）模型开发过程的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例和风险驱动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以架构为中心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迭代并且增量：&lt;/p&gt;
&lt;p&gt;迭代：将整个软件开发项目划分为许多个小的“袖珍项目”。&lt;/p&gt;
&lt;p&gt;每个“袖珍项目”都包含正常软件项目的所有元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计划&lt;/li&gt;
&lt;li&gt;分析和设计&lt;/li&gt;
&lt;li&gt;构造&lt;/li&gt;
&lt;li&gt;集成和测试&lt;/li&gt;
&lt;li&gt;内部和外部发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统一过程模型由UML（统一建模语言，Unified Modeling Language）方法和工具支持。&lt;/p&gt;
&lt;p&gt;统一过程定义了4个技术阶段及其制品，这4个技术阶段由主要里程碑所终止：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;起始阶段&lt;/strong&gt;（Inception Phase）：&lt;/p&gt;
&lt;p&gt;确定项目的风险及其优先次序，并对精化阶段进行详细规划和对整个项目进行粗略计算。&lt;/p&gt;
&lt;p&gt;专注于：项目的初创活动。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构想文档（Vision Document）&lt;/li&gt;
&lt;li&gt;初始用例模型&lt;/li&gt;
&lt;li&gt;初始项目术语表&lt;/li&gt;
&lt;li&gt;初始业务用例&lt;/li&gt;
&lt;li&gt;初始风险评估&lt;/li&gt;
&lt;li&gt;项目计划（阶段及迭代）业务模型&lt;/li&gt;
&lt;li&gt;一个或多个原型（需要时）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：生命周期目标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;精化阶段&lt;/strong&gt;（Elaboration Phase）：&lt;/p&gt;
&lt;p&gt;根据主要的用例描述设计出详细的系统构架。主要是解决用例、构架和计划是否足够稳定可靠，风险释放得到充分控制，以便能够按照合同的规定完成整个开发任务。&lt;/p&gt;
&lt;p&gt;精华阶段在理解了最初的领域范围之后进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;架构演进&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注于：需求分析和架构演进。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;补充需求：包括非功能需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件体系结构描述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可执行的软件体系结构原型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初步的设计模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修订的风险列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目计划：&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;迭代计划&lt;/li&gt;
&lt;li&gt;调整的工作流&lt;/li&gt;
&lt;li&gt;里程碑&lt;/li&gt;
&lt;li&gt;技术工作产品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始用户手册&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：生命周期目标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建阶段&lt;/strong&gt;（Construction Phase）：&lt;/p&gt;
&lt;p&gt;将设计实现，并进行测试。&lt;/p&gt;
&lt;p&gt;关注系统的构建，产生实现模型。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计模型&lt;/li&gt;
&lt;li&gt;软件构件&lt;/li&gt;
&lt;li&gt;集成的软件增量&lt;/li&gt;
&lt;li&gt;测试计划及步骤&lt;/li&gt;
&lt;li&gt;测试用例&lt;/li&gt;
&lt;li&gt;支持文档：
&lt;ul&gt;
&lt;li&gt;用户手册&lt;/li&gt;
&lt;li&gt;安装手册&lt;/li&gt;
&lt;li&gt;对于并发增量的描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：初始运作功能。即一个准备交到最终用户手中的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移交阶段&lt;/strong&gt;（Transition Phase）：&lt;/p&gt;
&lt;p&gt;交由用户测试并迭代完善。&lt;/p&gt;
&lt;p&gt;关注于软件提交方面的工作，产生软件增量。&lt;/p&gt;
&lt;p&gt;产生的主要工作产品有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交的软件增量&lt;/li&gt;
&lt;li&gt;$\beta$测试报告&lt;/li&gt;
&lt;li&gt;综合用户反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;里程碑：产品发布。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实还有一个产生阶段，这里包含在了移交阶段中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在每次迭代中有5个核心工作流：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求工作流：捕获系统应该做什么；&lt;/li&gt;
&lt;li&gt;分析工作流：精华和结构化需求；&lt;/li&gt;
&lt;li&gt;设计工作流：在系统架构内实现需求；&lt;/li&gt;
&lt;li&gt;实现工作流：构造软件；&lt;/li&gt;
&lt;li&gt;测试工作流：验证实现是否如期望那样工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;统一过程的典型代表是RUP（Rational Unified Process）。&lt;/p&gt;
&lt;p&gt;RUP是UP的商业扩展，完全兼容UP，但比UP更完整、更详细。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;敏捷开发&#34;&gt;敏捷开发&lt;/h2&gt;
&lt;p&gt;敏捷开发（Agile Development）的总体目标是通过&lt;u&gt;“尽可能早地、持续地对有价值的软件的交付”&lt;/u&gt;使客户满意。通过在软件开发过程中加入灵活性，敏捷方法&lt;u&gt;使用户能够在开发周期的后期增加或改变需求&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;敏捷过程的典型方法有很多，每一种方法基于一套原则，这些原则实现了&lt;u&gt;敏捷方法所宣称的理念（敏捷宣言）&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;敏捷开发有以下几种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极限编程（XP）&lt;/li&gt;
&lt;li&gt;水晶法（Crystal）&lt;/li&gt;
&lt;li&gt;并列争求法（Scrum）&lt;/li&gt;
&lt;li&gt;自适应软件开发（ASD）&lt;/li&gt;
&lt;li&gt;敏捷统一过程（AUP）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;极限编程&#34;&gt;极限编程&lt;/h3&gt;
&lt;p&gt;极限编程是为了&lt;u&gt;降低需求变更所带来的成本&lt;/u&gt;，旨在&lt;u&gt;提高软件质量和对客户需求变化的适应性&lt;/u&gt;，期望能够让软件开发达到低成本、低缺陷、高产出、高回报（最小投入得到最大结果）的效果。&lt;/p&gt;
&lt;p&gt;极限编程（XP）软件开发方式有以下性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级（敏捷）&lt;/li&gt;
&lt;li&gt;高效&lt;/li&gt;
&lt;li&gt;低风险&lt;/li&gt;
&lt;li&gt;柔性&lt;/li&gt;
&lt;li&gt;可预测的&lt;/li&gt;
&lt;li&gt;科学的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XP由价值观、原则、实践和行为4个部分组成，他们之间彼此相互依赖、关联，并通过行为贯穿于整个生存周期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4大价值观：
&lt;ul&gt;
&lt;li&gt;沟通&lt;/li&gt;
&lt;li&gt;简单性&lt;/li&gt;
&lt;li&gt;反馈&lt;/li&gt;
&lt;li&gt;勇气&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5个原则：
&lt;ul&gt;
&lt;li&gt;快速反馈&lt;/li&gt;
&lt;li&gt;简单性假设&lt;/li&gt;
&lt;li&gt;逐步修改&lt;/li&gt;
&lt;li&gt;提倡更改&lt;/li&gt;
&lt;li&gt;优质工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;12个最佳实践：
&lt;ul&gt;
&lt;li&gt;计划游戏：快速制定计划、随着细节的不断变化而完善&lt;/li&gt;
&lt;li&gt;小型发布：系统的设计要能够尽可能早地交付&lt;/li&gt;
&lt;li&gt;隐喻：找到合适的比喻传达信息&lt;/li&gt;
&lt;li&gt;简单设计：只处理当前的需求，使设计保持简单&lt;/li&gt;
&lt;li&gt;测试先行：先写测试代码，然后再编写程序&lt;/li&gt;
&lt;li&gt;重构：重新审视需求和设计，重新明确地描述它们以符合新的和现有的需求&lt;/li&gt;
&lt;li&gt;结对编程&lt;/li&gt;
&lt;li&gt;集体代码所有制&lt;/li&gt;
&lt;li&gt;持续集成：可以按日甚至按小时为客户提供可运行的版本&lt;/li&gt;
&lt;li&gt;每周工作40个小时&lt;/li&gt;
&lt;li&gt;现场客户&lt;/li&gt;
&lt;li&gt;编码标准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;敏捷统一过程&#34;&gt;敏捷统一过程&lt;/h3&gt;
&lt;p&gt;敏捷统一过程（Agile Unified Process，AUP）采用以下原理来构建软件系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“在大型上连续”&lt;/li&gt;
&lt;li&gt;“在小型上迭代”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用经典的UP阶段性活动（初始、精化、构建和转换），提供了一系列活动，能够使团队为软件项目构想出一个全面的过程流。&lt;/p&gt;
&lt;p&gt;在每个活动里，一个团队迭代使用敏捷，并将有意义的软件增量尽可能快地交付给最终用户。每个AUP迭代执行以下活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建模&lt;/strong&gt;：建立对商业和问题域的模型表述，这些模型“足够好”即可，以便团队继续前进。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现&lt;/strong&gt;：将模型翻译成源代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt;：像XP一样，团队设计和执行一系列的测试来发现错误以保证源代码满足需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署&lt;/strong&gt;：对软件增量的交付以及获取最终用户的反馈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置及项目管理&lt;/strong&gt;：着眼于变更管理、风险管理以及对团队的任一制品的控制。项目管理追踪和控制开发团队的工作进展并协调团队活动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境管理&lt;/strong&gt;：协调标准、工具以及适用于开发团队的支持技术等过程基础设施。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他敏捷开发方法&#34;&gt;其他敏捷开发方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;水晶法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;认为每一个不同的项目都需要一套不同的策略、约定和方法论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;认为人对软件质量有重要的影响。&lt;/p&gt;
&lt;p&gt;随着项目质量和开发人员素质的提高，项目和过程的质量也随之提高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过更好地交流和经常性的交付，软件生产力得到提高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;并列争求法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;使用迭代的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把每30天一次的迭代称为一个“冲刺”。&lt;/li&gt;
&lt;li&gt;按需求的优先级别来实现产品。&lt;/li&gt;
&lt;li&gt;多个自组织和自治的小组并行地递增实现产品。&lt;/li&gt;
&lt;li&gt;协调是通过简短的日常情况会议来进行，就像橄榄球中的“并列争球”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;自适应软件开发&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;有6个基本原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个使命作为指导；&lt;/li&gt;
&lt;li&gt;特征被视为客户价值的关键点；&lt;/li&gt;
&lt;li&gt;过程中的等待是很重要的，因此“重做”与“做”同样关键；&lt;/li&gt;
&lt;li&gt;变化不被视为改正，而是被视为对软件开发实际情况的调整；&lt;/li&gt;
&lt;li&gt;确定的交付时间迫使开发人员认真考虑每一个生产的版本的关键需求；&lt;/li&gt;
&lt;li&gt;风险也包含其中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;能力成熟度模型（从1开始）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;级别&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;杂乱无章，几乎没有明确定义的步骤。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可重复级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;建立基本的项目管理过程和实践来跟踪项目费用、进度和功能特性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已定义级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将管理和工程文档化、标准化并综合成标准软件过程；&lt;br&gt;使用标准开发过程（或方法论）构建（或集成）系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;己管理级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对软件过程和产品质量制定了的详细度量标准，且有定量的理解和控制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优化级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;加强了定量分析，通过过程质量和新观念、新技术使过程不断地改进。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;能力成熟度集成连续式模型（从0开始）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;能力等级&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;目标&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;未完成的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;未执行或未得到等级1中的所有目标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已执行的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可标识的输入工作产品到输出工作产品的转换，实现特定目标。&lt;p&gt;关注：特定目标的完成。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已管理的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已管理的过程的制度化。&lt;p&gt;关注：针对单个过程实例的能力。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;已定义级的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已定义的过程的制度化。&lt;p&gt;关注：过程的组织级标准化和部署。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定量管理的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可定量管理的过程的制度化。&lt;p&gt;说明：使用测量和质量保证来控制和改进。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优化的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;优化的过程的制度化。&lt;p&gt;说明：使用量化手段改变和优化。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各开发模型的适用范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;瀑布模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将软件生存周期中的活动定为线性顺序链接的阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求明确、大致固定且变更少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;V模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;瀑布模型的变体，强调测试贯穿项目的始终，是一种测试的开发模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求明确、低风险&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增量模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;融合瀑布模型和原型迭代，核心功能先完成，每轮迭代都会有新的增量，核心功能得到充分测试，强调每个增量均发布一个可操作的产品&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;快速构造可运行的产品，产品升级，领域熟悉或已有原型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;演化模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;迭代的过程模型，需求无法被完整定义，功能在使用过程中不断完善&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对软件需求缺乏准确认识的情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;原型开发方法模型，目的是快速、低成本地构建原型系统&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求不清或多变、领域陌生；不适合大规模系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;螺旋模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;结合瀑布和演化模型，强调引入风险分析，属于面向对象开发模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;庞大、复杂、高风险的系统，开发人员有丰富的风险评估经验和知识&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;喷泉模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向对象模型，特点是迭代、无间隙和支持重用，各阶段无明显界限，可迭代交叉&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向对象的开发过程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;统一过程&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用例驱动、以架构为中心、迭代和增量&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;统一过程模型阶段里程碑和关注点总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;里程碑&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;关注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;生命周期目标&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;项目的初创活动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;精化阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;生命周期架构&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需求分析和架构演进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构建阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始运作功能&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;系统的构建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移交阶段&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;产品发布&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件提交方面的工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;需求分析&#34;&gt;需求分析&lt;/h1&gt;
&lt;h2 id=&#34;软件需求&#34;&gt;软件需求&lt;/h2&gt;
&lt;p&gt;需求分析主要的目的是弄清楚系统需要“做什么”，并将其阐述出来。&lt;/p&gt;
&lt;p&gt;软件需求是指&lt;u&gt;用户对目标软件系统在功能、行为、性能、设计约束等方面的期望&lt;/u&gt;。通常，这些需求包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能需求&lt;/strong&gt;：考虑系统要做什么，在何时做，在何时以及如何修改或升级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能需求&lt;/strong&gt;：考虑软件开发的技术性指标。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储容量限制；&lt;/li&gt;
&lt;li&gt;执行速度；&lt;/li&gt;
&lt;li&gt;响应时间；&lt;/li&gt;
&lt;li&gt;吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户或人的因素&lt;/strong&gt;：考虑用户的类型。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各种用户对使用计算机的熟练程度，需要接受的训练；&lt;/li&gt;
&lt;li&gt;用户理解、使用系统的难度；&lt;/li&gt;
&lt;li&gt;用户错误操作系统的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;环境需求&lt;/strong&gt;：考虑未来软件应用的环境，包括硬件和软件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对硬件设备的需求包括：机型、外设、接口、地点、分布、湿度、磁场干扰等；&lt;/li&gt;
&lt;li&gt;对软件的需求包括：操作系统、网络、数据库等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;界面需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自其他系统的输入；&lt;/li&gt;
&lt;li&gt;到其他系统的输出；&lt;/li&gt;
&lt;li&gt;对数据格式的特殊规定；&lt;/li&gt;
&lt;li&gt;对数据存储介质的规定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文档需求&lt;/strong&gt;：考虑需要哪些文档，文档针对哪些读者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入、输出数据的格式；&lt;/li&gt;
&lt;li&gt;接收、发送数据的频率；&lt;/li&gt;
&lt;li&gt;数据的准确性和精度；&lt;/li&gt;
&lt;li&gt;数据流量；&lt;/li&gt;
&lt;li&gt;数据需保持的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源使用需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件运行时所需要的数据、其他软件、内存空间等资源；&lt;/li&gt;
&lt;li&gt;软件开发、维护时，所需的人力、支撑软件、开发设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全保密要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否需要对访问系统或系统信息加以控制；&lt;/li&gt;
&lt;li&gt;隔离用户数据的方法；&lt;/li&gt;
&lt;li&gt;用户程序如何与其他程序和操作系统隔离&lt;/li&gt;
&lt;li&gt;系统备份要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可靠性要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统的可靠性要求；&lt;/li&gt;
&lt;li&gt;系统是否必须检测和隔离错误；&lt;/li&gt;
&lt;li&gt;出错后，重启系统允许的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;软件成本消耗与开发进度需求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发是否有规定的时间表；&lt;/li&gt;
&lt;li&gt;软/硬件投资有无限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他非功能性要求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;如采用某种开发模式，需要确定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;质量控制标准；&lt;/li&gt;
&lt;li&gt;里程碑和评审；&lt;/li&gt;
&lt;li&gt;验收标准；&lt;/li&gt;
&lt;li&gt;各种质量要求的优先级；&lt;/li&gt;
&lt;li&gt;可维护性方面的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件需求的出处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以来自于用户（实际的和潜在的）、用户的规约、应用领域的专家、相关的技术标准和法规；&lt;/li&gt;
&lt;li&gt;可以来自于原有的系统、原有系统的用户、新系统的潜在用户；&lt;/li&gt;
&lt;li&gt;可以来自于竞争对手的产品。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;需求工程&#34;&gt;需求工程&lt;/h2&gt;
&lt;p&gt;需求工程可以细分为6个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需求获取&lt;/li&gt;
&lt;li&gt;需求分析与协商&lt;/li&gt;
&lt;li&gt;系统建模&lt;/li&gt;
&lt;li&gt;需求规约&lt;/li&gt;
&lt;li&gt;需求验证&lt;/li&gt;
&lt;li&gt;需求管理&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;系统设计&#34;&gt;系统设计&lt;/h1&gt;
&lt;p&gt;进入设计阶段，需要把软件系统“做什么”的逻辑模型转换成“怎么做”的物理模型。即着手实现软件系统需求。&lt;/p&gt;
&lt;p&gt;系统设计的主要目的就是为系统制定蓝图，在各种技术和实施方法中权衡利弊，精心设计，合理地使用各种资源，最终勾画出新系统的详细设计方案。&lt;/p&gt;
&lt;p&gt;系统设计的主要内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新系统总体结构设计&lt;/li&gt;
&lt;li&gt;代码设计&lt;/li&gt;
&lt;li&gt;输出、输入设计&lt;/li&gt;
&lt;li&gt;处理过程设计&lt;/li&gt;
&lt;li&gt;数据存储设计&lt;/li&gt;
&lt;li&gt;用户界面设计&lt;/li&gt;
&lt;li&gt;安全控制设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的设计方法有以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向数据流的结构化设计方法（SD）。&lt;/li&gt;
&lt;li&gt;面向对象的分析方法（OOD）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统设计的基本任务大体上可以分为两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;概要设计&#34;&gt;概要设计&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计软件系统总体结构&lt;/strong&gt;（&lt;strong&gt;总体结构设计&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;其基本任务是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用某种设计方法，将一个复杂的系统按功能划分成模块；&lt;/li&gt;
&lt;li&gt;确定每个模块的功能；&lt;/li&gt;
&lt;li&gt;确定模块之间的调用关系；&lt;/li&gt;
&lt;li&gt;确定模块之间的接口，即模块之间传递的信息；&lt;/li&gt;
&lt;li&gt;评价模块结构的质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件系统总体结构的设计是概要设计关键的一步，直接影响到下一个阶段详细设计与编码的工作。&lt;/p&gt;
&lt;p&gt;软件系统的质量及一些整体特性都在软件系统总体结构的设计中决定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构及数据库设计&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构设计&lt;/strong&gt;：逐步细化的方法也适用于数据结构的设计。&lt;/p&gt;
&lt;p&gt;在需求分析阶段，己经通过数据字典对数据的组成、操作约束和数据之间的关系等方面进行了描述，确定了数据的结构特性。在概要设计阶段要加以细化，详细设计阶段则规定具体的实现细节。在概要设计阶段，宜使用抽象的数据类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库设计&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;数据库的设计是指数据存储文件的设计，主要进行以下几方面设计：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念设计：在数据分析的基础上，采用自底向上的方法从用户角度进行视图设计，一般用E-R模型来表述数据模型。&lt;/p&gt;
&lt;p&gt;E-R模型既是设计数据库的基础，也是设计数据结构的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑设计：E-R模型是独立于数据库管理系统（DBMS）的，要结合具体的DBMS特征来建立数据库的逻辑结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理设计：对于不同的DBMS，物理环境不同，提供的存储结构与存取方法各不相同。&lt;/p&gt;
&lt;p&gt;物理设计就是设计数据模式的一些物理细节，如数据项存储要求、存取方法和索引的建立等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编写概要设计文档&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;文档主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概要设计说明书&lt;/li&gt;
&lt;li&gt;数据库设计说明书&lt;/li&gt;
&lt;li&gt;用户手册&lt;/li&gt;
&lt;li&gt;修订测试计划&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;评审&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;对设计部分是否完整地实现了需求中规定的功能、性能等要求，设计方法的可行性，关键的处理及内外部接口定义的正确性、有效性、各部分之间的一致性等都一一进行评审。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;详细设计&#34;&gt;详细设计&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;算法设计&lt;/strong&gt;：&lt;u&gt;对每个模块进行详细的算法设计&lt;/u&gt;，用某种图形、表格和语言等工具&lt;u&gt;将每个模块处理过程的详细算法描述出来&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构设计&lt;/strong&gt;：对模块内的数据结构进行设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库设计&lt;/strong&gt;：对数据库进行物理设计，即确定数据库的物理结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他设计：&lt;/p&gt;
&lt;p&gt;根据软件系统的类型，还可能要进行以下设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码设计&lt;/strong&gt;：为了提高数据的输入、分类、存储和检索等操作，节约内存空间，对数据库中某些数据项的值要进行代码设计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入/输出格式设计&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户界面设计&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写&lt;u&gt;详细设计说明书&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;评审&lt;/strong&gt;：&lt;u&gt;对处理过程的算法和数据库的物理结构都要评审。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系统设计的结果是一系列的系统设计文件，这些文件是物理实现一个信息系统（包括硬件设备和编制软件程序）的重要基础。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;系统测试&#34;&gt;系统测试&lt;/h1&gt;
&lt;p&gt;系统测试是&lt;u&gt;为了发现错误而执行程序的过程&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功的测试：发现了至今尚未发现的错误的测试。&lt;/li&gt;
&lt;li&gt;测试的目的：希望能以最少的人力和时间发现潜在的各种错误和缺陷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息系统测试应包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试&lt;/li&gt;
&lt;li&gt;硬件测试&lt;/li&gt;
&lt;li&gt;网络测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统测试是保证系统质量和可靠性的关键步骤，是对系统开发过程的最后复查。&lt;/p&gt;
&lt;p&gt;根据测试的概念和目的，在进行信息系统测试时应遵循以下基本原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应尽早并不断地进行测试。测试应贯穿在开发的各个阶段，应尽早纠正错误，消除隐患。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试工作应该避免由原开发软件的人或小组承担。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发人员往往不愿否认自己的工作，总认为自己开发的软件没有错误；&lt;/li&gt;
&lt;li&gt;开发人员的错误很难由本人测试出来，很容易根据自己编程的思路来制定测试思路，具有局限性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期输出结果。将实际输出结果与预期结果相比较就能发现测试对象是否正确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在设计测试用例时，不仅要设计有效、合理的输入条件，也要包含不合理、失效的输入条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在测试程序时，不仅要检验程序是否做了该做的事，还要检验程序是否做了不该做的事。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;严格按照测试计划来进行，避免测试的随意性。&lt;/p&gt;
&lt;p&gt;测试计划应包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试内容&lt;/li&gt;
&lt;li&gt;进度安排&lt;/li&gt;
&lt;li&gt;人员安排&lt;/li&gt;
&lt;li&gt;测试环境&lt;/li&gt;
&lt;li&gt;测试工具&lt;/li&gt;
&lt;li&gt;测试资料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;妥善保存测试计划、测试用例，作为软件文档的组成部分，为维护提供方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试例子都是精心设计出来的，可以为重新测试或追加测试提供方便。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系统测试阶段的&lt;u&gt;测试目标来自于需求分析阶段&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;测试过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;制定测试计划&lt;/li&gt;
&lt;li&gt;编制测试大纲&lt;/li&gt;
&lt;li&gt;根据测试大纲设计和生成测试用例&lt;/li&gt;
&lt;li&gt;实施测试&lt;/li&gt;
&lt;li&gt;生成测试报告&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;单元测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;单元测试&lt;/strong&gt;也称为&lt;strong&gt;模块测试&lt;/strong&gt;，&lt;u&gt;在模块编写完成且无编译错误后就可以进行&lt;/u&gt;。单元测试&lt;u&gt;侧重于模块中的内部处理逻辑和数据结构&lt;/u&gt;。如果选用&lt;u&gt;机器测试&lt;/u&gt;，一般用&lt;u&gt;白盒测试法&lt;/u&gt;。这类测试&lt;u&gt;可以对多个模块同时进行&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;单元测试主要检查模块的以下5个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块接口：模块的接口保证了测试模块的数据流可以正确地流入、流出。&lt;/p&gt;
&lt;p&gt;在测试中应检查以下要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试模块的&lt;u&gt;输入参数&lt;/u&gt;和&lt;u&gt;形式参数&lt;/u&gt;在&lt;u&gt;个数、属性、单位&lt;/u&gt;上&lt;u&gt;是否一致&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;调用其他模块时，所给出的&lt;u&gt;实际参数&lt;/u&gt;和&lt;u&gt;被调用模块的形式参数&lt;/u&gt;在&lt;u&gt;个数、属性、单位&lt;/u&gt;上&lt;u&gt;是否一致&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;调用标准函数时，所用的&lt;u&gt;参数在属性、数目和顺序上是否正确&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;全局变量在各模块中的定义和用法是否一致。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;输入是否仅改变了形式参数。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开/关的语句&lt;/u&gt;是否正确。&lt;/li&gt;
&lt;li&gt;规定的&lt;u&gt;I/O格式&lt;/u&gt;是否与输入/输出语句一致。&lt;/li&gt;
&lt;li&gt;在使用文件之前是否已经打开文件或使用文件之后是否己经关闭文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重要的执行路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出错处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边界条件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模块间存在调用与被调关系，对每个模块进行测试时，需要开发两种模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;驱动模块：接收测试例子的数据，将这些数据送到测试模块，输出结果。&lt;/p&gt;
&lt;p&gt;即模拟被测试模块的上一级模块，相当于被测模块的主程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;桩模块（存根模块）：代替测试模块中所调用的子模块，其内部可进行少量的数据处理。目的是为了检验入口、输出调用和返回的信息。&lt;/p&gt;
&lt;p&gt;即模拟被测模块的子模块（所调用的模块），但不是软件产品的组成部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683613415307.png&#34;
	width=&#34;360&#34;
	height=&#34;344&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683613415307_hu4c5b3d41c7734b9a664e78a78f6ec812_28357_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683613415307_hu4c5b3d41c7734b9a664e78a78f6ec812_28357_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;单元测试环境&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;251px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;提高模块的内聚度可以简化单元测试。&lt;/p&gt;
&lt;h2 id=&#34;集成测试&#34;&gt;集成测试&lt;/h2&gt;
&lt;p&gt;集成测试就是&lt;u&gt;把模块按系统设计说明书的要求组合起来进行测试&lt;/u&gt;。即使所有的模块都通过了测试，在集成之后，仍然可能出现问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;穿过模块的数据丢失；&lt;/li&gt;
&lt;li&gt;一个模块的功能对其他模块造成有害的影响；&lt;/li&gt;
&lt;li&gt;各个模块集成起来没有达到预期的功能；&lt;/li&gt;
&lt;li&gt;全局数据结构出现问题；&lt;/li&gt;
&lt;li&gt;单个模块的误差可以接受，但模块组合后，可能会出现误差累积，最后累积到不能接受的程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成测试是进行一些旨在&lt;u&gt;发现与接口相关的错误&lt;/u&gt;的测试，其目标是&lt;u&gt;利用已通过单元测试的构件建立设计中描述的程序结构&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;通常，集成测试有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非增量集成&lt;/strong&gt;：分别测试各个模块，再把这些模块组合起来进行整体测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可以对模块进行并行测试，能充分利用人力，并加快工程进度。&lt;/li&gt;
&lt;li&gt;缺点：容易混乱，出现错误不容易查找和定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增量集成&lt;/strong&gt;：以小增量的方式逐步进行构造和测试。&lt;/p&gt;
&lt;p&gt;增量式测试的范围一步步扩大，错误容易定位，更易于对接口进行彻底测试，并且可以运用系统化的测试方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增量集成策略有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自项向下集成测试&lt;/strong&gt;：一种构造软件体系结构的增量方法。&lt;/p&gt;
&lt;p&gt;模块的集成顺序为从主控模块（主程序）开始，沿着控制层次逐步向下，以深度优先或广度优先的方式将从属于（或间接从属于）主控模块的模块集成到结构中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683617607121.png&#34;
	width=&#34;500&#34;
	height=&#34;393&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683617607121_hu713a5d010320841559d8f2583f0abebb_19456_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683617607121_hu713a5d010320841559d8f2583f0abebb_19456_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;自顶向下集成&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深度优先集成&lt;/strong&gt;是&lt;u&gt;首先集成位于程序结构中主控路径上的所有构件&lt;/u&gt;，也可以根据特定应用系统的特征进行选择。&lt;/p&gt;
&lt;p&gt;例如上图中，选择最左边的路径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，集成构建$M_1$、$M_2$和$M_5$；&lt;/li&gt;
&lt;li&gt;其次，集成$M_8$或$M_6$（若$M_2$的正常运行是必须的）；&lt;/li&gt;
&lt;li&gt;然后，集成中间和右边控制路径上的构建。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;广度优先集成&lt;u&gt;首先沿着水平方向，将属于同一层的构建集成起来&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;例如上图中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，将构建$M_2$、$M_3$和$M_4$集成起来；&lt;/li&gt;
&lt;li&gt;其次是$M_5$、$M_6$、$M_7$，依次类推。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集成过程可以通过下列5个步骤完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;u&gt;主控模块用作测试驱动模块&lt;/u&gt;，用这些从属于主控模块的所有模块代替桩模块。&lt;/li&gt;
&lt;li&gt;依靠所选择的集成方法（即深度优先或广度优先），每次用实际模块替换一个从属桩模块。&lt;/li&gt;
&lt;li&gt;在集成每个模块后都进行测试。&lt;/li&gt;
&lt;li&gt;在完成每个测试集之后，用实际模块替换另一个桩模块。&lt;/li&gt;
&lt;li&gt;可以执行回归测试，以确保没有引入新的错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回到第2步继续执行此过程，直到完成了整个程序结构的构造。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;u&gt;自顶向下集成不需要驱动模块。&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自底向上集成测试&lt;/strong&gt;：自底向上集成测试就是从原子模块（程序结构的最底层构件）开始进行构造和测试。&lt;/p&gt;
&lt;p&gt;由于构件是自底向上集成的，在处理时所需要的从属于给定层次的模块总是存在的，因此，没有必要使用桩模块。自底向上集成策略可以利用以下步骤来实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接低层构件以构成完成特定子功能的簇。&lt;/li&gt;
&lt;li&gt;编写驱动模块（测试的控制程序）以协调测试用例的输入和输出。&lt;/li&gt;
&lt;li&gt;测试簇。&lt;/li&gt;
&lt;li&gt;去掉驱动程序，沿着程序结构向上逐步连接簇。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;簇：一系列相关低层构建的集合。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;自底向上集成不需要桩模块。&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683619189037.png&#34;
	width=&#34;762&#34;
	height=&#34;534&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683619189037_hu05113d41e3a4f82669c36fba382f49e9_36425_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683619189037_hu05113d41e3a4f82669c36fba382f49e9_36425_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;自底向上&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接相应的构建形成簇1、簇2和簇3；&lt;/li&gt;
&lt;li&gt;编写驱动模块（图中虚线上方连接的框，即$D_1$、$D_2$和$D_3$）&lt;/li&gt;
&lt;li&gt;利用驱动模块对每个簇进行测试。&lt;/li&gt;
&lt;li&gt;簇1和簇2中的构建从属于模块$M_a$，去掉驱动模块$D_1$和$D_2$，将这两个簇直接与$M_a$相连；簇3去掉驱动模块$D_3$，然后与$M_b$相连。&lt;/li&gt;
&lt;li&gt;最后将$M_a$和$M_b$与构建$M_c$连接在一起。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;回归测试&lt;/strong&gt;：重新执行己测试过的某些子集，以确保变更没有传播不期望的副作用。&lt;/p&gt;
&lt;p&gt;每当加入一个新模块作为集成测试的一部分时，软件发生变更，建立了新的数据流路径，可能出现新的/O,以及调用新的控制逻辑。这些变更可能会使原来可以正常工作的功能产生问题。&lt;/p&gt;
&lt;p&gt;回归测试有助于保证变更不引入无意识行为或额外的错误。回归测试的方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工执行，重新执行所有测试用例的子集&lt;/li&gt;
&lt;li&gt;利用捕捉/回放工具自动执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回归测试要执行的测试子集包含以下3种测试用例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;能够测试软件所有功能&lt;/u&gt;的具有代表性的&lt;u&gt;测试样本&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;额外测试，侧重于&lt;u&gt;可能会受变更影响的软件功能&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;侧重于&lt;u&gt;已发生变更的软件构件测试&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着集成测试的进行，&lt;u&gt;回归测试的数量可能变得相当庞大&lt;/u&gt;，因此，应将回归测试用例设计成&lt;u&gt;只包括每个主要程序功能的一个或多个错误类的测试&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;冒烟测试&lt;/strong&gt;：一种常用的集成测试方法，是时间关键项目的决定性机制，它让软件团队频繁地对项目进行评估。&lt;/p&gt;
&lt;p&gt;冒烟测试方法包括下列活动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将已经转换为代码的软件构件集成到构建中。&lt;/p&gt;
&lt;p&gt;一个构建包括所有的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据文件&lt;/li&gt;
&lt;li&gt;库&lt;/li&gt;
&lt;li&gt;可复用的模块&lt;/li&gt;
&lt;li&gt;实现一个或多个产品功能所需的工程化构件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计一系列测试以&lt;u&gt;暴露影响构建正确地完成它的功能的错误&lt;/u&gt;，其&lt;u&gt;目的是为了发现极有可能造成项目延迟的业务阻塞错误&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每天将该构建与其他构建及整个软件产品（以其当前形势）集成起来进行冒烟测试。&lt;/p&gt;
&lt;p&gt;这种集成方法可以自顶向下，也可以自底向上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试方法&#34;&gt;测试方法&lt;/h2&gt;
&lt;p&gt;测试方法分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态测试&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;指被测试程序不在机器上运行，而是采用以下手段对程序进行检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人工检测&lt;/strong&gt;：不依靠计算机而是依靠人工审查程序或评审软件。&lt;/p&gt;
&lt;p&gt;人工检测包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码检查&lt;/li&gt;
&lt;li&gt;静态结构分析&lt;/li&gt;
&lt;li&gt;代码质量度量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算机辅助静态分析&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态测试&lt;/strong&gt;：指通过运行程序发现错误。&lt;/p&gt;
&lt;p&gt;在对软件产品进行动态测试时可以采用以下两种测试方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;黑盒测试法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;白盒测试法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试用例由以下组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试输入数据&lt;/li&gt;
&lt;li&gt;预期输出结果：与测试输入数据对应的预期输出结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计测试用例时，应当包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合理的输入条件&lt;/li&gt;
&lt;li&gt;不合理的输入条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;黑盒测试&#34;&gt;黑盒测试&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;黑盒测试&lt;/strong&gt;也称为&lt;strong&gt;功能测试&lt;/strong&gt;，在&lt;u&gt;完全不考虑软件的内部结构和特性&lt;/u&gt;的情况下，测试软件的外部特性。&lt;/p&gt;
&lt;p&gt;进行黑盒测试主要是为了发现以下几类错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否有错误的功能或遗漏的功能？&lt;/li&gt;
&lt;li&gt;界面是否有误？输入是否正确接收？输出是否正确？&lt;/li&gt;
&lt;li&gt;是否有数据结构或外部数据库访问错误？&lt;/li&gt;
&lt;li&gt;性能是否能多接受？&lt;/li&gt;
&lt;li&gt;是否有初始化或终止性错误？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的黑盒测试技术有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等价类划分&lt;/strong&gt;：将程序的输入域划分为若干等价类，然后从每个等价类中选取一个代表性数据作为测试用例。&lt;/p&gt;
&lt;p&gt;每一类的代表性数据在测试中的作用等价于这一类中的其他值，这样就可以&lt;u&gt;用少量代表性的测试用例取得较好的测试效果&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;等价类划分有两种不同的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类&lt;/li&gt;
&lt;li&gt;无效等价类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计测试用例时，要同时考虑这两种等价类。&lt;/p&gt;
&lt;p&gt;定义等价类的原则如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;u&gt;输入条件规定了取值范围或值的个数&lt;/u&gt;的情况下，&lt;u&gt;可以定义1个有效等价类和2个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;输入条件规定了输入值的集合或规定了“必须如何”&lt;/u&gt;的条件的情况下，&lt;u&gt;可以定义1个有效等价类和一个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在输入条件是一个&lt;u&gt;布尔量&lt;/u&gt;的情况下，&lt;u&gt;可以定义一个有效等价类和一个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;规定了输入数据的一组值（假定$n$个）&lt;/u&gt;，并且程序要&lt;u&gt;对每一个输入值分别处理&lt;/u&gt;的情况下，&lt;u&gt;可以定义$n$个有效等价类和1个无效等价类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;u&gt;规定了输入数据必须遵守的规则&lt;/u&gt;的情况下，&lt;u&gt;可以定义一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;在确知己划分的等价类中，各元素在程序处理中的方式不同的情况下，则应将该等价类进一步划分为更小的等价类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，输入$x$的取值范围是$0 \sim 10$，输入$y$的取值范围是$-10 \sim -1$，那么可以定义三个等价类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类1：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$-10 \sim -1$；&lt;/li&gt;
&lt;li&gt;无效等价类2：$x$的取值范围是$x &amp;lt; 0 \ \ OR \ \ x &amp;gt; 10$，输入$y$的取值范围是$-10 \sim -1$；&lt;/li&gt;
&lt;li&gt;无效等价类3：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$x &amp;lt; -10 \ \ OR \ \ x &amp;gt; -1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无效等价类的划分：每个无效等价类的测试用例，只违反一个输入的取值范围。如果违反了多个输入的取值范围，那便是不好的测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;边界值分析&lt;/strong&gt;：输入的&lt;u&gt;边界比中间更加容易发生错误&lt;/u&gt;，因此用边界值分析来&lt;u&gt;补充等价类划分的测试用例设计技术&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;边界值划分&lt;u&gt;选择等价类边界的测试用例&lt;/u&gt;，既&lt;u&gt;注重于输入条件边界&lt;/u&gt;，又&lt;u&gt;适用于输出域测试用例&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对边界值设计测试用例应遵循的原则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果&lt;u&gt;输入条件规定了值的范围&lt;/u&gt;，则应取&lt;u&gt;刚达到这个范围的边界的值&lt;/u&gt;，以及&lt;u&gt;刚刚超越这个范围边界的值&lt;/u&gt;作为测试输入数据。&lt;/li&gt;
&lt;li&gt;如果&lt;u&gt;输入条件规定了值的个数&lt;/u&gt;，则用&lt;u&gt;最大个数、最小个数、比最小个数少1、比最大个数多1的数据&lt;/u&gt;作为测试数据。&lt;/li&gt;
&lt;li&gt;根据规格说明的每个输出条件使用上述两条原则。&lt;/li&gt;
&lt;li&gt;如果程序的规格说明给出的&lt;u&gt;输入域或输出域是有序集合&lt;/u&gt;，则应选取&lt;u&gt;集合的第一个元素和最后一个元素&lt;/u&gt;作为测试用例。&lt;/li&gt;
&lt;li&gt;如果程序中使用了一个&lt;u&gt;内部数据结构&lt;/u&gt;，则应当选择这个&lt;u&gt;内部数据结构边界上的值&lt;/u&gt;作为测试用例。&lt;/li&gt;
&lt;li&gt;分析规格说明，找出其他可能的边界条件。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;错误推测&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;因果图&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;白盒测试&#34;&gt;白盒测试&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;白盒测试&lt;/strong&gt;也称为&lt;strong&gt;结构测试&lt;/strong&gt;，&lt;u&gt;根据程序的内部结构和逻辑来设计测试用例&lt;/u&gt;，对程序的路径和过程进行测试，检查是否满足设计的需要。&lt;/p&gt;
&lt;p&gt;白盒测试常用的技术有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑覆盖&lt;/strong&gt;：考察用测试数据运行被测程序时，对程序逻辑的覆盖程度。&lt;/p&gt;
&lt;p&gt;主要的逻辑覆盖标准有6种，它们的覆盖程度从低到高为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语句覆盖&lt;/strong&gt;：指选择足够的测试数据，使&lt;u&gt;被测试程序中的每条语句至少执行一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;语句覆盖对程序执行逻辑的覆盖很低，因此一般认为它是很弱的逻辑覆盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判定覆盖&lt;/strong&gt;（分支覆盖）：指设计足够的测试用例，使得&lt;u&gt;被测程序中的每个判定表达式至少获得一次“真”/“假”值&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;判定覆盖的判定表达式是指判定表达式整体。&lt;/p&gt;
&lt;p&gt;判定覆盖要比语句覆盖更强一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件覆盖&lt;/strong&gt;：指构造一组测试用例，使得&lt;u&gt;每一判定语句中每个逻辑条件的各种可能的值至少满足一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;条件覆盖的判定语句是指判定表达式下的判定语句（如果有），即用&lt;code&gt;AND&lt;/code&gt;、&lt;code&gt;OR&lt;/code&gt;等逻辑运算符连接起来的语句（不包含逻辑运算符的语句）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判定/条件覆盖&lt;/strong&gt;：指设计足够的测试用例，&lt;u&gt;使得判定中每个条件的所有可能取值（真/假）至少出现一次，并使每个判定本身的判定结果（真/假）也至少出现一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;判定/条件覆盖同时满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定覆盖&lt;/li&gt;
&lt;li&gt;条件覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;条件组合覆盖&lt;/strong&gt;：指设计足够的测试用例，使得&lt;u&gt;每个判定中条件的各种可能值的组合都至少出现一次&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;满足条件组合覆盖的测试用例一定满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定覆盖&lt;/li&gt;
&lt;li&gt;条件覆盖&lt;/li&gt;
&lt;li&gt;判定/条件覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径覆盖&lt;/strong&gt;：指&lt;u&gt;覆盖被测试程序中所有可能的路径&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;循环覆盖&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本路径测试&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;白盒测试逻辑覆盖技术总结（覆盖程度从低到高）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;逻辑覆盖&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语句覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每条语句执行一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支（判定）覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个分支获得一次True/False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个分支中的每个逻辑条件的所有可能取值满足一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;判定/条件覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分支覆盖 + 条件覆盖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件组合覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个判定中条件的各种可能值的组合都出现一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;路径覆盖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;覆盖被测试程序中所有可能的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;运行和维护&#34;&gt;运行和维护&lt;/h1&gt;
&lt;p&gt;软件维护是软件生命周期中的最后一个阶段，处于系统投入生产性运行以后的时期中，因此&lt;u&gt;不属于系统开发过程&lt;/u&gt;。&lt;u&gt;软件维护是在软件已经交付使用之后为了改正错误或满足新的需求而修改软件的过程&lt;/u&gt;，即软件在交付使用后对软件所做的一切改动。&lt;/p&gt;
&lt;h2 id=&#34;系统可维护性&#34;&gt;系统可维护性&lt;/h2&gt;
&lt;p&gt;系统的可维护性可以定义为维护人员理解、改正、改动和改进这个软件的难易程度。提高可维护性是开发软件系统所有步骤的关键目的。&lt;u&gt;系统的可维护性可以衡量系统是否能被很好地维护。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;系统可维护性的评价指标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可理解性&lt;/strong&gt;：指别人能理解系统的结构、界面、功能和内部过程的难易程度。&lt;/p&gt;
&lt;p&gt;模块化、详细设计文档、结构化设计和良好的高级程序设计语言等都有助于提高可理解性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可测试性&lt;/strong&gt;：&lt;u&gt;诊断和测试的容易程度取决于易理解的程度。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;好的文档资料有利于诊断和测试；程序的结构、高性能的测试工具以及周密计划的测试工序也是至关重要的。&lt;/p&gt;
&lt;p&gt;在进行系统维护时，应该充分利用在系统测试阶段保存下来的测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可修改性&lt;/strong&gt;：诊断和测试的容易程度与系统设计所制定的设计原则有直接关系。&lt;/p&gt;
&lt;p&gt;模块的耦合、内聚、作用范围与控制范围的关系等都对可修改性有影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;软件文档与软件维护&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;u&gt;软件文档是软件可维护性的决定因素。&lt;/u&gt;文档是软件产品的一部分，并且编写高质量的文档可以提高软件开发的质量。&lt;/p&gt;
&lt;p&gt;软件系统的文档分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户文档&lt;/strong&gt;：主要描述&lt;u&gt;系统功能&lt;/u&gt;和&lt;u&gt;使用方法&lt;/u&gt;，并&lt;u&gt;不关心&lt;/u&gt;这些&lt;u&gt;功能是怎样实现的&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统文档&lt;/strong&gt;：描述&lt;u&gt;系统设计、实现和测试&lt;/u&gt;等各方面的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可维护性是所有软件都应具有的基本特点，必须在开发阶段保证软件具有可维护的特点。在软件工程的每一个阶段都应考虑并提高软件的可维护性，在每个阶段结束前的技术审查和管理复查中应该着重对可维护性进行复审（如将来要改进的部分和可能会修改的部分）。&lt;/p&gt;
&lt;p&gt;维护应该针对整个软件配置，不应该只修改源程序代码。&lt;/p&gt;
&lt;h2 id=&#34;软件维护&#34;&gt;软件维护&lt;/h2&gt;
&lt;p&gt;软件维护主要是指&lt;u&gt;根据需求变化或硬件环境的变化对应用程序进行部分或全部修改&lt;/u&gt;。修改时应充分利用源程序，&lt;u&gt;修改后要填写程序修改登记表&lt;/u&gt;，并&lt;u&gt;在程序变更通知书上写明新旧程序的不同之处&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;软件维护的内容一般有以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正确性维护&lt;/strong&gt;：指&lt;u&gt;改正在系统开发阶段已发生而系统测试阶段尚未发现的错误&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;所发现的错误有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不太重要、不影响系统正常运行的错误，其维护工作可随时进行；&lt;/li&gt;
&lt;li&gt;非常重要的错误，甚至会影响整个系统的正常运行，其维护工作必须制定计划，进行修改，并且要进行复查和控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适应性维护&lt;/strong&gt;：&lt;u&gt;使应用软件适应信息技术变化和管理需求变化而进行的修改。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;完善性维护&lt;/strong&gt;：&lt;u&gt;为扩充功能和改善性能而进行的修改&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是指对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能与性能特征。&lt;/li&gt;
&lt;li&gt;还包括对处理效率和编写程序的改进，关系到系统开发质量的重要方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这方面的维护还要注意将相关的文档资料加入到前面相应的文档中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;预防性维护&lt;/strong&gt;：&lt;u&gt;为了改进应用软件的可靠性和可维护性，为了适应未来的软/硬件环境的变化，应主动增加预防性的新的功能，以使应用系统适应各类变化而不被淘汰。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;例如将专用报表功能改成通用报表生成功能，以适应将来报表格式的变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这4个维护内容中，正确性和完善性维护是针对来自系统内部的维护，适应性和预防性是针对来自系统外部的维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正确性维护针对的是系统内部的错误。&lt;/p&gt;
&lt;p&gt;来自系统内部的，与错误有关的都是属于正确性维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完善性维护针对的是系统内部与功能、性能等方面有关的维护。&lt;/p&gt;
&lt;p&gt;来自系统内部的，与系统功能、性能等方面有关的改善都是完善性维护。完善性维护的需求可以来自外部，例如功能的扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适应性维护是针对来自系统外部的技术、管理需求等方面的变化。&lt;/p&gt;
&lt;p&gt;针对来自系统外部的变化，系统功能等方面没有缺失，仅仅只是适应当前环境变化所做的更改，都是属于适应性维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预防性维护针对的是未来的环境变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;项目管理&#34;&gt;项目管理&lt;/h1&gt;
&lt;h2 id=&#34;沟通路径&#34;&gt;沟通路径&lt;/h2&gt;
&lt;p&gt;沟通图是指项目中人员或部门之间的沟通用一条无向边连接起来，所构成图即为沟通图。沟通图中的路径称为沟通路径。&lt;/p&gt;
&lt;p&gt;软件项目中沟通路径$m$的计算公式（人数$n$）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;沟通图中无主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;沟通图中有主程序员时：&lt;/p&gt;
&lt;p&gt;$$
m = n - 1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件项目估算&#34;&gt;软件项目估算&lt;/h2&gt;
&lt;p&gt;软件项目估算涉及人、技术、环境等多种因素，很难在项目完成前准确地估算出开发软件所需的成本、持续时间和工作量。所以需要一些方法和技术来支持项目的估算，常用的估算方法有下列3种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于已经完成的类似项目进行估算（常用）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于分解技术进行估算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于经验估算模型的估算。&lt;/p&gt;
&lt;p&gt;典型的经验估算模型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM估算模型&lt;/li&gt;
&lt;li&gt;CoCoMo模型&lt;/li&gt;
&lt;li&gt;Putnam模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述方法可以组合使用，以提高估算的精度。&lt;/p&gt;
&lt;h3 id=&#34;cocomo-估算模型&#34;&gt;COCOMO 估算模型&lt;/h3&gt;
&lt;p&gt;COCOMO模型是一种精确的、易于使用的成本估算模型。COCOMO模型按其详细程度分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本COCOMO模型&lt;/strong&gt;：是一个&lt;u&gt;静态单变量模型&lt;/u&gt;，用于对整个软件系统进行估算。&lt;/p&gt;
&lt;p&gt;公式如下：&lt;/p&gt;
&lt;p&gt;$$
E = a(L)^b \\
D=cE^d
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E$：工作量，单位是人月；&lt;/li&gt;
&lt;li&gt;$D$：开发时间，单位是月；&lt;/li&gt;
&lt;li&gt;$L$：项目的源代码行估计值，不包括程序中的注释及文档，其单位是千行代码；&lt;/li&gt;
&lt;li&gt;$a$、$b$、$c$、$d$：常数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本COCOMO模型可通过估算代码行的值$L$，然后计算开发工作量$E$和开发时间$D$的估算值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中级COCOMO模型&lt;/strong&gt;：是一个&lt;u&gt;静态多变量模型&lt;/u&gt;，它&lt;u&gt;将软件系统模型分为系统和部件两个层次&lt;/u&gt;，系统由部件构成，它把软件开发所需的人力（成本）看作是程序大小和一系列“成本驱动属性”的函数。&lt;/p&gt;
&lt;p&gt;中级COCOMO模型以基本COCOMO模型为基础，并考虑了15种影响软件工作量的因素，通过工作量调节因子（EAF）修正对工作量的估算，从而使估算更合理。其公式如下：&lt;/p&gt;
&lt;p&gt;$$
E = a(L)^b \cdot EAF
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$L$：软件产品的目标代码行数，单位是千行代码数；&lt;/li&gt;
&lt;li&gt;$EAF$：工作量调节因子；&lt;/li&gt;
&lt;li&gt;$a$、$b$：常数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;详细COCOMO模型&lt;/strong&gt;：&lt;u&gt;将软件系统模型分为系统、子系统和模块3个层次&lt;/u&gt;，除包括中级模型所考虑的因素外，还考虑了在需求分析、软件设计等每一步的成本驱动属性的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cocomoii模型&#34;&gt;COCOMOII模型&lt;/h3&gt;
&lt;p&gt;和其前身COCOMO一样，COCOMOII也是一种层次结构的估算模型，被分为3个阶段性模型，分别对应三种不同的规模估算选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用组装模型&lt;/strong&gt;：在软件工程的前期阶段使用，这时用户界面的原型开发、对软件和系统交互的考虑、性能的评估以及技术成熟度的评价是最重要的。&lt;/p&gt;
&lt;p&gt;规模估算选择：&lt;strong&gt;对象点&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;早期设计阶段模型&lt;/strong&gt;：在需求己经稳定并且基本的软件体系结构己经建立时使用。&lt;/p&gt;
&lt;p&gt;规模估算选择：&lt;strong&gt;功能点&lt;/strong&gt;。功能点可转换为代码行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;体系结构阶段模型&lt;/strong&gt;：在软件的构造过程中使用。&lt;/p&gt;
&lt;p&gt;规模估算选择：&lt;strong&gt;代码行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结-2&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;COCOMO模型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模型分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型或说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态单变量模型，对整个软件系统进行估算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中级COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态多变量模型，将系统模型分为系统和部件2个层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;详细COCOMO模型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将系统模型分为系统、子系统和模块3个层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;COCOMOII&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;层次结构，分为应用组装模型、早期设计阶段模型和体系结构阶段模型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;COCOMOII的使用时期及规模估算选择：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段性模型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;规模估算选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用组装模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;早期设计阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;功能点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;体系结构阶段模型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代码行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;进度管理&#34;&gt;进度管理&lt;/h2&gt;
&lt;p&gt;进度安排：&lt;/p&gt;
&lt;p&gt;为监控软件项目的进度计划和工作的实际进展情况，表示各项任务之间进度的相互依赖关系，需要采用图示的方法。在图中明确标明如下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各个任务的&lt;u&gt;计划开始时间&lt;/u&gt;和&lt;u&gt;计划完成时间&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;各个任务的&lt;u&gt;完成标志&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;各个任务与&lt;u&gt;参与工作的人数&lt;/u&gt;，各个任务与&lt;u&gt;工作量之间的衔接情况&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;完成各个任务所需的&lt;u&gt;物理资源&lt;/u&gt;和&lt;u&gt;数据资源&lt;/u&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进度安排的常用图形描述方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gantt图（甘特图）；&lt;/li&gt;
&lt;li&gt;项目计划评审技术（Program Evaluation&amp;amp;Review Technique，PERT）图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gantt图&#34;&gt;Gantt图&lt;/h3&gt;
&lt;p&gt;Gantt图：一种&lt;u&gt;简单的水平条形图&lt;/u&gt;，它&lt;u&gt;以日历为基准&lt;/u&gt;描述项目任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;垂直轴：表示&lt;u&gt;多个不同的任务&lt;/u&gt;，每个任务按照左侧任务名称垂直排列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平轴：表示&lt;u&gt;日历时间线&lt;/u&gt;（如时、天、周、月和年等）。&lt;/p&gt;
&lt;p&gt;每个水平条表示一个任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一水平条的&lt;u&gt;起点&lt;/u&gt;：表示该任务的&lt;u&gt;开始时间&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;每一水平条的&lt;u&gt;终点&lt;/u&gt;：表示该任务的&lt;u&gt;结束时间&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;每一水平条的&lt;u&gt;长度&lt;/u&gt;：表示&lt;u&gt;完成该任务的持续时间&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当日历中同一时段存在多个水平条时，表示任务之间的并发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683683731050.png&#34;
	width=&#34;795&#34;
	height=&#34;282&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683683731050_hu977eb3a1b8bea533db1ac3601076cb83_32011_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683683731050_hu977eb3a1b8bea533db1ac3601076cb83_32011_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Gantt图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;676px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gantt图优点：&lt;/p&gt;
&lt;p&gt;能清晰地描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个任务的开始时间；&lt;/li&gt;
&lt;li&gt;每个任务的结束时间；&lt;/li&gt;
&lt;li&gt;任务的进展情况；&lt;/li&gt;
&lt;li&gt;各个任务之间的并行性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gantt图缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能清晰地反映各任务之间的&lt;u&gt;依赖关系&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;难以确定&lt;u&gt;整个项目的关键所在&lt;/u&gt;，即不能清晰地确定影响进度的&lt;u&gt;关键任务&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;不能反映&lt;u&gt;计划中有潜力的部分&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pert图&#34;&gt;PERT图&lt;/h3&gt;
&lt;p&gt;PERT图是一个&lt;u&gt;有向图&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弧&lt;/strong&gt;：表示&lt;strong&gt;任务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;任务包含以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;完成该任务所需的时间&lt;/u&gt;（任务持续时间）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;松弛时间&lt;/u&gt;（Slack Time）：表示在&lt;u&gt;不影响整个工期的前提下完成该任务有多少机动余地&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即松弛时间指当前任务的工期可以推迟的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空任务：用虚线箭头表示，表示任务间的关系所添加。完成空任务的所需时间为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结点&lt;/strong&gt;：表示&lt;strong&gt;事件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事件是流入结点的任务的结束，或流出结点的任务的开始。事件&lt;u&gt;表示某个时间点&lt;/u&gt;，本身不消耗时间和资源。&lt;/p&gt;
&lt;p&gt;事件包含以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件号。&lt;/li&gt;
&lt;li&gt;出现该事件的&lt;strong&gt;最早时刻&lt;/strong&gt;：表示在此时刻之前从该事件出发的任务不可能开始。&lt;/li&gt;
&lt;li&gt;出现该事件的&lt;strong&gt;最迟时刻&lt;/strong&gt;：表示从该事件出发的任务最迟在此时刻开始，否则整个工程就不能如期完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;只有当流入该结点的所有任务都结束时，结点所表示的事件才出现，流出结点的任务才可以开始。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;特殊的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始事件：没有任何任务流向该事件；&lt;/li&gt;
&lt;li&gt;结束事件：没有任务任务从该事件流出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个项目是从开始事件开始到结束事件结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683684995281.png&#34;
	width=&#34;850&#34;
	height=&#34;490&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683684995281_hube9164e5138fcdde7e8eebfa04856a94_71059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683684995281_hube9164e5138fcdde7e8eebfa04856a94_71059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$T(e)$：完成任务$e$的所需时间；&lt;/li&gt;
&lt;li&gt;$T_s(e)$：完成任务$e$的松弛时间；&lt;/li&gt;
&lt;li&gt;$T_e(v)$：事件$v$的最早时刻；&lt;/li&gt;
&lt;li&gt;$T_l(v)$：事件$v$的最迟时刻。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PERT图各成分取值（不一定需要满足下面的关系，但是可以用下面的式子推出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事件$V_{in}$的&lt;u&gt;最早时刻&lt;/u&gt;$T_e(V_{in})$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有一个任务流入时，设该任务的流出事件为$V_{out}$，则该任务为$&amp;lt;V_{out}, V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{in}) = T_e(V_{out}) + T
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将$T(&amp;lt;V_{out}, V_{in}&amp;gt;)$简写为了$T$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：&lt;u&gt;该流入任务的流出事件的最早时刻&lt;/u&gt; + &lt;u&gt;完成该流入任务的所需时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个任务流入时，设与每个任务相对应的流出事件为$V_{out}[ \ i \ ]$，则这些任务为$&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{in}) = Max(T_e(V_{out}[ \ i \ ]) + T_i)
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将$T(&amp;lt;V_{out}[ \ i \ ], V_{in}&amp;gt;)$简写为了$T_i$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即&lt;u&gt;流入该事件的每个任务计算出的最早时刻的最大值&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始事件$V_{start}$：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_{start}) = 0
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件$V_{out}$的&lt;u&gt;最迟时刻&lt;/u&gt;$T_l(V_{out})$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有一个任务流出时，设该任务的流入事件为$V_{in}$，则该任务为$&amp;lt;V_{out}, V_{in}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = T_l(V_{in}) - (T + T_s)
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将$T_s(&amp;lt;V_{out}, V_{in}&amp;gt;)$简写为$T_s$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：&lt;u&gt;该流出任务的流入事件的最迟时刻&lt;/u&gt; -（&lt;u&gt;该流出任务的所需时间&lt;/u&gt; + &lt;u&gt;松弛时间&lt;/u&gt;）。&lt;/p&gt;
&lt;p&gt;如果松弛时间未知或为0：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = T_l(V_{in}) - T
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个任务流出时，设与每个任务相对应的流入事件为$V_{in}[ \ i \ ]$，则这些任务为$&amp;lt;V_{out}, V_{in}[ \ i \ ]&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - (T_i + S_i))
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里把$T(&amp;lt;V_{out}, V_{in}[ \ i \ ]&amp;gt;)$简写为$T_i$，把$T_s(&amp;lt;V_{out}, V_{in}[ \ i \ ]&amp;gt;)$简写为$S_i$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即&lt;u&gt;流出该事件的每个任务计算出的最晚时刻的最大值&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如果松弛时间未知或为0：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - T_i)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结束事件$V_{end}$：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_{end}) = T_e(V_{end})
$$&lt;/p&gt;
&lt;p&gt;即&lt;u&gt;结束事件的最早时刻与最迟时刻相等&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设某任务的流入事件为$V_{in}$，流出事件为$V_{out}$，则该任务$&amp;lt;V_{out}, V_{in}&amp;gt;$的&lt;u&gt;松弛时间&lt;/u&gt;$T_s(&amp;lt;V_{out}, V_{in}&amp;gt;)$。&lt;/p&gt;
&lt;p&gt;$$
T_s = T_l(V_{in}) - T - T_e(V_{out})
$$&lt;/p&gt;
&lt;p&gt;即，该任务的流入事件的最迟时刻 - 该任务的所需时间 - 该任务的流出事件的最早时刻&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683719224977.png&#34;
	width=&#34;931&#34;
	height=&#34;341&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683719224977_hu89f160ee9e5081c0094ce31c4ac579dc_24904_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683719224977_hu89f160ee9e5081c0094ce31c4ac579dc_24904_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图公式参照图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;273&#34;
		data-flex-basis=&#34;655px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;PERT图的路径：从开始事件到结束事件的一条通路。&lt;/p&gt;
&lt;p&gt;PERT图的&lt;strong&gt;关键路径&lt;/strong&gt;：指&lt;u&gt;所有的任务的松弛时间都为0的路径&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;关键路径的长度：指结束事件的最早（或最晚）时刻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683706944555.png&#34;
	width=&#34;785&#34;
	height=&#34;457&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683706944555_hu5ed56fd45a79614d457188c6e9a3a0a9_48481_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683706944555_hu5ed56fd45a79614d457188c6e9a3a0a9_48481_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PERT图的关键路径示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;关键路径的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有任务的松弛时间都为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个事件的最早时刻和最迟时刻都是相等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有任务持续时间的和，是PERT图所有路径中最大的，并且与结束事件的最早时刻（或最晚时刻）相等。&lt;/p&gt;
&lt;p&gt;设关键路径中所有事件为$V_i$（$i = 1, 2, \cdots, n$），且该路径下的任务为$&amp;lt;V_j, V_{j+1}&amp;gt;$（$1 \le j \le n-1$）（表示$V_1$是开始事件，$V_2$是$V_1$往下的一个事件，以此类推，$V_n$是结束事件），那么该关键路径结束事件的最早时刻（或最晚时刻）为：&lt;/p&gt;
&lt;p&gt;$$
T_e(V_n) = \sum_{i = 1}^{n-1} T_i
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里$T_i$代表$T(&amp;lt;V_i, V_{i+1}&amp;gt;)$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最迟时刻的另一种求法（PERT图存在关键路径的情况下）：&lt;/p&gt;
&lt;p&gt;已知某PERT图结束事件的最晚时刻（最早时刻），该PERT图中某一条路径（假设该路径没有分支）中所有事件为$V_j$（$j = 1, 2, \cdots, n$），且该路径下的任务为$&amp;lt;V_k, V_{k+1}&amp;gt;$（$1 \le k \le n-1$），该路径下任务的持续时间$T(&amp;lt;V_{k-1}, V_k&amp;gt;)$已知，（即$V_1$是开始事件，按照次序往下，$V_n$是结束事件），计算某一事件的最迟时刻$T_l(V_i)$（$1 \le i &amp;lt; n$）：&lt;/p&gt;
&lt;p&gt;$$
T_l(V_i) = T_l(V_n) - \sum_{j = i}^{n - 1} T_j
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里$T_j$代表$T(&amp;lt;V_j, V_{j + 1}&amp;gt;)$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：&lt;u&gt;结束事件的最晚时刻&lt;/u&gt; - &lt;u&gt;该事件到结束事件之间所有的任务的持续时间总和&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果事件$V_i$到结束事件之间存在多条路径，应该选择那条任务持续时间总和最大的路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PERT图的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出了每个任务的开始时间、结束时间和完成该任务所需的时间；&lt;/li&gt;
&lt;li&gt;给出了任务之间的关系（依赖关系）。即任务之间的执行顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PERT图不能清晰地描述任务之间的并行情况。&lt;/p&gt;
&lt;h3 id=&#34;项目活动图&#34;&gt;项目活动图&lt;/h3&gt;
&lt;p&gt;项目活动图是一种有向图（与PERT图十分类似）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;弧：表示活动。弧的权值表示活动的持续时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顶点：表示项目里程碑。&lt;/p&gt;
&lt;p&gt;特殊的里程碑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始里程碑：没有任何活动指向该里程碑；&lt;/li&gt;
&lt;li&gt;结束里程碑：没有任何活动从该里程碑指出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目活动图的关键路径：按照PERT图的方法求出松弛时间为0的、从开始里程碑到结束里程碑的路径。&lt;/p&gt;
&lt;p&gt;关键路径的长度：为结束里程碑的最早时刻（或最晚时刻）。它可以用来表示项目完成的最少时间。&lt;/p&gt;
&lt;h2 id=&#34;软件配置管理&#34;&gt;软件配置管理&lt;/h2&gt;
&lt;p&gt;在软件开发过程中变更是不可避免的，而变更时由于没有进行变更控制，可能加剧了项目中的混乱。为了协调软件开发使得混乱减到最小，使用配置管理技术，使变更所产生的错误达到最小并最有效地提高生产率。&lt;/p&gt;
&lt;p&gt;软件配置管理（Software Configure Management，SCM）用于整个软件工程过程，它是一组管理整个软件生存周期中各阶段变更的活动。&lt;/p&gt;
&lt;p&gt;软件配置管理的主要目标包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标识变更&lt;/li&gt;
&lt;li&gt;控制变更&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;确保变更正确地实现&lt;/li&gt;
&lt;li&gt;报告有关变更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要内容有两种版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;版本管理&lt;/li&gt;
&lt;li&gt;配置支持&lt;/li&gt;
&lt;li&gt;变更支持&lt;/li&gt;
&lt;li&gt;过程支持&lt;/li&gt;
&lt;li&gt;团队支持&lt;/li&gt;
&lt;li&gt;变化报告&lt;/li&gt;
&lt;li&gt;审计支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;软件配置标识&lt;/li&gt;
&lt;li&gt;变更管理&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;系统建立&lt;/li&gt;
&lt;li&gt;配置审核&lt;/li&gt;
&lt;li&gt;配置状态报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;变更控制&#34;&gt;变更控制&lt;/h3&gt;
&lt;p&gt;变更控制是一项最重要的软件配置任务。为了有效地实现变更控制，需借助于配置数据库和基线的概念。&lt;/p&gt;
&lt;p&gt;基线：是软件生存周期中各开发阶段的一个特定点，它的作用是使各开发阶段的工作划分更加明确，使本来连续的工作在这些点上断开，以便于检查与肯定阶段成果。&lt;/p&gt;
&lt;p&gt;基线可以作为一个检查点。在开发过程中，当采用的基线发生错误时可以知道所处的位置，返回到最近和最恰当的基线上。&lt;/p&gt;
&lt;p&gt;配置数据库可分为以下3类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开发库&lt;/strong&gt;：专供开发人员使用，其中的信息可能做频繁修改，对其控制相当宽松。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;受控库&lt;/strong&gt;：在生存期某一阶段工作结束时发布的阶段产品，这些是与软件开发工作相关的计算机可读信息和人工可读信息。&lt;/p&gt;
&lt;p&gt;软件配置管理正是对受控库中的各个软件项进行管理，受控库也称为&lt;strong&gt;软件配置库&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;产品库&lt;/strong&gt;：在开发的软件产品完成系统测试后，作为最终产品存入产品库，等待交付用户或现场安装。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;风险管理&#34;&gt;风险管理&lt;/h3&gt;
&lt;p&gt;一般认为软件风险包含两个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不确定性&lt;/strong&gt;：指风险可能发生也可能不发生；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损失&lt;/strong&gt;：指如果风险发生，就会产生恶性后果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在进行风险分析时，重要的是量化每个风险的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不确定程度&lt;/li&gt;
&lt;li&gt;损失程度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目风险威胁到项目计划。项目风险是指以下各方面的潜在问题以及它们对软件项目的影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预算&lt;/li&gt;
&lt;li&gt;进度&lt;/li&gt;
&lt;li&gt;人员：聘用职员及组织&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;li&gt;利益相关者&lt;/li&gt;
&lt;li&gt;需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下方面的不确定性也属于项目风险因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目复杂度&lt;/li&gt;
&lt;li&gt;项目规模&lt;/li&gt;
&lt;li&gt;项目结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术风险威胁到要开发软件的质量及交付时间。技术风险是指以下方面的潜在问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;验证&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下方面也属于技术风险因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规格说明的歧义性&lt;/li&gt;
&lt;li&gt;技术的不确定性&lt;/li&gt;
&lt;li&gt;技术陈旧&lt;/li&gt;
&lt;li&gt;“前沿”技术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商业风险威肋到要开发软件的生存能力，且常常会危害到项目或产品。5个主要的商业风险如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;市场风险&lt;/strong&gt;：开发了一个没有人真正需要的优良产品或系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略风险&lt;/strong&gt;：开发的产品不再符合公司的整体商业策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;销售风险&lt;/strong&gt;：开发了一个销售部门不知道如何去销售的产品。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理风险&lt;/strong&gt;：由于重点的转移或人员的变动而失去了高级管理层的支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预算风险&lt;/strong&gt;：没有得到预算或人员的保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Charette提出的风险分类方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;己知风险&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;通过仔细&lt;u&gt;评估以下内容可以发现&lt;/u&gt;的风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;项目计划&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开发项目的商业和技术环境&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;其他可靠的信息来源，如：
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;不现实的交付时间&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;没有文档化需求或文档化软件范围&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;恶劣的开发环境&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可预测风险&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;能够&lt;u&gt;从过去项目的经验中推断出来&lt;/u&gt;的风险，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人员变动&lt;/li&gt;
&lt;li&gt;与客户缺乏沟通&lt;/li&gt;
&lt;li&gt;由于正在进行维护而使开发人员精力分散&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不可预测风险&lt;/strong&gt;：可能会真的出现，但&lt;u&gt;很难事先识别&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;风险识别&#34;&gt;风险识别&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;风险识别&lt;/strong&gt;试图&lt;u&gt;系统化地指出对项目计划（估算、进度、资源分配等）的威胁&lt;/u&gt;。&lt;u&gt;识别出已知风险和可预测风险后，项目管理者&lt;/u&gt;首先要做的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;在可能时回避这些风险&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;在必要时控制这些风险&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;识别风险的一种方法是&lt;u&gt;建立风险条目检查表&lt;/u&gt;，主要用来识别下列几种类型中的一些已知风险和可预测风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;产品规模&lt;/strong&gt;：与要开发或要修改的软件的总体规模相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;商业影响&lt;/strong&gt;：与管理者或市场所施加的约束相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户特性&lt;/strong&gt;：与客户的素质以及开发者和客户定期沟通的能力相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过程定义&lt;/strong&gt;：与软件过程定义的程度以及该过程被开发组织遵守的程度相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发环境&lt;/strong&gt;：与用来开发产品的工具的可得性及质量相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发技术&lt;/strong&gt;：与待开发软件的复杂性及系统所包含技术的“新奇性”相关的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人员才干及经验&lt;/strong&gt;：与软件工程师的总体技术水平及项目经验相关的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与上述每个主题相关的问题可以针对每一个软件项目来回答。根据这些问题的答案，项目管理者就可以估计风险产生的影响。&lt;/p&gt;
&lt;p&gt;另一种风险条目检查表格式：仅仅列出与每一种类型有关的特性，最终给出&lt;u&gt;一组风险因素和驱动因子以及它们发生的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;风险因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：性能风险是指产品能够满足需求且符合其使用目的的不确定程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本&lt;/strong&gt;：成本风险是指能够维持项目预算的不确定程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持&lt;/strong&gt;：支特风险是指开发出的软件易于纠错、修改及升级的不确定程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进度&lt;/strong&gt;：进度风险是指能够维持项目进度且按时交付产品的不确定程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;风险预测&#34;&gt;风险预测&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;风险预测&lt;/strong&gt;又称&lt;strong&gt;风险估计&lt;/strong&gt;，它试图从两个方面评估一个风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风险发生的可能性或概率；&lt;/li&gt;
&lt;li&gt;发生风险所产生的后果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，项日计划人员与管理人员、技术人员一起进行以下4步&lt;u&gt;风险预测活动&lt;/u&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立一个尺度或标准，以反映风险发生的可能性。&lt;/li&gt;
&lt;li&gt;描述风险产生的后果。&lt;/li&gt;
&lt;li&gt;估算风险对项目和产品的影响。&lt;/li&gt;
&lt;li&gt;标注风险预测的整体精确度，以免产生误解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一种简单的风险预测技术是建立风险表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第1列：列出所有的风险（由风险识别活动得到)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第2~4列：列出每个风险的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;种类&lt;/li&gt;
&lt;li&gt;发生的概率&lt;/li&gt;
&lt;li&gt;所产生的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;风险所产生的影响可用一个数字来表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“1”：表示灾难性的；&lt;/li&gt;
&lt;li&gt;“2”：表示严重的；&lt;/li&gt;
&lt;li&gt;“3”：表示轻微的；&lt;/li&gt;
&lt;li&gt;“4”：表示可忽略的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;评估风险影响：&lt;/p&gt;
&lt;p&gt;发生风险时，有3个因素可能会影响风险所产生的后果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;风险的&lt;strong&gt;本质&lt;/strong&gt;：指当风险发生时可能带来的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险的&lt;strong&gt;范围&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风险的严重性；&lt;/li&gt;
&lt;li&gt;风险的整体分布情况：项目中有多少部分受到影响或有多少客户受到损害。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险的&lt;strong&gt;时间&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何时能够感受到风险的影响；&lt;/li&gt;
&lt;li&gt;风险的影响会持续多长时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;风险优先级&#34;&gt;风险优先级&lt;/h4&gt;
&lt;p&gt;在进行项目风险管理时，根据风险的优先级来确定风险控制策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;风险优先级&lt;/strong&gt;：&lt;u&gt;是根据风险暴露来确定的。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险暴露&lt;/strong&gt;：是一种量化风险影响的指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体的风险显露度（Risk Exposure，RE）可由下面的关系确定：&lt;/p&gt;
&lt;p&gt;$$
RE = P \times C
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P$：风险发生的概率；&lt;/li&gt;
&lt;li&gt;$C$:风险发生时带来的项目成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即风险暴露等于风险影响乘以风险概率。风险影响是指当风险发生时造成的损失。&lt;/p&gt;
&lt;h4 id=&#34;风险评估&#34;&gt;风险评估&lt;/h4&gt;
&lt;p&gt;在进行风险评估时，建立了如下形式的三元组：&lt;/p&gt;
&lt;p&gt;$$
(r_i, l_i, x_i)
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$r_i$：表示风险；&lt;/li&gt;
&lt;li&gt;$l_i$：表示风险发生的概率；&lt;/li&gt;
&lt;li&gt;$x_i$：表示风险产生的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种对风险评估很有用的技术就是&lt;u&gt;定义风险参照水准&lt;/u&gt;。对于大多数软件项目来说，有3种典型的风险参照水准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成本：成本是否超支&lt;/li&gt;
&lt;li&gt;进度：进程是否延期&lt;/li&gt;
&lt;li&gt;性能：性能是否下降&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在风险评估过程中，需要执行以下4个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义项目的风险参考水平值。&lt;/li&gt;
&lt;li&gt;建立每一组$(r_i, l_i, x_i)$与每一个参考水平值之间的关系。&lt;/li&gt;
&lt;li&gt;预测一组临界点以定义项目终止区域，该区域由一条曲线或不确定区域所界定。&lt;/li&gt;
&lt;li&gt;预测什么样的风险组合会影响参考水平值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;风险控制&#34;&gt;风险控制&lt;/h4&gt;
&lt;p&gt;风险控制的目的是&lt;u&gt;辅助项目组建立处理风险的策略&lt;/u&gt;。一个有效的策略必须考虑以下3个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;风险避免&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;应对风险的&lt;u&gt;最好办法是主动地避免风险&lt;/u&gt;，即&lt;u&gt;在风险发生前分析引起风险的原因，然后采取措施，以避免风险的发生&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;风险监控&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;项目管理者应监控某些因素，这些因素可以提供风险是否正在变高或变低的指示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RMMM计划：&lt;/p&gt;
&lt;p&gt;风险管理策略可以包含在软件项目计划中，或者风险管理步骤也可以组织成一个独立的风险缓解、监控和管理计划（RMMM计划）。&lt;/p&gt;
&lt;p&gt;RMMM计划将所有风险分析工作文档化，并由项目管理者作为整个项目计划中的一部分来使用。&lt;/p&gt;
&lt;p&gt;建立了RMMM计划，而且项目己经启动之后，风险缓解及监测步骤也就开始了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;风险缓解：一种问题规避活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险监测：一种项目跟踪活动。&lt;/p&gt;
&lt;p&gt;这种监测活动有3个主要目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;评估所预测的风险是否真的发生了；&lt;/li&gt;
&lt;li&gt;保证正确地实施了各风险的缓解步骤；&lt;/li&gt;
&lt;li&gt;收集能够用于今后风险缝隙的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;风险监测的另一个任务就是试图找到“起源”（在整个项目中是哪些风险引起了哪些问题）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结-3&#34;&gt;总结&lt;/h4&gt;
&lt;p&gt;风险分类总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;威胁到项目计划。&lt;p&gt;风险因素：&lt;br&gt;预算、进度、人员、资源和利益相关者，项目复杂度、规模和结构的不确定性&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;技术风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;威胁到软件的质量及交付时间。&lt;p&gt;风险因素：&lt;br&gt;设计、实现、接口、验证和维护，规格说明的歧义性、技术的不确定性、技术陈旧和使用“前沿”技术&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;市场风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发了一个没有人真正需要的产品或系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发的产品不再符合公司的整体商业策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;销售风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发了一个销售部门不知道如何去销售的产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;管理风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;由于重点的转移或人员的变动而失去了高级管理层的支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;预算风险&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有得到预算或人员的保证。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;风险管理总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;风险管理&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险识别&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指出对项目计划的威胁。可通过建立风险条目检查表识别。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险预测&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从风险发生的可能性或概率、风险产生的后果评估可能发生的风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险评估&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从风险发生的概率和产生的影响评估风险。可用定义风险参照水准技术评估。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;目的是辅助项目建立处理风险的策略。策略是风险避免、风险监控和RMMM计划。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险避免&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应对风险的最好办法是主动地避免风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;风险监控&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;项目管理者应监控某些可以提供风险高低变化指示的因素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件质量&#34;&gt;软件质量&lt;/h1&gt;
&lt;h2 id=&#34;软件质量特性的度量&#34;&gt;软件质量特性的度量&lt;/h2&gt;
&lt;p&gt;可靠性、可用性和可维护性是软件的质量属性，软件工程中，用$0 \sim 1$之间的数来度量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可靠性：指一个系统对于&lt;u&gt;给定的时间间隔内、在给定条件下无失效运作的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用$\cfrac{MTTF}{1+MTTF}$来度量。&lt;/p&gt;
&lt;p&gt;$MTTF$为&lt;u&gt;平均无故障时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可用性：指&lt;u&gt;在给定的时间点上&lt;/u&gt;，一个&lt;u&gt;系统能够按照规格说明正确运作的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用$\cfrac{MTBF}{1+MTBF}$来度量。&lt;/p&gt;
&lt;p&gt;$MTBF$为&lt;u&gt;平均失效间隔时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可维护性：&lt;u&gt;在给定的使用条件下，在规定的时间间隔内，使用规定的过程和资源完成维护活动的概率&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用$\cfrac{1}{1+MTTR}$来度量。&lt;/p&gt;
&lt;p&gt;$MTTR$为&lt;u&gt;平均修复时间&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;质量属性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;度量公式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可靠性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;p&gt;$\cfrac{MTTF}{1+MTTF}$&lt;/p&gt;&lt;p&gt;$MTTF$：平均无故障时间&lt;/p&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定时间间隔内、给定条件下，无失效运作的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;p&gt;$\cfrac{MTBF}{1+MTBF}$&lt;/p&gt;&lt;p&gt;$MTBF$：平均失效间隔时间&lt;/p&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定时间点上、能按照规格说明正确运作的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可维护性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;p&gt;$\cfrac{1}{1+MTTR}$&lt;/p&gt;&lt;p&gt;$MTTR$：平均修复时间&lt;/p&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定使用条件下、规定时间间隔内，使用规定过程和资源完成维护的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;软件质量模型&#34;&gt;软件质量模型&lt;/h2&gt;
&lt;p&gt;讨论软件质量首先要了解软件的质量特性，目前己经有多种软件质量模型来描述软件质量特性，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISO/IEC 9126 软件质量模型&lt;/li&gt;
&lt;li&gt;Me Call 软件质量模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;isoiec-9126-软件质量模型&#34;&gt;ISO/IEC 9126 软件质量模型&lt;/h3&gt;
&lt;p&gt;ISO/IEC 9126软件质量模型由3个层次组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层：&lt;strong&gt;质量特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二层：&lt;strong&gt;质量子特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三层：&lt;strong&gt;度量指标&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该模型的质量特性和质量子特性：&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        质量特性
    &lt;/th&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        质量子特性
    &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;6&#34;&gt;
        &lt;b&gt;功能性&lt;/b&gt;（Functionality）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        适合性（Suitability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        准确性（Accurateness）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        互用性（Interoperability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        依从性（Compliance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        安全性（Security）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
        &lt;b&gt;可靠性&lt;/b&gt;（Reliability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        成熟性（Maturity）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        容错性（Fault tolerance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易恢复性（Recoverability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;4&#34;&gt;
        &lt;b&gt;易使用性&lt;/b&gt;（Usability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易理解性（Understandability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易学性（Learnability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易操作性（Operability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;3&#34;&gt;
        &lt;b&gt;效率&lt;/b&gt;（Efficiency）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        时间特性（Time behavior）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        资源特性（Resource behavior）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
        &lt;b&gt;可维护性&lt;/b&gt;（Maintainability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易分析性（Analyzability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易改变性（Changeability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        稳定性（Stability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易测试性（Testability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34; rowspan=&#34;5&#34;&gt;
        &lt;b&gt;可移植性&lt;/b&gt;（Portability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        适应性（Adaptability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易安装性（Installability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        一致性（Conformance）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
        易替换性（Replaceability）
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;质量子特性的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适合性&lt;/strong&gt;：与对规定任务能否提供一组功能以及这组功能是否适合有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准确性&lt;/strong&gt;：与能够得到正确或相符的结果或效果有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;互用性&lt;/strong&gt;：&lt;u&gt;与其他指定系统进行交互操作&lt;/u&gt;的能力相关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依从性&lt;/strong&gt;：&lt;u&gt;使软件服从有关的标准、约定、法规及类似规定&lt;/u&gt;的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：与避免对程序及数据的非授权故意或意外访问的能力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成熟性&lt;/strong&gt;：与由软件故障引起失效的频度有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：与&lt;u&gt;在软件错误或违反指定接口的情况下维持指定的性能水平&lt;/u&gt;的能力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易恢复性&lt;/strong&gt;：与&lt;u&gt;在故障发生后，重新建立其性能水平并恢复直接受影响数据&lt;/u&gt;的能力，以及为达到此目的所需的时间和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;易使用性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易理解性&lt;/strong&gt;：与用户为理解逻辑概念及其应用所付出的劳动有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易学性&lt;/strong&gt;：与用户为学习其应用（例如操作控制、输入、输出）所付出的努力相关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易操作性&lt;/strong&gt;：与用户为进行操作和操作控制所付出的努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;效率：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间特性&lt;/strong&gt;：与响应和处理时间以及软件执行其功能时的吞吐量有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源特性&lt;/strong&gt;：与软件执行其功能时，所使用的资源量以及使用资源的持续时间有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可维护性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易分析性&lt;/strong&gt;：与为诊断缺陷或失效原因，或为判定待修改的部分所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易改变性&lt;/strong&gt;：与进行修改、排错或适应环境变换所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：与修改造成未预料效果的风险有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易测试性&lt;/strong&gt;：为确认经修改软件所需努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可移植性：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;适应性&lt;/strong&gt;：与软件转移到不同环境时的处理或手段有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易安装性&lt;/strong&gt;：与在指定环境下安装软件所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：使软件服从与可移植性有关的标准或约定的软件属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易替换性&lt;/strong&gt;：与一软件在该软件环境中用来替代指定的其他软件的可能和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mc-call-软件质量模型&#34;&gt;Mc Call 软件质量模型&lt;/h3&gt;
&lt;p&gt;Mc Call软件质量模型从以下3个方面确定了11个质量特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件产品的&lt;strong&gt;运行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;软件产品的&lt;strong&gt;修正&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;软件产品的&lt;strong&gt;转移&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mc Call也给出了一个三层模型框架：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层：&lt;strong&gt;质量特性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二层：&lt;strong&gt;评价准则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三层：&lt;strong&gt;度量指标&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683794894507.png&#34;
	width=&#34;533&#34;
	height=&#34;379&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683794894507_hu9949eda818815c80ae75952e8d8a159a_51224_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683794894507_hu9949eda818815c80ae75952e8d8a159a_51224_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Mc Call 软件质量模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;软件质量保证&#34;&gt;软件质量保证&lt;/h2&gt;
&lt;p&gt;软件质量保证是指为保证软件系统或软件产品充分满足用户要求的质量而进行的有计划、有组织的活动，其目的是生产高质量的软件。&lt;/p&gt;
&lt;p&gt;软件质量保证包括了与以下7个主要活动相关的各种任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用技术方法&lt;/li&gt;
&lt;li&gt;进行正式的技术评审&lt;/li&gt;
&lt;li&gt;测试软件&lt;/li&gt;
&lt;li&gt;标准的实施&lt;/li&gt;
&lt;li&gt;控制变更&lt;/li&gt;
&lt;li&gt;度量（Metrics）&lt;/li&gt;
&lt;li&gt;记录保存和报告&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件评审&#34;&gt;软件评审&lt;/h3&gt;
&lt;p&gt;通常，把“质量”理解为“用户满意程度”。为了使得用户满意，有以下两个必要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计质量&lt;/strong&gt;：设计的规格说明书符合用户的要求。&lt;/p&gt;
&lt;p&gt;设计质量的评审对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件需求规格说明&lt;/li&gt;
&lt;li&gt;数据需求规格说明&lt;/li&gt;
&lt;li&gt;软件概要设计说明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序质量&lt;/strong&gt;：程序按照设计规格说明所规定的情况正确执行。&lt;/p&gt;
&lt;p&gt;程序质量的评审通常是从开发者的角度进行，与开发技术直接相关。程序质量的评审对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件结构：
&lt;ul&gt;
&lt;li&gt;功能结构：
&lt;ul&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;li&gt;功能结构&lt;/li&gt;
&lt;li&gt;数据结构和功能结构之间的对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能的通用性&lt;/li&gt;
&lt;li&gt;模块的层次&lt;/li&gt;
&lt;li&gt;模块结构：
&lt;ul&gt;
&lt;li&gt;控制流结构&lt;/li&gt;
&lt;li&gt;数据流结构&lt;/li&gt;
&lt;li&gt;模块结构与功能结构之间的对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理过程的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与运行环境的接口：
&lt;ul&gt;
&lt;li&gt;与硬件的接口&lt;/li&gt;
&lt;li&gt;与用户的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变更带来的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件的规格说明分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部规格说明&lt;/strong&gt;：从用户角度来看的规格，包括硬件/软件系统设计、功能设计；&lt;/p&gt;
&lt;p&gt;设计质量是由外部规格说明决定的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内部规格说明&lt;/strong&gt;：为了实现外部规格的更详细的规格，即软件模块结构与模块处理过程的设计。&lt;/p&gt;
&lt;p&gt;内部规格说明是从开发者角度来看的规格说明。&lt;/p&gt;
&lt;p&gt;程序是由内部规格说明决定的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件容错技术&#34;&gt;软件容错技术&lt;/h3&gt;
&lt;p&gt;提高软件质量和可靠性的技术大致可分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避开错误：在开发的过程中不让差错潜入软件的技术；&lt;/li&gt;
&lt;li&gt;容错技术：对某些无法避开的差错，使其影响减至最小的技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现容错的&lt;u&gt;主要手段是&lt;strong&gt;冗余&lt;/strong&gt;&lt;/u&gt;。冗余是指&lt;u&gt;对于实现系统规定功能是多余的那部分资源&lt;/u&gt;，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;软件&lt;/li&gt;
&lt;li&gt;信息&lt;/li&gt;
&lt;li&gt;时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于加入了这些资源，有可能使系统的可靠性得到较大的提高。通常，冗余技术分为4类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构冗余&lt;/strong&gt;：结构冗余是通常采用的冗余技术，按其工作方法可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态冗余&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三模冗余（Triple Module Redundancy，TR）&lt;/li&gt;
&lt;li&gt;多模冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态冗余通过表决和比较来屏蔽系统中出现的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态冗余&lt;/strong&gt;：动态冗余的主要方式是多重模块待机储备。&lt;/p&gt;
&lt;p&gt;当系统测试到某工作模块出现错误时，就用一个备用模块来顶替它并重新运行。这里包括以下过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测&lt;/li&gt;
&lt;li&gt;切换&lt;/li&gt;
&lt;li&gt;恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态冗余有以下两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;热备份系统：每当一个出错模块被其他备用模块顶替后，冗余系统相当于进行了一次重构。&lt;/p&gt;
&lt;p&gt;在热备份系统中，备用模块在待机过程中的失效率为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;冷备份系统：各备用模块在其待机时可与主模块一同工作，也可不工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;混合冗余&lt;/strong&gt;：兼有静态元余和动态冗余的长处。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息冗余&lt;/strong&gt;：指为检测或纠正信息在运算或传输中的错误需外附加的一部分信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间冗余&lt;/strong&gt;：指以重复执行指令或程序来消除瞬时错误带来的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;冗余附加技术&lt;/strong&gt;：指为实现上述冗余技术所需的资源和技术，包括：&lt;/p&gt;
&lt;p&gt;程序、指令、数据、存放和调动它们的空间和通道等。&lt;/p&gt;
&lt;p&gt;在屏蔽硬件错误的容错技术中，冗余附加技术包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关键程序和数据的冗余存储及调用。&lt;/li&gt;
&lt;li&gt;检测、表决、切换、重构、纠错和复算的实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在屏蔽软件错误的容错系统中，冗余附加技术的构成包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;u&gt;冗余备份程序的存储及调用。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;实现错误检测和错误恢复的程序。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;实现容错软件所需的固化程序。&lt;/u&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mccabe-软件复杂性度量法&#34;&gt;McCabe 软件复杂性度量法&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;McCabe度量法&lt;/strong&gt;又称&lt;strong&gt;环路度量法&lt;/strong&gt;，是&lt;u&gt;通过定义环路复杂度，建立程序复杂性的度量，它是一种基于程序控制流的复杂性度量方法&lt;/u&gt;，它反映了程序（或模块）的控制结构的复杂性。&lt;/p&gt;
&lt;p&gt;MaCabe度量法认为&lt;u&gt;程序的复杂性在很大程度上取决于控制的复杂性&lt;/u&gt;。单一的顺序程序结构最为简单，循环和选择构成的环路越多，程序就越复杂。&lt;/p&gt;
&lt;p&gt;MaCabe度量法以图论为工具，先画出程序图，然后用该图的环路数作为程序复杂性的度量值。&lt;/p&gt;
&lt;p&gt;程序图是退化的程序流程图。把程序流程图中的每个处理符号都退化成一个结点，原来连接不同处理符号的流线变成连接不同点的有向弧，这样得到的有向图称为程序图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683629835683.png&#34;
	width=&#34;447&#34;
	height=&#34;416&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683629835683_hu0af7eb1a0943c79d25452239a70d1444_33322_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AF%87/uTools_1683629835683_hu0af7eb1a0943c79d25452239a70d1444_33322_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;程序图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;程序图仅描述程序内部的控制流程，完全不表现对数据的具体操作以及分支和循环的具体条件。&lt;/p&gt;
&lt;p&gt;根据图论，在一个强连通的有向图$G$中，计算环的个数$V(G)$的公式为：&lt;/p&gt;
&lt;p&gt;$$
V(G) = m - n + 2p
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$V(G)$：$G$中的&lt;u&gt;环路个数&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$m$：$G$中的&lt;u&gt;弧的个数&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$n$：$G$中的&lt;u&gt;结点数&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;$p$：$G$中的&lt;u&gt;强连通分量个数&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个程序中，从程序图的入口点总能到达图中的任何一个结点，因此，程序总是连通的，但不是强连通的。&lt;/p&gt;
&lt;p&gt;为了使程序图成为强连通图，&lt;u&gt;从图的入口点到出口点加一条用虚线表示的有向边&lt;/u&gt;（如上图所示），使图成为强连通图（但虚线弧并不算入实际的弧数）。这样就可以使用上式计算环路复杂性了，也因此程序图的$p$通常为1。&lt;/p&gt;
&lt;p&gt;即，计算有向图$G$的环路复杂性的公式为：&lt;/p&gt;
&lt;p&gt;$$
V(G) = m - n + 2
$$&lt;/p&gt;
&lt;p&gt;例如上图中，结点数$n=6$，弧数$m=9$，则：&lt;/p&gt;
&lt;p&gt;$$
V(G) = 9 - 6 + 2 = 5
$$&lt;/p&gt;
&lt;p&gt;即上图McCabe环路复杂的度量值为5。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$V(G) = 10$是一个实际模块的上限。当$V(G) &amp;gt; 10$时，很难充分测试这个模块。&lt;/p&gt;
&lt;p&gt;在白盒测试中，计算环路复杂度可以简单地使用判定条件的数量 + 1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;软件工具&#34;&gt;软件工具&lt;/h1&gt;
&lt;h2 id=&#34;软件开发工具&#34;&gt;软件开发工具&lt;/h2&gt;
&lt;p&gt;对应于软件开发过程的各种活动，软件开发工具通常有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析工具&lt;/li&gt;
&lt;li&gt;设计工具&lt;/li&gt;
&lt;li&gt;编码与排错工具&lt;/li&gt;
&lt;li&gt;测试工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件维护工具&#34;&gt;软件维护工具&lt;/h2&gt;
&lt;p&gt;辅助软件维护过程中活动的软件称为软件维护工具，它辅助维护人员对软件代码及其文档进行各种维护活动。软件维护工具主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;版本控制&lt;/u&gt;工具&lt;/li&gt;
&lt;li&gt;&lt;u&gt;文档分析&lt;/u&gt;工具&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开发信息库&lt;/u&gt;工具&lt;/li&gt;
&lt;li&gt;&lt;u&gt;逆向工程&lt;/u&gt;工具&lt;/li&gt;
&lt;li&gt;&lt;u&gt;再工程&lt;/u&gt;工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件管理和软件支持工具&#34;&gt;软件管理和软件支持工具&lt;/h2&gt;
&lt;p&gt;软件管理和软件支持工具用来辅助管理人员和软件支持人员的管理活动和支持活动，以确保软件高质量地完成。&lt;/p&gt;
&lt;p&gt;常用的铺助软件管理和软件支持的工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目管理工具&lt;/li&gt;
&lt;li&gt;配置管理工具&lt;/li&gt;
&lt;li&gt;软件评价工具&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>结构化开发篇</title>
        <link>https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/</link>
        <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;结构化方法是一种面向数据流的开
发方法，它由以下构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构化分析：根据分解与抽象的原则，按照系统中数据处理的流程，用数据流图来建立系统的功能模型，从而完成需求分析工作。&lt;/li&gt;
&lt;li&gt;结构化设计：根据模块独立性准则、软件结构优
化准则将数据流图转换为软件的体系结构，用软件结构图来建立系统的物理模型，实现系统的
概要设计。&lt;/li&gt;
&lt;li&gt;结构化程序设计：使用3种基本控制结构构造程序，任何程序都可以由顺序、选择和重复3种基本控制结构构造。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构化方法总的指导思想是自顶向下、逐层分解，它的基本原则是功能的分解与抽象。它是软件工程中最早出现的开发方法，特别适合于数据处理领域的问题，但是不适合解决大规模的、特别复杂的项目，且难以适应需求的变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;系统设计&#34;&gt;系统设计&lt;/h1&gt;
&lt;h2 id=&#34;抽象&#34;&gt;抽象&lt;/h2&gt;
&lt;p&gt;抽象是一种设计技术，重点说明一个实体的本质方面，而忽略或者掩盖不太重要或非本质的方面。&lt;/p&gt;
&lt;p&gt;抽象是一种重要的工具，用来将复杂的现象简化到可以分析、实验或者可以理解的程度。&lt;/p&gt;
&lt;p&gt;软件工程中从软件定义到软件开发要经历多个阶段，在这个过程中每前进一步都可看作是对软件解法的抽象层次的一次细化。&lt;/p&gt;
&lt;p&gt;抽象的最底层就是实现该软件的源程序代码。在进行模块化设计时也可以有多个抽象层次，最高抽象层次的模块用概括的方式叙述问题的解法，较低抽象层次的模块是较高抽象层次模块对问题解法描述的细化。&lt;/p&gt;
&lt;h2 id=&#34;模块化&#34;&gt;模块化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;：是在程序中是数据说明、可执行语句等&lt;u&gt;程序对象的集合&lt;/u&gt;，或者是单独命名和编址的元素，例如高级语言中的过程、函数和子程序等。&lt;/p&gt;
&lt;p&gt;在软件的体系结构中，模块是可组合、分解和更换的单元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化&lt;/strong&gt;：是指&lt;u&gt;将一个待开发的软件分解成若干个小的简单部分一模块&lt;/u&gt;，&lt;u&gt;每个模块可独立地开发、测试，最后组装成完整的程序&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;这是一种&lt;u&gt;复杂问题“分而治之”的原则&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;模块化的&lt;u&gt;目的是使程序的结构清晰，容易阅读、理解、测试和修改。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块独立&lt;/strong&gt;：是指&lt;u&gt;每个模块完成一个相对独立的特定子功能&lt;/u&gt;，并且&lt;u&gt;与其他模块之间的联系简单&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;衡量模块独立程度的标准有（模块独立性的两个定性标准）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;耦合性&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内聚性&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在将软件系统划分模块时，应尽量做到&lt;strong&gt;高内聚&lt;/strong&gt;、&lt;strong&gt;低耦合&lt;/strong&gt;，提高模块的独立性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，可以按照在软件系统中的功能将模块分为四种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传入模块：取得数据或输入数据，经过某些处理，再将其传送给其他模块。&lt;/li&gt;
&lt;li&gt;传出模块：输出数据，在输出前可能进行某些处理。数据可能被输出到系统的外部，或者会输出到其他模块进行进一步处理。&lt;/li&gt;
&lt;li&gt;变换模块：从上级调用模块得到数据，进行特定的处理，转换成其他形式，再将加工结果返回给调用模块。&lt;/li&gt;
&lt;li&gt;协调模块：一般不对数据进行加工，主要是通过调用、协调和管理其他模块来完成特定的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;耦合&#34;&gt;耦合&lt;/h3&gt;
&lt;p&gt;耦合是模块之间的相对独立性（互相连接的紧密程度）的度量。&lt;/p&gt;
&lt;p&gt;模块之间的耦合取决于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个模块之间接口的复杂程度；&lt;/li&gt;
&lt;li&gt;调用模块的方式；&lt;/li&gt;
&lt;li&gt;通过接口的信息类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般模块之间可能的耦合方式有7种类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683443957893.png&#34;
	width=&#34;874&#34;
	height=&#34;133&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683443957893_hub7c8379d83566b7e880998eac437a73f_32408_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683443957893_hub7c8379d83566b7e880998eac437a73f_32408_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;耦合的种类&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;657&#34;
		data-flex-basis=&#34;1577px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无直接耦合&lt;/strong&gt;：指两个模块之间&lt;u&gt;没有直接的关系&lt;/u&gt;，它们分别从属于不同模块的控制与调用，&lt;u&gt;它们之间不传递任何信息&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;无直接耦合的模块间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;耦合性最弱&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;&lt;u&gt;模块独立性最高&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据耦合&lt;/strong&gt;：指两个模块之间&lt;u&gt;有调用关系&lt;/u&gt;，&lt;u&gt;传递的是简单的数据值&lt;/u&gt;，相当于高级语言中的值传递。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标记耦合&lt;/strong&gt;：指两个模块之间&lt;u&gt;传递的是数据结构&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制耦合&lt;/strong&gt;：指一个模块调用另一个模块时，&lt;u&gt;传递的是控制变量&lt;/u&gt;，&lt;u&gt;被调用模块通过该控制变量的值有选择地执行模块内的某一功能&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部耦合&lt;/strong&gt;：模块间&lt;u&gt;通过软件之外的环境联结&lt;/u&gt;（如I/O将模块耦合到特定的设备、格式、通信协议上）时称为外部耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公共耦合&lt;/strong&gt;：指&lt;u&gt;通过一个公共数据环境相互作用&lt;/u&gt;的那些模块间的耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内容耦合&lt;/strong&gt;：当一个模块&lt;u&gt;直接使用另一个模块的内部数据&lt;/u&gt;，或&lt;u&gt;通过非正常入口转入另一个模块内部时&lt;/u&gt;，这种模块之间的耦合称为内容耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;耦合类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无直接耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有直接关系，不传递任何信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调用关系，传递简单数据值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;标记耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传递数据结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;控制耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调用关系，被调模块传递给主调模块控制变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外部耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过软件之外的环境联结&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;公共耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过公共数据环境相互作用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;内容耦合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;直接使用另一个模块的内部数据&lt;br&gt;或通过非正常入口转入另一个模块内部&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;解耦：降低模块之间的耦合性的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;内聚&#34;&gt;内聚&lt;/h3&gt;
&lt;p&gt;内聚是&lt;u&gt;对一个模块内部各个元素彼此结合的紧密程度的度量&lt;/u&gt;。&lt;u&gt;一个内聚程度高的模块（在理想情况下）应当只做一件事。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;一般模块的内聚性分为7种类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683460613634.png&#34;
	width=&#34;852&#34;
	height=&#34;150&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683460613634_hu1eaacf717e4a21f2e2077ba172b88635_37938_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683460613634_hu1eaacf717e4a21f2e2077ba172b88635_37938_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;内聚的种类&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;568&#34;
		data-flex-basis=&#34;1363px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;偶然内聚&lt;/strong&gt;（&lt;strong&gt;巧合内聚&lt;/strong&gt;）：指一个模块内的各&lt;u&gt;处理元素之间没有任何联系&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;偶然内聚具有最低的内聚性。&lt;/p&gt;
&lt;p&gt;具有偶然内聚的模块具有以下特点（缺点）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不易修改、理解和维护；&lt;/li&gt;
&lt;li&gt;会影响到模块间的耦合关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑内聚&lt;/strong&gt;：指模块内&lt;u&gt;执行若干个逻辑上相似的功能，通过参数确定该模块完成哪一个功能&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间内聚&lt;/strong&gt;：把&lt;u&gt;需要同时执行的动作组合在一起形成的模块&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过程内聚&lt;/strong&gt;：指一个模块&lt;u&gt;完成多个任务，这些任务必须按指定的过程执行&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通信内聚&lt;/strong&gt;：指模块内的&lt;u&gt;所有处理元素都在同一个数据结构上操作&lt;/u&gt;，或者&lt;u&gt;各处理使用相同的输入数据或者产生相同的输出数据&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;顺序内聚&lt;/strong&gt;：指一个模块中的&lt;u&gt;各个处理元素都密切相关于同一功能且必须顺序执行，前一功能元素的输出就是下一功能元素的输入&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能内聚&lt;/strong&gt;：指模块内的&lt;u&gt;所有元素共同作用完成一个功能，缺一不可&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;这是最强的内聚。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;内聚类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;偶然内聚&lt;br&gt;（巧合内聚）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;各处理之间没有任何联系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逻辑内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;执行若干个逻辑上相似的功能，&lt;br&gt;通过参数确定该模块完成哪一个功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时间内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;把需要同时执行的动作组合在一起&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;过程内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;完成多个任务，这些任务必须按指定的过程执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通信内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有处理都在同一个数据结构上操作，&lt;br&gt;或者各处理使用相同的输入数据或者产生相同的输出数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;顺序内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;各处理都与同一功能密切相关且必须顺序执行，&lt;br&gt;前一功能元素的输出就是下一功能元素的输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;功能内聚&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有元素共同作用完成一个功能，缺一不可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;系统结构设计原则&#34;&gt;系统结构设计原则&lt;/h2&gt;
&lt;p&gt;为保证总体结构设计顺利完成，应遵循以下几条原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分解——协调原则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;系统整体，具有其整体的目的和功能，但这些目的和功能的实现又是由相互联系的各个组成部分共同工作的结果。解决复杂问题的一个很重要的原则就是把它分解成多个小问题分别处理，在处理过程中根据系统总体要求协调各部门的关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自顶向下的原则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;从上往下，逐层分解；先确定上层模块的功能，再确定下层模块的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息隐蔽、抽象的原则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;u&gt;上层模块只规定下层模块做什么和所属模块间的协调关系，但不规定怎么做&lt;/u&gt;，以保证各模块的相对独立性和内部结构的合理性，使得模块与模块之间层次分明，易于理解、实施和维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性原则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;要保证整个软件设计过程中具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统一的规范&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一的标准&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一的文件模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;明确性原则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;每个模块必须：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能明确、接口明确；&lt;/li&gt;
&lt;li&gt;消除多重功能和无用接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高内聚、低耦合&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;模块之间的耦合尽可能小，模块的内聚度尽可能高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块的扇入系数和扇出系数要合理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;扇出系数&lt;/strong&gt;：模块直接调用其他模块的个数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扇入系数&lt;/strong&gt;：模块被其他模块调用时，直接调用它的模块个数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经验表明，&lt;u&gt;一个设计得好的系统的平均扇入、扇出系数通常是 3 或 4，一般不应超过 7&lt;/u&gt;，否则会引起出错概率的增大。但菜单调用型模块的扇入与扇出系数可以大一些，公用模块的扇入系数可以大一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块的规模适当&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;过大的模块常常使系统分解得不充分；&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;过小的模块有可能降低模块的独立性，造成系统接口的复杂性。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;模块的作用范围应该在其控制范围之内。&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免或减少使用病态连接：病态连接是指从中部进入或访问一个模块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统文档&#34;&gt;系统文档&lt;/h2&gt;
&lt;p&gt;信息系统的文档是系统建设过程的“痕迹”，是系统维护人员的指南，是开发人员与用户交流的工具。&lt;/p&gt;
&lt;p&gt;对文档在&lt;u&gt;系统开发人员&lt;/u&gt;、&lt;u&gt;项目管理人员&lt;/u&gt;、&lt;u&gt;系统维护人员&lt;/u&gt;、&lt;u&gt;系统评价人员&lt;/u&gt;以及&lt;u&gt;用户&lt;/u&gt;之间的多种作用总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;用户&lt;/u&gt;与&lt;u&gt;系统分析人员&lt;/u&gt;在&lt;u&gt;系统规划&lt;/u&gt;和&lt;u&gt;系统分析阶段&lt;/u&gt;通过文档进行沟通。&lt;/p&gt;
&lt;p&gt;这里的文档主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可行性研究报告&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总体规划报告&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统开发合同&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统方案说明书&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;系统开发人员&lt;/u&gt;与&lt;u&gt;项目管理人员&lt;/u&gt;通过文档在&lt;u&gt;项目期内&lt;/u&gt;进行沟通。&lt;/p&gt;
&lt;p&gt;这里的文档是指项目管理文件，主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统开发计划&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作任务分解表&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PERT图&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;甘特图&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预算分配表&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统开发月报&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统开发总结报告&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了这些文档可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同阶段开发人员工作的顺利交接；&lt;/li&gt;
&lt;li&gt;降低因为人员流动带来的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;系统测试人员&lt;/u&gt;与&lt;u&gt;系统开发人员&lt;/u&gt;通过文档进行沟通。&lt;/p&gt;
&lt;p&gt;系统测试人员可以根据以下文档对系统开发人员所开发的系统进行测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统方案说明书&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统开发合同&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统设计说明书&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试计划&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统测试人员再将评估结果撰写成&lt;strong&gt;系统测试报告&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;系统开发人员&lt;/u&gt;与&lt;u&gt;用户&lt;/u&gt;在&lt;u&gt;系统运行期间&lt;/u&gt;进行沟通。&lt;/p&gt;
&lt;p&gt;用户通过系统开发人员撰写的文档运行系统。这里的文档主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户手册&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作指南&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;系统开发人员&lt;/u&gt;与&lt;u&gt;系统维护人员&lt;/u&gt;通过文档进行沟通。&lt;/p&gt;
&lt;p&gt;这里的文档主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统设计说明书&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统开发总结报告&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;开发总结报告还可分为以下3个文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;研制报告&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术报告&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术手册&lt;/strong&gt;：记录了系统开发过程中的各种主要技术细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;用户&lt;/u&gt;与&lt;u&gt;维修人员&lt;/u&gt;在&lt;u&gt;运行维护期间&lt;/u&gt;进行沟通。&lt;/p&gt;
&lt;p&gt;用户在使用信息系统的过程中，将运行过程中的问题进行记载，形成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统运行报告&lt;/strong&gt;、&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护修改建议&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统维护人员根据以下文档对系统进行维护和升级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维护修改建议；&lt;/li&gt;
&lt;li&gt;系统开发人员留下的技术手册等文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;人员&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;文档&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用户&lt;br&gt;系统分析人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统规划&lt;br&gt;系统分析&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沟通文档，主要是&lt;strong&gt;规划报告&lt;/strong&gt;、&lt;strong&gt;合同&lt;/strong&gt;、&lt;strong&gt;方案&lt;/strong&gt;：&lt;br&gt;&lt;ul&gt;&lt;li&gt;可行性研究报告&lt;/li&gt;&lt;li&gt;总体规划报告&lt;/li&gt;&lt;li&gt;系统开发合同&lt;/li&gt;&lt;li&gt;系统方案说明书&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统开发人员&lt;br&gt;项目管理人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;项目期内&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沟通文档（项目管理文件），主要是&lt;strong&gt;计划&lt;/strong&gt;、&lt;strong&gt;报告&lt;/strong&gt;类文档：&lt;br&gt;&lt;ul&gt;&lt;li&gt;系统开发计划&lt;ul&gt;&lt;li&gt;工作任务分解表&lt;/li&gt;&lt;li&gt;PERT图&lt;/li&gt;&lt;li&gt;甘特图&lt;/li&gt;&lt;li&gt;预算分配表&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;系统开发月报&lt;/li&gt;&lt;li&gt;系统开发总结报告&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统测试人员&lt;br&gt;系统开发人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;测试&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;系统测试人员根据以下文档对系统进行测试：&lt;br&gt;&lt;ul&gt;&lt;li&gt;系统方案说明书&lt;/li&gt;&lt;li&gt;系统开发合同&lt;/li&gt;&lt;li&gt;系统设计说明书&lt;/li&gt;&lt;li&gt;测试计划&lt;/li&gt;&lt;/ul&gt;系统测试人员再将评估结果撰写成系统测试报告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统开发人员&lt;br&gt;用户&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统运行期间&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户通过系统开发人员撰写的文档运行系统：&lt;br&gt;&lt;ul&gt;&lt;li&gt;用户手册&lt;/li&gt;&lt;li&gt;操作指南&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统开发人员&lt;br&gt;系统维护人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;维护&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沟通文档：&lt;ul&gt;&lt;li&gt;系统设计说明书&lt;/li&gt;&lt;li&gt;系统开发总结报告&lt;ul&gt;&lt;li&gt;研制报告&lt;/li&gt;&lt;li&gt;研制报告&lt;/li&gt;&lt;li&gt;技术手册&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用户&lt;br&gt;维修人员&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运维&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户将运行过程中的问题进行记载：&lt;ul&gt;&lt;li&gt;系统运行报告&lt;/li&gt;&lt;li&gt;维护修改建议&lt;/li&gt;&lt;/ul&gt;系统维护人员根据以下文档对系统进行维护和升级：&lt;ul&gt;&lt;li&gt;维护修改建议&lt;/li&gt;&lt;li&gt;系统开发人员留下的技术手册等文档&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;结构化分析方法&#34;&gt;结构化分析方法&lt;/h1&gt;
&lt;h2 id=&#34;数据流图&#34;&gt;数据流图&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数据流图&lt;/strong&gt;也称&lt;strong&gt;数据流程图&lt;/strong&gt;（Data Flow Diagram，&lt;strong&gt;DFD&lt;/strong&gt;），是一种便于用户理解、分析系统数据流程的图形工具。它&lt;u&gt;摆脱了系统的物理内容&lt;/u&gt;，精确地在逻辑上描述系统的功能、输入、输出和数据存储等，是系统逻辑模型的重要组成部分。&lt;/p&gt;
&lt;p&gt;数据流图中的基本图形元素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据流&lt;/strong&gt;（Data Flow）：由一组固定成分的数据组成，表示数据的流向。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683518468182.png&#34;
	width=&#34;193&#34;
	height=&#34;71&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据流&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;652px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在DFD种，数据流的流向由以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;u&gt;加工&lt;/u&gt;流向另一个&lt;u&gt;加工&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;加工&lt;/u&gt;流向&lt;u&gt;数据存储&lt;/u&gt;（写）；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;数据存储&lt;/u&gt;流向&lt;u&gt;加工&lt;/u&gt;（读）；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;外部实体&lt;/u&gt;流向&lt;u&gt;加工&lt;/u&gt;（输入）；&lt;/li&gt;
&lt;li&gt;从&lt;u&gt;加工&lt;/u&gt;流向&lt;u&gt;外部实体&lt;/u&gt;（输出）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即数据流的&lt;u&gt;起点或终点必须至少有一个是加工&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;除了与数据存储有关的数据流（流向数据存储或从数据存储流出），DFD中的每个数据流都必须用一个定义明确的名字表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加工&lt;/strong&gt;（Process）：加工描述了输入数据流到输出数据流之间的变换，也就是&lt;u&gt;输入数据流经过什么处理后变成了输出数据流&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683518239889.png&#34;
	width=&#34;282&#34;
	height=&#34;105&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;加工&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每个加工都有一个名字和编号。&lt;/p&gt;
&lt;p&gt;一个加工可以有多个输入数据流和多个输出数据流，但&lt;u&gt;至少有一个输入数据流和一个输出数据流&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;数据流图中常见的3种错误如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;黑洞&lt;/strong&gt;：加工只有输入，没有输出。&lt;/p&gt;
&lt;p&gt;如下图加工1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;白洞&lt;/strong&gt;：加工只有输出但没有输入。&lt;/p&gt;
&lt;p&gt;如下图加工2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灰洞&lt;/strong&gt;：加工中输入数据不足以产生输出数据。&lt;/p&gt;
&lt;p&gt;有几种可能的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个错误的命名过程；&lt;/li&gt;
&lt;li&gt;错误命名的输入或输出；&lt;/li&gt;
&lt;li&gt;不完全的事实。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图加工3。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683528176745.png&#34;
	width=&#34;793&#34;
	height=&#34;542&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683528176745_hu5869eb4ddb2b6e895b99cd504e3e35d8_119530_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683528176745_hu5869eb4ddb2b6e895b99cd504e3e35d8_119530_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据流图中常见错误&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;351px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据存储&lt;/strong&gt;（Data Store）：存储和提供数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517944926.png&#34;
	width=&#34;350&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据存储&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;443&#34;
		data-flex-basis=&#34;1063px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每个数据存储都有一个定义明确的名字标识。&lt;/p&gt;
&lt;p&gt;数据存储可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储加工的输出数据：数据流流入数据存储，表示数据的写入操作；&lt;/li&gt;
&lt;li&gt;提供加工的输入数据：数据流从数据存储流出，表示数据的读操作。&lt;/li&gt;
&lt;li&gt;双向箭头的数据流指向数据存储，表示对数据的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFD中的数据存储在具体实现时可以用以下方式实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件系统实现；&lt;/li&gt;
&lt;li&gt;数据库系统实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据存储的存储介质可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘、&lt;/li&gt;
&lt;li&gt;磁带、&lt;/li&gt;
&lt;li&gt;其他存储介质。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外部实体&lt;/strong&gt;（External Agent，外部主体）：指&lt;u&gt;存在于软件系统之外的人员、组织、物体或外部系统&lt;/u&gt;，它指出系统所需数据的&lt;u&gt;发源地（源）&lt;/u&gt;和&lt;u&gt;系统所产生的数据的归宿地（宿）&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517896893.png&#34;
	width=&#34;118&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;外部实体&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人员：学生、老师、员工、主观、医生、客户……&lt;/li&gt;
&lt;li&gt;组织：供应商、采购部门……&lt;/li&gt;
&lt;li&gt;物体：传感器、控制器、单车、车辆……&lt;/li&gt;
&lt;li&gt;外部系统：支付系统、车辆交易系统、库存管理系统、道闸控制系统……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在许多系统中，某个源和某个宿可以是同一个人员、组织、物体或外部系统，此时，在DFD中可以用同一个符号表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当数据流从该符号流出时，表示它是源；&lt;/li&gt;
&lt;li&gt;当数据流流向该符号时，表示它是宿；&lt;/li&gt;
&lt;li&gt;当两者皆有时，表示它既是源又是宿。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部实体表示存在于系统之外的对象，用来帮助用户理解系统数据的来源和去向。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件系统内部的&lt;strong&gt;数据处理模型&lt;/strong&gt;：使用&lt;u&gt;数据流&lt;/u&gt;、&lt;u&gt;加工&lt;/u&gt;和&lt;u&gt;数据存储&lt;/u&gt;构建。&lt;/p&gt;
&lt;p&gt;数据流图描述了系统的分解，但没有对图中各成分进行说明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;基本元素&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;图形表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据流&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683518468182.png&#34;
	width=&#34;193&#34;
	height=&#34;71&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683518468182_hu1fccd0f4bc92c1a7ca6417a3c5762d95_691_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据流&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;652px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加工&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683518239889.png&#34;
	width=&#34;282&#34;
	height=&#34;105&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/1683518239889_hua1275ed5909c87bf24a2f46b2412656d_4453_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;加工&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据存储&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517944926.png&#34;
	width=&#34;350&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517944926_hu07d5f627c7e21f9ad8b48cfa71d5e47e_1735_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据存储&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;443&#34;
		data-flex-basis=&#34;1063px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外部实体&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517896893.png&#34;
	width=&#34;118&#34;
	height=&#34;79&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%80%E5%8F%91%E7%AF%87/uTools_1683517896893_hu053e7e7f1170dc0aa7a02a640e921728_501_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;外部实体&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;数据流图必须确保：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据流的起点或终点必须至少有一个是加工。&lt;/li&gt;
&lt;li&gt;加工至少有一个输入数据流和一个输出数据流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分层数据流图：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;顶层图：描述系统的输入和输出。&lt;/p&gt;
&lt;p&gt;即描述系统从哪些外部实体接受数据流，以及系统发送数据流到哪些外部实体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶层图只有一个加工，即待开发的软件系统。&lt;/li&gt;
&lt;li&gt;顶层图中的数据流就是系统的输入/输出信息。&lt;/li&gt;
&lt;li&gt;顶层图中通常没有数据存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0层图：分解顶层图的加工。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再分解：将DFD中某些比较复杂的加工再次分解成一张DFD子图。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据字典&#34;&gt;数据字典&lt;/h2&gt;
&lt;p&gt;数据字典（DD）是为数据流图中的以下成分做出说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据流&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加工&lt;/strong&gt;：对加工的描述称为“小说明”或“加工逻辑说明”；&lt;/li&gt;
&lt;li&gt;组成数据流或文件的&lt;strong&gt;数据项&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据字典有以下4类条目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据流&lt;/strong&gt;条目：对DFD中数据流的定义，通常列出该数据流的各组成数据项。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;举例及说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$=$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;被定义为&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$+$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;与&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x = a + b$：$x$由$a$和$b$组成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$[a|b]$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;或&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x = [a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\{a\}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重复&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x = \{a\}$：$x$由任意个$a$组成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$m\{a\}n$&lt;br&gt;或&lt;br&gt;$\big\{ a \big\}^{n}_{m}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重复&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x=m\{a\}n$ 或 $x=\big\{a\big\}^{n}_{m}$：$x$中出现$m \sim n$次$a$&lt;br&gt;&lt;ul&gt;&lt;li&gt;$n$：重复次数的上限&lt;/li&gt;&lt;li&gt;$m$：重复次数的下限&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$(a)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可选&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x = (a)$：$a$在$x$中出现$0$或$1$次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$&amp;ldquo;a&amp;rdquo;$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本数据元素&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x = &amp;ldquo;a&amp;rdquo;$：$x$是取值为字符$a$的数据元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$m..n$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;连接符&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$x = m..n$：$x$可取$m \sim n$中的任意一个值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据项&lt;/strong&gt;条目：组成数据流和数据存储的最小元素，是不可再分解的数据单位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据存储&lt;/strong&gt;条目：对DFD中数据存储的定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本加工&lt;/strong&gt;条目：用来说明DFD中（下层）基本加工的处理逻辑（加工逻辑）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对每一个基本加工，必须有一个加工规格说明（加工逻辑描述）。&lt;/li&gt;
&lt;li&gt;加工规格说明（加工逻辑描述）必须描述基本加工如何把输入数据流变换为输出数据流的加工规则。&lt;/li&gt;
&lt;li&gt;加工规格说明必须描述实现加工的策略，而不是实现加工的细节。&lt;/li&gt;
&lt;li&gt;加工规格说明中包含的信息应是充足的，完备的，有用的，没有重复的多余信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构化语言、判定树和判定表可以用来表示加工逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源点、终点不在系统之内，故一般不在字典中说明。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;用户界面设计&#34;&gt;用户界面设计&lt;/h1&gt;
&lt;p&gt;用户界面（UI）设计在人与计算机之间搭建了一个有效的交流媒介。&lt;/p&gt;
&lt;h2 id=&#34;黄金原则&#34;&gt;黄金原则&lt;/h2&gt;
&lt;p&gt;黄金原则一共有3条：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户操纵控制&lt;/li&gt;
&lt;li&gt;减少用户的记忆负担&lt;/li&gt;
&lt;li&gt;保持界面一致&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>数据库篇</title>
        <link>https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/</link>
        <pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;数据库体系结构&#34;&gt;数据库体系结构&lt;/h1&gt;
&lt;p&gt;数据描述有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑描述：指程序员或用户用以操作的数据形式，是抽象的概念化数据。&lt;/li&gt;
&lt;li&gt;物理描述：指数据在存储设备上的存储方式，物理数据是实际存放在存储设备上的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三级模式结构&#34;&gt;三级模式结构&lt;/h2&gt;
&lt;p&gt;实际上有许多不同的数据库产品，但它们的体系结构基本上都具有相同的特征，采用“三级模式和两级映像”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681373319410.png&#34;
	width=&#34;486&#34;
	height=&#34;377&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681373319410_hu9b9f67605df5247fa6ccd5bd0d000f11_51804_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681373319410_hu9b9f67605df5247fa6ccd5bd0d000f11_51804_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;三级模式两级映像&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;309px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;三级结构有3类数据模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外模型&lt;/strong&gt;：用户使用的&lt;strong&gt;数据视图&lt;/strong&gt;，是一种局部的逻辑数据视图，表示用户所理解的实体、实体属性和实体关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;概念模型&lt;/strong&gt;：全局的&lt;strong&gt;逻辑数据视图&lt;/strong&gt;，是数据库管理员所看到的实体、实体属性和实体之间的联系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内模型&lt;/strong&gt;：数据的物理&lt;strong&gt;存储模型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三个物理模型分别对应数据库系统的3层结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外模式（子模式、用户模式）&lt;/strong&gt;：数据库用户的数据视图，是与某一应用程序有关的数据的逻辑表示。&lt;/p&gt;
&lt;p&gt;外模式用DBMS的外模式描述语言（外模式DDL)来定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念模式（模式）&lt;/strong&gt;：所有用户的公共数据视图，与具体的应用程序和应用程序开发工具无关。&lt;/p&gt;
&lt;p&gt;概念模式用DBMS的模式描述语言（模式DDL)来定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内模式（物理模式、存储模式）&lt;/strong&gt;：是数据在数据库内部的表示方式。&lt;/p&gt;
&lt;p&gt;内模式由DBMS的内模式描述语言（内模式DDL)来描述，由设备介质语言来定义。&lt;/p&gt;
&lt;p&gt;定义&lt;u&gt;所有的&lt;strong&gt;内部记录类型&lt;/strong&gt;、&lt;strong&gt;索引&lt;/strong&gt;和&lt;strong&gt;文件&lt;/strong&gt;的组织方式&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两级模式映象&#34;&gt;两级模式映象&lt;/h2&gt;
&lt;p&gt;数据库系统在三级模式之间提供了两级映像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式——内模式映像存在于&lt;u&gt;概念级和内部级&lt;/u&gt;之间，实现&lt;u&gt;概念模式和内模式&lt;/u&gt;间的相互转换。&lt;/li&gt;
&lt;li&gt;外模式——模式映像：存在于&lt;u&gt;外部级和概念级&lt;/u&gt;之间，实现了&lt;u&gt;外模式和概念模式&lt;/u&gt;之间的相互转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据的独立性（指数据与程序独立）是由DBMS的二级映像功能来保证的。数据的独立性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物理独立性&lt;/strong&gt;：指当数据库的&lt;u&gt;内模式发生改变时，数据的逻辑结构不变&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;物理独立性可以保证，当数据的物理结构改变时，应用程序不用改变。&lt;/p&gt;
&lt;p&gt;但是，为了保证应用程序能够正确执行，&lt;u&gt;需要修改概念模式和内模式之间的映像&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑独立性&lt;/strong&gt;：指用户的&lt;u&gt;应用程序与数据库的逻辑结构是相互独立的&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;数据的逻辑结构发生变化后，用户程序也可以不修改。&lt;/p&gt;
&lt;p&gt;但是，为了保证应用程序能够正确执行，&lt;u&gt;需要修改外模式和概念模式之间的映像&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据模型&#34;&gt;数据模型&lt;/h1&gt;
&lt;p&gt;在数据库技术中，表示实体类型及实体类型间联系的模型称为数据模型。&lt;/p&gt;
&lt;p&gt;数据模型有以下类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概念数据模型：从信息世界中抽象的数据模型；&lt;/li&gt;
&lt;li&gt;结构数据模型：从计算机世界中抽象出的DBMS支持的数据模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概念数据模型&#34;&gt;概念数据模型&lt;/h2&gt;
&lt;p&gt;概念数据模型用于信息世界建模，一般采用实体-联系方法（E-R方法）。概念数据模型的常用术语有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体&lt;/strong&gt;：客观存在并可以相互区别的事物称为实体。&lt;/p&gt;
&lt;p&gt;如一个单位、一个职工、一个部门或一个项目等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;：描述实体的特性称为属性，一个实体可以由若干个属性来刻画。&lt;/p&gt;
&lt;p&gt;属性的具体取值称为属性值，用以表示一个具体实体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;码&lt;/strong&gt;：&lt;u&gt;唯一标识&lt;/u&gt;实体的属性集称为码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;域&lt;/strong&gt;：属性的&lt;u&gt;取值范围&lt;/u&gt;称为该属性的域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体型&lt;/strong&gt;：具有相同属性的实体必然具有共同的特征和性质，用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。&lt;/p&gt;
&lt;p&gt;例如，学生（学号，姓名，性别，班号）就是一个实体型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体集&lt;/strong&gt;：同型实体的集合称为实体集。&lt;/p&gt;
&lt;p&gt;例如，全体学生就是一个实体集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;联系&lt;/strong&gt;：实体（型）之间的对应关系称为联系。联系分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体内部各属性之间的联系；&lt;/li&gt;
&lt;li&gt;实体之间的联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个实体型之间的联系有3种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一对一联系(1:1)；&lt;/li&gt;
&lt;li&gt;一对多联系(1:n)；&lt;/li&gt;
&lt;li&gt;多对多联系(m:n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实体-联系方法表示的概念数据模型称为E-R图。E-R图是抽象和描述现实世界的有力工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实体型&lt;/strong&gt;：用&lt;strong&gt;矩形&lt;/strong&gt;表示，矩形框内写明实体名；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;：用&lt;strong&gt;椭圆形&lt;/strong&gt;表示，并用无向边将其与相应的实体连接起来；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;联系&lt;/strong&gt;：用&lt;strong&gt;菱形&lt;/strong&gt;表示，菱形框内写明联系名，并用无向边将其分别与有关实体连接起来，同时在无向边旁标上联系的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681289395117.png&#34;
	width=&#34;240&#34;
	height=&#34;242&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681289395117_hube981d9754c37a567c83a04aad71de33_18088_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681289395117_hube981d9754c37a567c83a04aad71de33_18088_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;E-R图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;99&#34;
		data-flex-basis=&#34;238px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;结构数据模型&#34;&gt;结构数据模型&lt;/h2&gt;
&lt;p&gt;结构数据模型是直接面向数据库的逻辑结构。这类模型涉及到计算机系统和数据库管理系统，所以称为结构数据模型。任何一个DBMS都以某个结构数据模型为基础，或者说支持某个结构数据模型。&lt;/p&gt;
&lt;p&gt;常用术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据项&lt;/strong&gt;：又称&lt;strong&gt;字段&lt;/strong&gt;，是数据库中可以命名的最小逻辑数据单位。可以是一个数或个字符串，用它描述属性的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;记录&lt;/strong&gt;：是数据项的有序集，即一个记录是由若干个数据项或字段组成，用它描述实体。&lt;/p&gt;
&lt;p&gt;一般来说，数据只有被组成记录的形式才有实际意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件&lt;/strong&gt;：文件是一个具有符号名的一组同类记录的集合。文件包含记录的结构和记录的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构数据模型主要包括：层次、网状、关系和面向对象模型。&lt;/p&gt;
&lt;p&gt;关系模型是一种用二维表格结构快表示实体以及实体之间联系的数据模型。每个二维表由行、列组成，又可称为关系，关系模式是对关系的描述。因此可以说，关系模型是由关系模式组成的集合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前大多数数据库管理系统都是关系型的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;关系模型&#34;&gt;关系模型&lt;/h1&gt;
&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;
&lt;p&gt;有关关系模型的术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系&lt;/strong&gt;：一个关系就是一张&lt;strong&gt;二维表&lt;/strong&gt;，每个关系有一个关系名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;元组&lt;/strong&gt;：表中的一行即为一个&lt;strong&gt;元组&lt;/strong&gt;，对应存储文件中的一个&lt;strong&gt;记录值&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;：表中的&lt;strong&gt;列&lt;/strong&gt;称为属性，每一列有一个属性名。&lt;/p&gt;
&lt;p&gt;属性值相当于记录中的数据项或者字段值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;域&lt;/strong&gt;：属性的&lt;strong&gt;取值范围&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系模式&lt;/strong&gt;：对关系的&lt;strong&gt;描述&lt;/strong&gt;称为关系模式，由关系名和其属性集合构成，关系模式的格式为：关系名（属性名1，属性名2，…，属性名n）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;候选码&lt;/strong&gt;（候选健）：属性或属性组合其值能够&lt;strong&gt;唯一地标识&lt;/strong&gt;一个元组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主码&lt;/strong&gt;（主键）：在一个关系中可能有&lt;u&gt;多个候选码，从中选择一个&lt;/u&gt;作为主码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主属性&lt;/strong&gt;：所有候选键都称为主属性，其他的属性都称为&lt;strong&gt;非码属性&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外码&lt;/strong&gt;（或外键）：如果一个关系中的属性或属性组并非该关系（二维表）的码，但它们是&lt;u&gt;另外一个关系（二维表）的码&lt;/u&gt;，则称其为该关系的外码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全码&lt;/strong&gt;：关系模式的&lt;u&gt;所有属性组是这个关系模式的候选码&lt;/u&gt;，称为全码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超码&lt;/strong&gt;（超键）：一个&lt;u&gt;包含码的属性集称为超码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;例如学号是码，则（学号，姓名）就是一个超码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整性约束&#34;&gt;完整性约束&lt;/h2&gt;
&lt;p&gt;完整性规则保证用户对数据库做修改时不会破坏数据的一致性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体完整性&lt;/strong&gt;（Entity Integrity，引用完整性）：规定基本关系R的主属性A不能取空值。&lt;/p&gt;
&lt;p&gt;即&lt;u&gt;主属性不能为空&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;参照完整性&lt;/strong&gt;（Referential Integrity）：若F是基本关系R的外码，它与基本关系S的主码K&lt;sub&gt;s&lt;/sub&gt;相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值可以取：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空值（F的每个属性值均为空值）；&lt;/li&gt;
&lt;li&gt;S中某个元组的主码值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即实体之间的关联可以变现为：关系R用外码F与关系S关联，外码F的值可以为空也可以为关系S中某个元组（记录）的主码值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户定义完整性&lt;/strong&gt;（User Defined Integrity）：针对某一具体的关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求，由应用的环境决定。&lt;/p&gt;
&lt;p&gt;例如，银行的用户账户规定必须大于等于100000、小于999999。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关系代数运算符&#34;&gt;关系代数运算符&lt;/h2&gt;
&lt;p&gt;关系操作的特点是操作对象和操作结果都是集合，而非关系数据模型的数据操作方式则为一次一个记录的方式。&lt;/p&gt;
&lt;p&gt;关系数据语言分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关系代数语言；&lt;/li&gt;
&lt;li&gt;关系演算语言；&lt;/li&gt;
&lt;li&gt;具有关系代数和关系演算双重特点的语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系演算语言包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元组关系演算语言；&lt;/li&gt;
&lt;li&gt;域关系演算语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系代数运算符有4类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681431891302.png&#34;
	width=&#34;735&#34;
	height=&#34;301&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681431891302_hu474e5e1683bfce1832772e13dcf3cc90_42174_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681431891302_hu474e5e1683bfce1832772e13dcf3cc90_42174_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关系代数运算符&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;586px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;基本关系代数运算是对两个具有&lt;u&gt;相同的关系模式&lt;/u&gt;的关系进行运算。关系$R$与$S$具有&lt;u&gt;相同的关系模式&lt;/u&gt;，即$R$与$S$的元数相同（结构相同）。&lt;/p&gt;
&lt;p&gt;基本关系代数运算包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;并&lt;/strong&gt;（Union）：关系$R$与$S$的并是由属于$R$或属于$S$的元组构成的集合，记作$R \cup S$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \cup S = \{ t | (t \in R) \vee (t \in S) \}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;式中$t$为元组变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;差&lt;/strong&gt;（Difference）：关系$R$与$S$的差是由&lt;u&gt;属于$R$但不属于$S$&lt;/u&gt;的元组构成的集合，记作$R-S$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R-S = \{ t| (t \in R) \wedge (t \not\in S) \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;交&lt;/strong&gt;（Intersection）：关系$R$与$S$的交是由属于$R$同时又属于$S$的元组构成的集合，记作$R \cap S$,其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \cap S = \{ t| (t \in R) \wedge (t \in S) \}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$R \cap S = R-(R-S)$，或者$R \cap S = S-(S-R)$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩展的关系代数运算可以从基本的关系运算中导出，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;广义笛卡儿积&lt;/strong&gt;（Extended Cartesian Product）：两个元组分别为$n$目和$m$目的关系$R$和$S$的广义笛卡儿积是一个$(n+m)$列的元组的集合。&lt;/p&gt;
&lt;p&gt;元组的前$n$列是关系$R$的一个元组，后$m$列是关系$S$的一个元组，记作$R \times S$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \times S = \{ t| (t \ = \ &amp;lt;t^n, t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \}
$$&lt;/p&gt;
&lt;p&gt;如果$R$和$S$中有相同的属性名，可在属性名前加关系名作为限定，以示区别。若$R$有$K_1$,个元组，$S$有$K_2$个元组，则$R$和$S$的广义笛卡儿积有$K_1 \times K2$个元组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$&amp;lt;t^n, t^m&amp;gt;$是一个元组$t^n$和$t^m$拼接成的一个元组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;投影&lt;/strong&gt;（Projection）：投影运算是从关系的&lt;u&gt;垂直方向&lt;/u&gt;进行运算，在关系$R$中选出若干属性列$A$组成新的关系，记作$\pi_A (R)$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
\pi_A (R) = \{ t[A]|t \in R \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择&lt;/strong&gt;（Selection）：选择运算是从关系的&lt;u&gt;水平方向&lt;/u&gt;进行运算，是从关系$R$中选择满足给定条件的诸元组，记作$\sigma_F (R)$其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
\sigma_A (R) = \{ t| (t \in R) \wedge F(t) = True \}
$$&lt;/p&gt;
&lt;p&gt;其中，$F(t)$中的运算对象可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性名（或列的序号）；&lt;/li&gt;
&lt;li&gt;常数；&lt;/li&gt;
&lt;li&gt;运算符；&lt;/li&gt;
&lt;li&gt;算术比较符（$&amp;lt;, \le, &amp;gt;, \ge, \neq$）；&lt;/li&gt;
&lt;li&gt;逻辑运算符（$\wedge, \vee, \neg$）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接&lt;/strong&gt;（Join）：连接运算是从两个关系$R$和$S$的笛卡儿积中选取满足条件的元组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以认为笛卡儿积是无条件连接，其他的连接操作认为是有条件连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$\theta$连接&lt;/strong&gt;：从$R$与$S$的笛卡儿积中选取属性间满足一定条件的元组。记作：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{X \theta Y} S = \{ t| (t=&amp;lt;t^n,t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[X] \ \theta \ t^m[Y]) \}
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X \theta Y$：连接的条件；&lt;/li&gt;
&lt;li&gt;$\theta$：比较运算符；&lt;/li&gt;
&lt;li&gt;$X$和$Y$分别为$R$和$S$上度数相等且可比的属性组；&lt;/li&gt;
&lt;li&gt;$t^n\left[ X \right]$表示$R$中$t^n$元组的对应于属性$X$的一个分量；&lt;/li&gt;
&lt;li&gt;$t^m[Y]$表示$S$中$t^m$元组的对应于属性$Y$的一个分量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\theta$连接也可以表示为：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{i \theta j} S = \{ t| (t=&amp;lt;t^n,t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] \ \theta \ t^m[j]) \}
$$&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$i=1,2,3,\cdots,n$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$j=1,2,3,\cdots,m$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$i \theta j$：&lt;/p&gt;
&lt;p&gt;从两个关系$R$和$S$中选取$R$的第$i$列和$S$的第$j$列之间满足$\theta$运算的元组进行连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\theta$连接可以由基本的关系运算笛卡儿积和选取运算导出。因此，$\theta$连接可表示为：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{X \theta Y} S = \sigma_{X \theta Y}(R \times S)
$$&lt;/p&gt;
&lt;p&gt;或：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{i \theta j} S = \sigma_{i \theta j}(R \times S)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等值连接&lt;/strong&gt;：当$\theta$为“=”时，称之为等值连接，记为$R \mathop{\Join}\limits_{i = j} S$，其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \mathop{\Join}\limits_{i = j} S = \{ t| (t=&amp;lt;t^n,t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] = t^m[j]) \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$F$连接：从关系$R$和$S$的笛卡尔积中选取属性值满足某一公式$F$的元组，记为$\mathop{\Join}\limits_{F}$。&lt;/p&gt;
&lt;p&gt;$F$是形为$F_1 \wedge F_2 \wedge \cdots \wedge F_n$的公式，每个$F_p$是形为$i \theta j$的式子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自然连接&lt;/strong&gt;：自然连接是一种特殊的等值连接，它要求两个关系中&lt;u&gt;进行比较的分量必须是相同的属性组&lt;/u&gt;，并且在结果集中&lt;u&gt;将重复属性列去掉&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;若：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$t^n \in R$，$t^m \in S$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R$和$S$具有相同的属性组$B$，且$B=(B_1,B_2,,B_k)$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假定$R$关系的属性：&lt;/p&gt;
&lt;p&gt;$$
A_1,A_2,\cdots,A_{n-k},B_1,B_2,\cdots,B_k
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$S$关系的属性：&lt;/p&gt;
&lt;p&gt;$$
B_1,B2,\cdots,B_k,B_{k+1},B_{k+2},\cdots,B_m
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自然连接可以记为$R \Join S$,其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \Join S = \{ t| (t = &amp;lt;t^n, t^m&amp;gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (R.B_1 = S.B_1) \wedge (R.B_2 = S.B_2) \wedge \cdots \wedge (R.B_k = S.B_k) \}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般连接是从关系的水平方向运算，而自然连接&lt;u&gt;不仅要从关系的水平方向运算，而且要从关系的垂直方向运算&lt;/u&gt;（去掉重复属性）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外连接&lt;/strong&gt;（Outer Jion）：外连接运算是连接运算的扩展，可以处理由于连接运算而缺失的信息。&lt;/p&gt;
&lt;p&gt;外连接运算有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;左外连接&lt;/strong&gt;（Left Outer Jion，⟕）：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值$null$充填所有来自右侧关系的属性，构成新的元组，将其加入自然连接的结果中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;右外连接&lt;/strong&gt;（Right Outer Jion，⟖）：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值$null$填充所有来自左侧关系的属性，构成新的元组，将其加入自然连接的结果中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全外连接&lt;/strong&gt;（Full Outer Jion，⟗）。完成左外连接和右外连接的操作。即填充左侧关系中所有与右侧关系中任一元组都不匹配的元组，并填充右侧关系中所有与左侧关系中任一元组都不匹配的元组，将产生的新元组加入自然连接的结果中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681454087063.png&#34;
	width=&#34;762&#34;
	height=&#34;575&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681454087063_hud13edc09469e2a4b2eff4fd4a8bf7c0a_99173_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681454087063_hud13edc09469e2a4b2eff4fd4a8bf7c0a_99173_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;除&lt;/strong&gt;（Division）：给定关系$R(X,Y)$和$S(Y,Z)$，$X、Y、Z$为属性组。$R \div S$应当满足元组在$X$上的分量值$x$的象集$Y_x$包含关系$S$在属性组$Y$上投影的集合。其形式定义如下：&lt;/p&gt;
&lt;p&gt;$$
R \div S = \{ t^n[X] | (t^n \in R) \wedge (\pi_y (S) \subseteq Y_x) \}
$$&lt;/p&gt;
&lt;p&gt;其中，$Y_x$为$x$在$R$中的象集，$x=t^n[X]$，且$R \div S$的结果集的属性组为$X$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除运算是同时从关系的水平方向和垂直方向进行运算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sql-语句&#34;&gt;SQL 语句&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;（&lt;strong&gt;Structured Query Language&lt;/strong&gt;，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进行各种操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSISQL。&lt;/p&gt;
&lt;p&gt;查看更多 &lt;a class=&#34;link&#34; href=&#34;../sql-%e8%af%ad%e5%8f%a5&#34; &gt;SQL语句&lt;/a&gt; 相关内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分类&#34;&gt;分类&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DDL&lt;/strong&gt;（&lt;strong&gt;Data Definition Language&lt;/strong&gt;，&lt;strong&gt;数据定义语言&lt;/strong&gt;）：用来定义数据库对象：数据库，表，列等。&lt;/p&gt;
&lt;p&gt;关键字：&lt;code&gt;CREATE&lt;/code&gt;、&lt;code&gt;DROP&lt;/code&gt;、&lt;code&gt;ALTER&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DML&lt;/strong&gt;（&lt;strong&gt;Data Manipulation Language&lt;/strong&gt;，&lt;strong&gt;数据操作语言&lt;/strong&gt;）：用来对数据库中表的数据进行增删改。&lt;/p&gt;
&lt;p&gt;关键字：&lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DQL&lt;/strong&gt;（&lt;strong&gt;Data Query Language&lt;/strong&gt;，&lt;strong&gt;数据查询语言&lt;/strong&gt;）：用来查询数据库中表的记录。&lt;/p&gt;
&lt;p&gt;关键字：&lt;code&gt;SELECT&lt;/code&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DCL&lt;/strong&gt;（&lt;strong&gt;Data Control Language&lt;/strong&gt;，&lt;strong&gt;数据控制语言&lt;/strong&gt;）：用来定义数据库的访问权限和安全级别，及创建用户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据定义语言ddl&#34;&gt;数据定义语言（DDL）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CREATE&lt;/code&gt;——创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建立数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;数据库名&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立基本表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; tab_name
(
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;数据类型&lt;/span&gt; [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列级完整性约束条件&lt;/span&gt;],
    ...
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表级完整性约束条件&lt;/span&gt;,
    ...
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完整性约束有3种子句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;：主键约束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHECK&lt;/code&gt;：检查约束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FOREIGN KEY&lt;/code&gt;：外键约束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOT NULL&lt;/code&gt;：非空约束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNIQUE&lt;/code&gt;：唯一约束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT&lt;/code&gt;：默认约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义列时使用的基本数据类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NTEGER&lt;/code&gt;：整数（也可写成&lt;code&gt;INT&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLOAT(n)&lt;/code&gt;：浮点数，精度至少为n位数字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NUMERIC(p,d)&lt;/code&gt;：定点数，由p位数字（不包括符号、小数点）组成，小数点后面有d位数字（也可写成&lt;code&gt;DECIMAL(p,d)&lt;/code&gt;或&lt;code&gt;DEC(p,d)&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHAR(n)&lt;/code&gt;：长度为n的定长字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DATETIME&lt;/code&gt;：日期时间型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE&lt;/code&gt;——修改表结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增加新列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;类型&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改列的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COLUMN&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;新类型&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COLUMN&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;DROP TABLE&lt;/code&gt;——删除基本表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据操纵语言dml&#34;&gt;数据操纵语言（DML）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;INSERT INTO&lt;/code&gt;——插入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接插入元组值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名（列名序列）&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;元组值&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;序列&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;元组值&lt;/span&gt;), (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;元组值&lt;/span&gt;), ...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入一个查询的结果值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名序列&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;查询语句&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;DELETE FROM&lt;/code&gt;——删除：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;条件表达式&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;UPDATE&lt;/code&gt;——修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表名&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;值表达式&lt;/span&gt;[, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;值表达式&lt;/span&gt;...]
[WHERE条件表达式]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据查询语言dql&#34;&gt;数据查询语言（DQL）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SELECT&lt;/code&gt;——查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目标表的列名或列表达式序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;
[&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行条件表达式&lt;/span&gt;]
[&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名序列&lt;/span&gt;
[&lt;span style=&#34;color:#66d9ef&#34;&gt;HAVING&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;组条件表达式&lt;/span&gt;]]
[&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;]...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;where-条件查询&#34;&gt;WHERE 条件查询&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目标表的列名或列表达式序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;行条件表达式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运算符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 或 &lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不大于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BETWEEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;范围在指定的两个值之间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不小于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IS NULL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;为 NULL 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IS NOT NULL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不为 NULL 的值&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逻辑与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;OR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逻辑或&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOT&lt;/code&gt;逻辑非&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配包含在集合中的值&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOT IN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定不包含在集合中的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;字符模糊配对&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;字符模糊配对包含以下通配符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目标表的列名或列表达式序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;
WHRER &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_ABC%&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;：表示任何字符出现任意次数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;：表示匹配单个任意字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;order-by-排序数据&#34;&gt;ORDER BY 排序数据&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ORDER BY&lt;/code&gt;可以指定多个列来排序，排序规则有：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;规则说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;ASC&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;升序排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;DESC&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;降序排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目标表的列名或列表达式序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;
[...]
[&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;] ...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;ORDER BY子句必须是SELECT命令中的最后一个子句。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;group-by-分组数据&#34;&gt;GROUP BY 分组数据&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目标表的列名或列表达式序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;
[&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列名序列&lt;/span&gt;
[&lt;span style=&#34;color:#66d9ef&#34;&gt;HAVING&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;组条件表达式&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HAVING&lt;/code&gt;是&lt;code&gt;GROUP BY&lt;/code&gt;的分组条件控制语句。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HAVING&lt;/code&gt;的操作符和&lt;code&gt;WHERE&lt;/code&gt;相同。&lt;/li&gt;
&lt;li&gt;被&lt;code&gt;WHERE&lt;/code&gt;过滤掉的记录并不会出现在分组中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;聚合函数&#34;&gt;聚合函数&lt;/h3&gt;
&lt;p&gt;聚合函数实现数据统计等功能。&lt;/p&gt;
&lt;p&gt;函数名|功能
&lt;code&gt;AVG&lt;/code&gt;|计算一个数值型表达式的平均值
&lt;code&gt;COUNT&lt;/code&gt;|计算指定表达式中选择的项数，&lt;code&gt;COUNT(*)&lt;/code&gt;统计查询输出的行数
&lt;code&gt;MIN&lt;/code&gt;|计算指定表达式中的最小值
&lt;code&gt;MAX&lt;/code&gt;|计算指定表达式中的最大值
&lt;code&gt;SUM&lt;/code&gt;|计算指定表达式中的数值总和
&lt;code&gt;STDEV&lt;/code&gt;|计算指定表达式中所有数据的标准差
&lt;code&gt;STDEVP&lt;/code&gt;|计算总体标准差&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目标表的列名或列表达式序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;使用了聚合函数的条件判断&lt;/span&gt;
[ ... ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;聚合函数&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关系名表序列&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;聚合函数可以使用算数运算符。&lt;/p&gt;
&lt;p&gt;聚合函数常与&lt;code&gt;GROUP BY&lt;/code&gt;子句一起使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;连接&#34;&gt;连接&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;连接符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;内连接（默认）。&lt;br&gt;内连接又包括等值连接、非等值连接和自连接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;OUTER JOIN&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外连接。&lt;br&gt;又包括：&lt;br&gt;&lt;code&gt;LEFT OUTER JOIN&lt;/code&gt;（左外连接）；&lt;br&gt;&lt;code&gt;RIGHT OUTER JOIN&lt;/code&gt;（右外连接）；&lt;br&gt;&lt;code&gt;FULL OUTER JOIN&lt;/code&gt;（全外连接）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;子查询&#34;&gt;子查询&lt;/h3&gt;
&lt;p&gt;子查询是指将&lt;code&gt;SELECT&lt;/code&gt;作为其它语句的子句使用。例如在&lt;code&gt;WHERE&lt;/code&gt;、&lt;code&gt;FROM&lt;/code&gt;中使用&lt;code&gt;SELECT&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;数据控制语言dcl&#34;&gt;数据控制语言（DCL）&lt;/h2&gt;
&lt;p&gt;数据控制控制的是&lt;strong&gt;用户对数据的存储访问权力&lt;/strong&gt;，是由DBA决定的。但是，某个用户对某类数据具有何种权利，是个&lt;strong&gt;政策问题&lt;/strong&gt;而不是技术问题。&lt;/p&gt;
&lt;p&gt;授权语句格式（&lt;code&gt;GRANT&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;] ...
[&lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象类型&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]...
[&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OPTION&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不同类型的操作对象有不同的操作权限，常见的操作权限如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;对象&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;对象类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;操作权限&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属性列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;TABLE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SELECT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INSERT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;DELETE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALL PRIVILEGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;视图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;TABLE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SELECT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INSERT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;DELETE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALL PRIVILEGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;TABLE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SELECT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INSERT&lt;/code&gt;、&lt;br&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;DELETE&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALTER&lt;/code&gt;、&lt;br&gt;&lt;code&gt;INDEX&lt;/code&gt;、&lt;br&gt;&lt;code&gt;ALL PRIVILEGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;DATABASE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;CREATETAB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;建立表的权限，可由DBA授予普通用户；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITH GRANT OPTION&lt;/code&gt;：表示获得了这些权限的用户还可以将权限赋给其他用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;收回权限语句格式（&lt;code&gt;REVOKE&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;REVOKE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;权限&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]...
[&lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象类型&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;用户&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;视图&#34;&gt;视图&lt;/h2&gt;
&lt;p&gt;视图是从一个或者多个基本表或视图中导出的虚拟表。&lt;/p&gt;
&lt;p&gt;创建视图：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VIEW&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;视图名&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;列表名&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;查询子句&lt;/span&gt;
[&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CHECK&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OPTION&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;子查询可以是任意复杂的&lt;code&gt;SELECT&lt;/code&gt;语句，但通常不允许含有&lt;code&gt;ORDER BY&lt;/code&gt;子句和&lt;code&gt;DISTINCT&lt;/code&gt;短语。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITH CHECK OPTION&lt;/code&gt;：表示对&lt;code&gt;UPDATE&lt;/code&gt;、&lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;操作时保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）。&lt;/li&gt;
&lt;li&gt;组成视图的属性列名或者全部省略或者全部指定。如果省略属性列名，则隐含该视图由&lt;code&gt;SELECT&lt;/code&gt;子查询目标列的主属性组成。&lt;/li&gt;
&lt;li&gt;对视图进行的增改操作实际上是对基本表进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删除视图：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VIEW&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;视图名&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;索引&#34;&gt;索引&lt;/h2&gt;
&lt;p&gt;数据库中的索引是&lt;u&gt;某个表中一列或者若干列值的集合&lt;/u&gt;和&lt;u&gt;相应的指向表中物理标识这些值的数据页的逻辑指针清单&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;索引分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚集索引：指索引表中索引项的顺序与表中记录的物理顺序一致的索引；&lt;/li&gt;
&lt;li&gt;非聚集索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对数据库表创建和删除索引，修改的是数据库的内模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;关系数据库的规范化&#34;&gt;关系数据库的规范化&lt;/h1&gt;
&lt;h2 id=&#34;关系模式&#34;&gt;关系模式&lt;/h2&gt;
&lt;p&gt;一个关系模式应当是一个五元组（含关系名）：$R&amp;lt;U,D,dom,F&amp;gt;$。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$R$：&lt;u&gt;关系名，是符号化的元祖语义；&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;$U$：&lt;u&gt;一组属性名；&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;$D$：属性组$U$中的属性来自域$D$；&lt;/li&gt;
&lt;li&gt;$dom$：属性到域的映射；&lt;/li&gt;
&lt;li&gt;$F$：&lt;u&gt;属性组$U$上的一组数据依赖（函数依赖）。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$D$和$dom$对模式设计关系不大，通常将关系模式看作是一个三元组：$R&amp;lt;U,F&amp;gt;$。&lt;/p&gt;
&lt;p&gt;当且仅当$U$上的一个关系$r$满足$F$时，称$r$为关系模式$R&amp;lt;U,F&amp;gt;$的一个关系。&lt;/p&gt;
&lt;h2 id=&#34;函数依赖&#34;&gt;函数依赖&lt;/h2&gt;
&lt;p&gt;数据依赖是&lt;u&gt;通过一个关系中属性间值的相等与否&lt;/u&gt;体现出来的&lt;u&gt;数据间的相互关系&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;函数依赖&lt;/strong&gt;：设$R(U)$是属性集U上的关系模式，&lt;u&gt;$X$、$Y$是$U$的子集&lt;/u&gt;。若对$R(U)$的任何一个可能的关系$r$，$r$中不可能存在两个元组在$X$上的属性值相等，而在$Y$上的属性值不等（即，&lt;u&gt;在关系$r$中，元组在$X$上的属性值相等，那么在$Y$上的属性值也相等&lt;/u&gt;），则称&lt;strong&gt;X函数决定Y&lt;/strong&gt;或&lt;strong&gt;Y函数依赖于X&lt;/strong&gt;，记作$X \rightarrow Y$。&lt;/p&gt;
&lt;p&gt;如，学生表中，$学号 \rightarrow 姓名$。&lt;/p&gt;
&lt;p&gt;属性之间有3种关系，但并不是每一种都存在函数依赖。如果$X$和$Y$之间的对应关系是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$1-1$：存在函数依赖$X \rightarrow Y$和$Y \rightarrow Y$；&lt;/li&gt;
&lt;li&gt;$n:1$：存在函数依赖$X \rightarrow Y$；&lt;/li&gt;
&lt;li&gt;$n:m$：不存在函数依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非平凡的函数依赖&lt;/strong&gt;：$X \rightarrow Y$，但$Y \not\subseteq X$，则称$X \rightarrow Y$是非平凡的函数依赖。&lt;/p&gt;
&lt;p&gt;例如，$姓名 \not\subseteq 学号$，则$学号 \rightarrow 姓名$是一个非平凡的函数依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;平凡的函数依赖&lt;/strong&gt;：如果$X \rightarrow Y$，但$Y \subseteq X$，则称$X \rightarrow Y$是平凡的函数依赖。&lt;/p&gt;
&lt;p&gt;例如，$学号 \subset (学号,课程号)$，则$(学号,课程号) \rightarrow 学号$是一个平凡的函数依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;完全函数依赖&lt;/strong&gt;：在R(U)中，如果$X \rightarrow Y$，并且对于X的任何一个真子集$X&#39;$都有**$X&#39;$不能决定$Y$**，则称$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$。&lt;/p&gt;
&lt;p&gt;即需要由$X$的所有属性才能决定$Y$的，才能称为完全函数依赖。&lt;/p&gt;
&lt;p&gt;如，$(学号,课程号) \rightarrow 成绩$。&lt;/p&gt;
&lt;p&gt;如果$X$仅包含一个属性，那么此时必为完全函数依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部分函数依赖&lt;/strong&gt;：如果$X \rightarrow Y$，但&lt;strong&gt;Y不完全函数依赖于X&lt;/strong&gt;，则称Y对X部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$。部分函数依赖也称为局部函数依赖。&lt;/p&gt;
&lt;p&gt;如，（学号，班级代号） $\rightarrow$ 姓名，因为学号 $\rightarrow$ 姓名，所以（学号，班级代号） $\stackrel{P}{\longrightarrow}$ 姓名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传递依赖&lt;/strong&gt;：在$R(U,F)$中（F是U上的一组函数依赖），如果$X \rightarrow Y,\ Y \not\subseteq X,\ Y \rightarrow Z$，则称&lt;strong&gt;Z对X传递依赖&lt;/strong&gt;（$X \rightarrow Z$）。&lt;/p&gt;
&lt;p&gt;即$X \stackrel{f}{\longrightarrow} Y$，且$Y \rightarrow Z$，则$X \rightarrow Z$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;码&lt;/strong&gt;：设$K$为$R(U,F)$中属性的组合，若$K \rightarrow U$，且对于$K$的任何一个真子集$K&#39;$都有$K&#39;$不能决定$U$，则$K$为$R$的候选码。&lt;/p&gt;
&lt;p&gt;即$K \stackrel{f}{\rightarrow} U$，那么K是R的候选码。&lt;/p&gt;
&lt;p&gt;若有多个候选码，则选一个作为主码（主键，主关键字）。候选码通常也称为&lt;strong&gt;候选关键字&lt;/strong&gt;（候选键，键）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主属性&lt;/strong&gt;和&lt;strong&gt;非主属性&lt;/strong&gt;：&lt;strong&gt;包含在任何一个候选码中&lt;/strong&gt;的属性称为主属性，否则称为非主属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外码&lt;/strong&gt;：若$R(U)$中的属性或属性组&lt;u&gt;$X$非$R$的码，但$X$是另一个关系的码&lt;/u&gt;，则称$X$为外码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;函数依赖的公理系统&lt;/strong&gt;（Armstrong公理系统）：&lt;/p&gt;
&lt;p&gt;设关系模式$R(U,F)$，其中$U$为属性集，$F是$U$上的一组函数依赖，那么有以下推理规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自反律&lt;/strong&gt;（A1）：若$Y \subseteq X \subseteq U$，则$X \rightarrow Y$为$F$所蕴涵（蕴含）。&lt;/p&gt;
&lt;p&gt;如，（学号，姓名） $\rightarrow$ 姓名是函数依赖所蕴涵的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增广律&lt;/strong&gt;（A2）：若$X \rightarrow Y$为F所蕴涵，且$Z \subseteq U$,则$XZ \rightarrow YZ$为$F$所蕴涵。&lt;/p&gt;
&lt;p&gt;如，学号 $\rightarrow$ 姓名，班级 $\subseteq$ 学生表，那么（学号，班级） $\rightarrow$ （姓名，班级）是函数依赖所蕴涵的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传递律&lt;/strong&gt;（A3）：若$X \rightarrow Y,\ Y \rightarrow Z$为$F$所蕴涵，则$X \rightarrow Z$为$F$所蕴涵。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据上述3条推理规则又可推出下述3条推理规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;合并规则&lt;/strong&gt;：若$X \rightarrow Y,\ X \rightarrow Z$，则$X \rightarrow YZ$为F所蕴涵。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伪传递律&lt;/strong&gt;：若$X \rightarrow Y,\ WY \rightarrow Z$，则$XW \rightarrow Z$为F所蕴涵。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分解规则&lt;/strong&gt;：若$X \rightarrow Y,\ Z \subseteq Y$，则$X \rightarrow Z$为F所蕴涵。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;合并规则和分解规则是两个互逆的规则。即$X \rightarrow Y,\ X \rightarrow Z$，可得$X \rightarrow YZ$；那么$X \rightarrow YZ$，也可得$X \rightarrow Y,\ X \rightarrow Z$（因为$Y,Z \sub YZ$）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;结论&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;元组在$X$上的属性值相等，那么在$Y$上的属性值也相等&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X$函数决定$Y$或$Y$函数依赖于$X$，记作$X \rightarrow Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非平凡的函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Y \not\subseteq X$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$是非平凡的函数依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;平凡的函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Y \subseteq X$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$是平凡的函数依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;完全函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$X&#39; \subset X$，$X&#39; \not\rightarrow Y$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;部分函数依赖（局部函数依赖）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$X \stackrel{f}{\not\longrightarrow} Y$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Y$对$X$部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;传递依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Y \not\subseteq X$，$Y \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Z$对$X$传递依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;码（候选码，候选关键字）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;若$K \stackrel{f}{\rightarrow} U$，则$K$为$R$的候选码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;主属性&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包含在任何一个候选码中的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非主属性&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不包含在任何一个候选码中的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X$非$R$的码，但$X$是另一个关系的码，则称$X$为外码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Armstrong公理系统：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;定律&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;F蕴含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自反律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$Y \subseteq X \subseteq U$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增广律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y$，$Z \subseteq U$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$XZ \rightarrow XZ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;传递律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ Y \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Z$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;规则&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;F蕴含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;合并规则&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ X \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow YZ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;伪传递律&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ WY \rightarrow Z$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$XW \rightarrow Z$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分解规则&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Y,\ Z \subseteq Y$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$X \rightarrow Z$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;闭包计算&#34;&gt;闭包计算&lt;/h2&gt;
&lt;p&gt;设关系模式$R&amp;lt;U,F&amp;gt;$，其中$U$为属性集，$F$是$U$上的一组函数依赖。称所有用Armstrong公理从F推出的函数依赖$X \rightarrow A_i$中，$A_i(X,A_i \subseteq U)$的属性集合为$X$的属性闭包，记为$X^{+}_{F}$或$X^{+}$。&lt;/p&gt;
&lt;p&gt;定理：&lt;/p&gt;
&lt;p&gt;设关系模式$R&amp;lt;U,F&amp;gt;$，其中$F$为函数依赖集，$X,Y \subseteq U$，则从$F$推出$X \rightarrow Y$的充要条件是$Y \subseteq X^{+}$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性的闭包计算用于求主键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，给定关系$R(U,F)$，其中$U={A,B,C,D,E,H}$，$F={A \rightarrow B, B \rightarrow DH, A \rightarrow H, C \rightarrow E }$。&lt;/p&gt;
&lt;p&gt;先根据$F$选取仅在$\rightarrow$左边出现的属性集（例如，$A$、$C$和$AC$）。根据选取的属性集进行闭包运算（先对$A$进行运算）：&lt;/p&gt;
&lt;p&gt;$$
(A)^{+} \rightarrow (A \ BH)^{+} \rightarrow (AB \ D \ H)^{+} \rightarrow (ABDH)
$$&lt;/p&gt;
&lt;p&gt;此时，$(ABDH)^{+}$无论再怎么推，结果都是$(ABDH)$，说明对$A$的闭包计算已经结束了，结果就是$(ABDH)$。&lt;/p&gt;
&lt;p&gt;而$(ABDH) \neq U$，说明$A$并不是关系$R$的主键。&lt;/p&gt;
&lt;p&gt;而对于$C$的函数依赖仅有$C \rightarrow E$，所以此时应该对$(AC)$进行闭包运算：&lt;/p&gt;
&lt;p&gt;$$
(AC)^{+} \rightarrow (ABDH \ CE)^{+} \rightarrow (ABCDEH)
$$&lt;/p&gt;
&lt;p&gt;此时对$(AC)$的闭包计算结果$(ABCDEH) = U$，说明$(AC)$是关系$R$的主键。&lt;/p&gt;
&lt;h2 id=&#34;关系模式的分解&#34;&gt;关系模式的分解&lt;/h2&gt;
&lt;p&gt;对存在&lt;strong&gt;数据冗余&lt;/strong&gt;、&lt;strong&gt;插入异常&lt;/strong&gt;、&lt;strong&gt;删除异常&lt;/strong&gt;问题的关系模式，应采取&lt;u&gt;将一个关系模式分解为多个关系模式的方法进行处理&lt;/u&gt;（原来存储在一个二维表内的数据就要分散到多个二维表中）。要求是分解后的二维表不能丢失分解前二维表的信息。&lt;/p&gt;
&lt;p&gt;为使分解后的模式保持原模式所满足的特性，其基本要求是模式分解具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无损连接性；&lt;/li&gt;
&lt;li&gt;保持函数依赖性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无损连接&#34;&gt;无损连接&lt;/h3&gt;
&lt;p&gt;无损连接性指的是对关系模式分解时，原关系模式下，任一合法的关系实例，在&lt;u&gt;分解之后应能通过&lt;strong&gt;自然连接&lt;/strong&gt;运算恢复&lt;/u&gt;起来。&lt;/p&gt;
&lt;p&gt;设$\rho = \{ R_1&amp;lt;U_1,F_1&amp;gt;,\ R_2&amp;lt;U_2,F_2&amp;gt;,\ \cdots,\ R_k&amp;lt;U_k,F_k&amp;gt; \}$是关系模式$R&amp;lt;U,F&amp;gt;$的一个分解，如果对于$R$的任一满足$F$的关系$r$都有：&lt;/p&gt;
&lt;p&gt;$$
r = \pi_{R1}(r) \Join \pi_{R2}(r) \Join \cdots \Join \pi_{Rk}(r)
$$&lt;/p&gt;
&lt;p&gt;则称这个分解$\rho$是满足依赖集$F$的无损连接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\pi()$运算是投影运算。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例如$\pi_{R1}(r)$，表示关系$r$在$R_1$上的投影。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Join$运算是自然连接运算。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人理解：&lt;/p&gt;
&lt;p&gt;无损连接性就是指，关系模式拆分后（分成若干个小的关系模式，即$\rho$），$\rho$中的关系模式从总体上看，保持着与$R$一致的连接。$\rho$中的关系模式通过自然连接保持着原本的关系模式。&lt;u&gt;重要的是$rho$中的关系模式可以通过&lt;strong&gt;自然连接&lt;/strong&gt;恢复到原关系模式。&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;验证无损连接的充要条件：&lt;/p&gt;
&lt;p&gt;如果$R$的分解为$\rho = \{R_1,R_2\}$，$F$为$R$所满足的函数依赖集合，则分解$\rho$具有无损连接性的充分必要条件为：&lt;/p&gt;
&lt;p&gt;$$
R_1 \cap R_2 \rightarrow (R_1 - R_2) \\
或 \\
R_1 \cap R_2 \rightarrow (R_2 - R_1)
$$&lt;/p&gt;
&lt;p&gt;无损连接的判定算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;构造一个$k$行$n$列的表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一列对应一个属性$A_j$；&lt;/li&gt;
&lt;li&gt;每一行对应分解$rho$中的一个关系模式$R_i&amp;lt;U_i, F_i&amp;gt;$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若属性$A_j$属于$U_i$，则在第$i$行第$j$列上放符号$a_j$，否则放符号$b_{ij}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逐个检查$F$中的每一个函数依赖$FD_i$，并修改表中的元素：&lt;/p&gt;
&lt;p&gt;取$F$中一个函数依赖$X_i \rightarrow A_j$（$X_i$要属于$rho$中的任一关系），考虑这些行中第$j$列元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若其中有$a_j$，则全部改为$a_j$；&lt;/li&gt;
&lt;li&gt;否则全部改为$b_{mj}$，$m$为这些行的行号最小值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若某一行变成了$(a_1, a_2, \cdots, a_n)$，则分解$rho$具有无损连接性，算法终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比较扫描前后，表有无变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如有变化，则返回第2步；&lt;/li&gt;
&lt;li&gt;否则算法终止，分解$rho$是有损连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，关系模式$R&amp;lt;U,F&amp;gt;$，其中，$U = \{ A, B, C \}$，$F = \{ A \rightarrow B, C \rightarrow B \}$。&lt;/p&gt;
&lt;p&gt;判断$\rho = \{ AC, BC \}$是否具有无损连接性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;构造初始表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_i$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$A$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$B$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$C$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_1$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$b_{12}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$b_{21}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_2$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_3$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考察$A \rightarrow B$，将$AC$行的$B$列改为$a_2$：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_i$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$A$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$B$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$C$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_1$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_2$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$b_{21}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_2$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$a_3$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从上表中看出$AC$行为${a_1, a_2, a_3}$，所以判断该关系模式具有无损连接性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;保持函数依赖&#34;&gt;保持函数依赖&lt;/h3&gt;
&lt;p&gt;设有关系模式$R$，$F$是$R$的函数依赖集，$Z$是$R$的一个属性集合，则称$Z$所涉及到的$F^+$中所有函数依赖为$F$在$Z$上的投影，即为$\pi_Z(F)$，有：&lt;/p&gt;
&lt;p&gt;$$
\pi_Z(F) = \{ x \rightarrow y | (x \rightarrow y) \in F^+ 且 xy \subseteq z \}
$$&lt;/p&gt;
&lt;p&gt;设关系模式$R$的一个分解$\rho = \{ R_1&amp;lt;U_1,F_1&amp;gt;,\ R_2&amp;lt;U_2,F_2&amp;gt;,\ \cdots,\ R_k&amp;lt;U_k,F_k&amp;gt; \}$，$F$是$R$的依赖集，如果$F$等价于$\pi_{R1}(F) \cup \pi_{R2}(F) \cup \cdots \cup \pi_{Rk}(F)$，则称分解$\rho$具有依赖保持性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该定义中的&amp;quot;等价&amp;quot;并不代表相等，而是$F$中所包含的函数依赖在分解的函数依赖中也被包含，或者在分解的函数依赖中能被推出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个无损连接分解不一定具有依赖保持性；&lt;/li&gt;
&lt;li&gt;一个依赖保持性分解不一定具有无损连接性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;范式&#34;&gt;范式&lt;/h2&gt;
&lt;p&gt;关系数据库中的&lt;u&gt;关系必须满足一定的规范化要求&lt;/u&gt;，对于不同的规范化程度可用范式来衡量。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;范式是符合某一种级别的关系模式的集合&lt;/u&gt;，是衡量关系模式规范化程度的标准，达到范式的关系才是规范化的。&lt;/p&gt;
&lt;p&gt;一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这个过程称为规范化。&lt;/p&gt;
&lt;p&gt;主要有6种范式，高一级范式是在低一级范式的基础上进一步满足一些要求，按要求从低到高分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一范式（1NF）：若关系模式R的&lt;u&gt;每一个分量是不可再分的数据项&lt;/u&gt;，则关系模式R属于第一范式。&lt;/p&gt;
&lt;p&gt;如，关系模式$R&amp;lt;U,F&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U = \{ 学号,姓名,学院,院长,课程号,课程名,成绩 \} \\
F = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长,课程号 \rightarrow 课程名,(学号,课程号) \rightarrow 成绩 \}
$$&lt;/p&gt;
&lt;p&gt;1NF可能存在的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据冗余&lt;/strong&gt;：数据的冗余度大，R中可能出现多个元组在多个属性集中值相同；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改异常&lt;/strong&gt;：引起修改操作的不一致性，修改一条记录可能需要修改其他多条记录才能保持数据一致性（由数据冗余引起）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;插入异常&lt;/strong&gt;：主码不能取空值或部分空值，会出现插入异常；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除异常&lt;/strong&gt;：本该删除但又客观存在的元组，会出现删除异常。&lt;/p&gt;
&lt;p&gt;即，删除掉的数据可能包含着其他本不该被删除的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题的原因是1NF中可能存在&lt;u&gt;部分函数依赖&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二范式（2NF）：若关系模式$R \in 1NF$，且&lt;u&gt;每一个非主属性完全依赖于码&lt;/u&gt;，则关系模式$R \in 2NF$。&lt;/p&gt;
&lt;p&gt;即当&lt;u&gt;1NF消除了对主键的部分函数依赖后就能满足2NF&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;例如，$学号 \rightarrow 学院$，即$(学号,课程号) \stackrel{P}{\rightarrow} 学院$（部分依赖于码），所以$R \not\in 2NF$。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;模式的分解需要保持函数依赖。&lt;/u&gt;根据$F$，将$R$分解为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$R_1&amp;lt;U_1,F_1&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_1 = \{ 学号,姓名,学院,院长 \} \\
F_1 = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_2&amp;lt;U_2,F_2&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_2 = \{ 课程号,课程名 \} \\
F_2 = \{ 课程号 \rightarrow 课程名 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_3&amp;lt;U_3,F_3&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_3 = \{ 学号,课程号,成绩 \} \\
F_3 = \{ (学号,课程号) \rightarrow 成绩 \}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则，$R1 \in 2NF$，$R2 \in 2NF$，$R3 \in 2NF$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2NF可能依然会存在数据冗余、修改异常、插入异常删除异常等问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三范式（3NF）：若关系模式$R(R \in 2NF)$中&lt;u&gt;任何一个非主属性都不传递函数依赖于码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;若关系模式$R&amp;lt;U,F&amp;gt;$（$U$为关系集，$F$为函数依赖集）中不存在这样的码$X$，使得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X \rightarrow Y(Y \not\rightarrow X)$，&lt;/li&gt;
&lt;li&gt;$Y \rightarrow Z$，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则关系模式$R \in 3NF$，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Y$为属性组，&lt;/li&gt;
&lt;li&gt;$Z(Z \not\subseteq Y)$为非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即当&lt;u&gt;2NF消除了非主属性对主键的传递函数依赖&lt;/u&gt;，则称为3NF。&lt;/p&gt;
&lt;p&gt;如，$R_1$中有$学号 \rightarrow 学院$，$学院 \rightarrow 院长$（非主属性&amp;quot;院长&amp;quot;传递依赖于主键&amp;quot;学号&amp;quot;）。可将$R_1$分解为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$R_{11}&amp;lt;U_{11},F_{11}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_{11} = \{ 学号,姓名,学院 \} \\
F_{11} = \{ 学号 \rightarrow 姓名, 学号 \rightarrow 学院 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_{12}&amp;lt;U_{12},F_{12}&amp;gt;$：&lt;/p&gt;
&lt;p&gt;$$
U_{12} = \{ 学院,院长 \} \\
F_{12} = \{ 学院 \rightarrow 院长 \}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BC范式（BCNF）：关系模式$R&amp;lt;U,F&amp;gt;$属于BCNF（$R$首先得满足3NF），当且仅当其$F$中&lt;u&gt;每个依赖的决定因素必定包含R的某个候选码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;由BCNF的定义可以得到结论，一个满足BCNF的关系模式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;满足3NF。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有&lt;u&gt;非主属性&lt;/u&gt;对每一个&lt;u&gt;码&lt;/u&gt;都是&lt;u&gt;完全函数依赖&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;$$
码 \stackrel{f}{\longrightarrow} 非主属性
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有的&lt;u&gt;主属性对每一个&lt;/u&gt;不包含它的码&lt;/u&gt;，也是&lt;u&gt;完全函数依赖&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有任何属性完全函数依赖于非码的任何一组属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个满足BCNF的关系模式R己&lt;u&gt;消除了&lt;strong&gt;插入&lt;/strong&gt;和&lt;strong&gt;删除异常&lt;/strong&gt;&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四范式（4NF）：&lt;/p&gt;
&lt;p&gt;多值依赖：&lt;/p&gt;
&lt;p&gt;给定的关系模式$R(U,F)$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X,Y,Z \subseteq U$，&lt;/li&gt;
&lt;li&gt;$Z=U-X-Y$（$Z$是$X \cup Y$的差集）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当且仅当对$R$的任一关系$r$，给定的一对$(x,z)$值，有一组$Y$的值，这组值仅仅决定于$x$值而与$z$值无关。则关系模式$R$中的多值依赖$X \rightarrow\rightarrow Y$成立。&lt;/p&gt;
&lt;p&gt;平凡的多值依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X \rightarrow\rightarrow Y$成立，&lt;/li&gt;
&lt;li&gt;$Z = \Phi$，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则$X \rightarrow\rightarrow Y$为平凡的多值依赖。&lt;/p&gt;
&lt;p&gt;例如，课程$\rightarrow\rightarrow$任课老师，课程$\rightarrow\rightarrow$参考书。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681986736869.png&#34;
	width=&#34;401&#34;
	height=&#34;168&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681986736869_hub94b74037a183c6a89e4bcd8421bb42f_31992_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681986736869_hub94b74037a183c6a89e4bcd8421bb42f_31992_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;多值依赖表示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;572px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;4NF定义：&lt;/p&gt;
&lt;p&gt;设有一关系模式$R(U,F)$是1NF，如果对于$R$的每个&lt;u&gt;非平凡多值依赖&lt;/u&gt;$X \rightarrow\rightarrow Y(Y \not\subseteq X)$，&lt;u&gt;$X$都包含了$R$的一个候选码&lt;/u&gt;，则称$R$是第四范式，记为4NF。&lt;/p&gt;
&lt;p&gt;例如，课程$\rightarrow\rightarrow$任课老师，课程$\rightarrow\rightarrow$参考书都是非平凡多值依赖，而课程不是码，所以不属于4NF。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第五范式（5NF）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;范式之间的关系：&lt;/p&gt;
&lt;p&gt;$$
5NF \sub 4NF \sub BCNF \sub 3NF \sub 2NF \sub 1NF
$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681894653450.png&#34;
	width=&#34;564&#34;
	height=&#34;309&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681894653450_hufd0c331a204cb2191b602cbf89c9254e_19807_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681894653450_hufd0c331a204cb2191b602cbf89c9254e_19807_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;规范化范式的包含关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3NF和BCNE它们是进行规范化的主要目标。&lt;/p&gt;
&lt;p&gt;1NF到4NF之间的转换关系：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;范式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;转换关系&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每一个分量是不可再分的数据项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1NF消除了部分函数依赖后满足2NF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2NF消除了非主属性对码的传递函数依赖后满足3NF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BCNF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3NF消除了主属性对码的部分和传递函数依赖后满足BCNF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4NF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BCNF消除非平凡且非函数依赖的多值依赖后满足4NF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681988070233.png&#34;
	width=&#34;288&#34;
	height=&#34;303&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681988070233_huc82f8c088bb0c067181a613d8b65e62c_36441_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1681988070233_huc82f8c088bb0c067181a613d8b65e62c_36441_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;规范化步骤&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;几种范式及其分解的性质：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;性质&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3NF&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;BCNF&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;4NF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;消除函数依赖带来冗余&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;消除多值函数依赖带来冗余&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保持函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保持多值函数依赖&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据库设计&#34;&gt;数据库设计&lt;/h1&gt;
&lt;p&gt;新奥尔良（New Orleans）法式目前公认的数据库设计方法，它将数据库设计分为以下几个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户需求分析&lt;/li&gt;
&lt;li&gt;概念结构设计&lt;/li&gt;
&lt;li&gt;逻辑结构设计&lt;/li&gt;
&lt;li&gt;物理结构设计&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这几个阶段之后是与数据库建立和运行有关的阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据库实施&lt;/li&gt;
&lt;li&gt;数据库运行和维护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682505975157.png&#34;
	width=&#34;382&#34;
	height=&#34;711&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682505975157_hu7950d0a7bbf6248186699719c01d30ad_79693_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682505975157_hu7950d0a7bbf6248186699719c01d30ad_79693_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;数据库设计步骤&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;53&#34;
		data-flex-basis=&#34;128px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;需求分析&#34;&gt;需求分析&lt;/h2&gt;
&lt;p&gt;需求分析是项目确定后，对数据库应用系统所要设计的&lt;u&gt;内容（数据）&lt;/u&gt;和&lt;u&gt;功能（行为）&lt;/u&gt;的整理和描述，是以用户的角度来认识系统。&lt;/p&gt;
&lt;p&gt;需求分析是后面几个阶段，&lt;u&gt;逻辑结构设计&lt;/u&gt;、&lt;u&gt;物理结构设计&lt;/u&gt;以及&lt;u&gt;应用程序设计&lt;/u&gt;的依据。&lt;/p&gt;
&lt;p&gt;需求分析将收集到的零碎的、局部的数据分析整理后，建立&lt;u&gt;需求说明文档&lt;/u&gt;、&lt;u&gt;数据字典&lt;/u&gt;和&lt;u&gt;数据流程图&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;需求分析还包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据流分析：是对事务处理所需的原始数据的收集，及经过处理后所得数据及其流向。&lt;/p&gt;
&lt;p&gt;使用数据流图（DFD）表示。DFD能指出数据的流向和需要进行的事物处理（不涉及如何处理）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据字典：是关于数据库中数据的描述，即元数据（不是数据本身）。&lt;/p&gt;
&lt;p&gt;数据字典包括5个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据项；&lt;/li&gt;
&lt;li&gt;数据结构；&lt;/li&gt;
&lt;li&gt;数据流；&lt;/li&gt;
&lt;li&gt;数据存储；&lt;/li&gt;
&lt;li&gt;加工。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;系统需求说明书是需求分析阶段的成果&lt;/u&gt;，主要包括&lt;u&gt;数据流图&lt;/u&gt;、&lt;u&gt;数据字典&lt;/u&gt;、&lt;u&gt;各种说明性表格&lt;/u&gt;、&lt;u&gt;统计输出表和系统功能结构图&lt;/u&gt;等。&lt;/p&gt;
&lt;p&gt;需求分析阶段的工作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682560887456.png&#34;
	width=&#34;646&#34;
	height=&#34;291&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682560887456_hub24d924f6ecdb59b0c05cde9f6a94c8c_58795_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682560887456_hub24d924f6ecdb59b0c05cde9f6a94c8c_58795_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;需求分析阶段的工作步骤&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;532px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;概念结构设计&#34;&gt;概念结构设计&lt;/h2&gt;
&lt;p&gt;概念设计阶段的目标是产生整体数据库概念结构，即概念模型，它是与DBMS无关的。&lt;/p&gt;
&lt;p&gt;概念结构设计的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自顶向下&lt;/li&gt;
&lt;li&gt;自底向上&lt;/li&gt;
&lt;li&gt;逐步扩张&lt;/li&gt;
&lt;li&gt;混合策略（自顶向下和自底向上相结合）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概念结构是对现实世界的一种抽象，从数据库设计角度看，主要是数据抽象，一般有如下3种数据抽象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类&lt;/li&gt;
&lt;li&gt;聚集&lt;/li&gt;
&lt;li&gt;概括&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局部视图设计就是对某个局部应用设计其分一R图，也称局部E-R图。其基本步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682560993863.png&#34;
	width=&#34;717&#34;
	height=&#34;341&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682560993863_huf62446c235f8abd7d4a5d741b96b438b_65906_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682560993863_huf62446c235f8abd7d4a5d741b96b438b_65906_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;概念结构设计的工作步骤&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;504px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定局部结构范围；&lt;/li&gt;
&lt;li&gt;定义实体；&lt;/li&gt;
&lt;li&gt;联系定义；&lt;/li&gt;
&lt;li&gt;属性分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;概念模型的建立采用E-R模型。&lt;/p&gt;
&lt;h3 id=&#34;e-r-模型&#34;&gt;E-R 模型&lt;/h3&gt;
&lt;p&gt;E-R模型用E-R图（ERD）表示，E-R图有以下几个成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体&lt;/strong&gt;：用&lt;strong&gt;矩形&lt;/strong&gt;表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;联系&lt;/strong&gt;：用&lt;strong&gt;棱形&lt;/strong&gt;表示，并用无向边分别与有关实体连接起来，同时在无向边标注联系的类型（$1:1$，$1:n$ 或 $m:n$）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;：用&lt;strong&gt;椭圆形&lt;/strong&gt;表示，并用无向边将其与相应的实体连接起来&lt;/p&gt;
&lt;p&gt;E-R模型中的属性有以下分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单属性和复合属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单属性是原子的、不可再分的；&lt;/li&gt;
&lt;li&gt;复合属性可以细分为更小的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单值属性和多值属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单值属性是一个属性对应一个值；&lt;/li&gt;
&lt;li&gt;多值属性是一个属性对应一组值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NULL属性：实体在某个属性上没有值或属性值未知时，使用NULL值表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;派生属性：派生属性可以从其他属性得来（通过运算等方式求出）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩充的E-R模型（用来表达更多具有特殊语义的成分）有以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弱实体&lt;/strong&gt;：使用&lt;strong&gt;双线矩形框&lt;/strong&gt;表示。将需要依赖其他实体存在的实体。&lt;/p&gt;
&lt;p&gt;实体间的所有（Ownership，拥有）关系代表一个实体对另一些实体具有很强的依赖关系，即一个实体的存在必须以另一个实体为前提。&lt;/p&gt;
&lt;p&gt;例如职工与家属的联系，家属总是属于某职工的（在关系模式中需要依赖职工而存在），所以家属是弱实体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特殊化&lt;/strong&gt;：将一个实体集&lt;u&gt;按照某些特性区分为几个&lt;strong&gt;子实体&lt;/strong&gt;&lt;/u&gt;。这种从普遍到特殊的过程即为特殊化。&lt;/p&gt;
&lt;p&gt;子实体的图形表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1684564987147.png&#34;
	width=&#34;256&#34;
	height=&#34;145&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1684564987147_huad14f3e1152e9df0e94e04c64131c1cf_1087_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1684564987147_huad14f3e1152e9df0e94e04c64131c1cf_1087_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;子实体&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;423px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;子实体由称为子类，它会有一个超类，并且能继承超类的属性，超类的属性是实体集中所有子实体的相同属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E-R图中的主要构件（包含扩充的E-R模型成分）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682508598814.png&#34;
	width=&#34;1035&#34;
	height=&#34;391&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682508598814_hub0bc3034b48557bb84109435ab8e458e_191424_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682508598814_hub0bc3034b48557bb84109435ab8e458e_191424_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;E-R图中的主要构件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;635px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;建立概念结构模型&#34;&gt;建立概念结构模型&lt;/h3&gt;
&lt;p&gt;建立概念结构模型的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择局部应用：&lt;/p&gt;
&lt;p&gt;需求分析阶段得到的大量数据分散杂乱，许多数据会应用于不同的处理，数据与数据之间关联关系也较为复杂。要最终&lt;u&gt;确定实体、属性和联系，必须根据数据流图这一线索理清数据&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;数据流图是对业务处理过程从高层到底层的一级抽象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高层抽象流图一般反映系统的概貌，对数据的引用较为笼统；&lt;/li&gt;
&lt;li&gt;底层又可能过于细致，不能体现数据的关联关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此要&lt;u&gt;选择适当层次的数据流图，让这一层的每一部分对应一个局部应用，实现某一项功能。从这一层入手，就能很好地设计&lt;strong&gt;分E-R图&lt;/strong&gt;&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逐一设计分E-R图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E-R图合并：&lt;/p&gt;
&lt;p&gt;根据局部应用设计好各局部E-R图之后，就可以对各分E-R图进行合并。&lt;/p&gt;
&lt;p&gt;合并的目的在于，在合并过程中解决分E-R图中相互存在的冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分E-R图之间的冲突主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性冲突&lt;/strong&gt;：同一属性在不同的分E-R图上的属性类型、取值范围和数据单位等可能会不一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名冲突&lt;/strong&gt;：相同意义的属性在不同的分E-R图上可能会有不同的命名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构冲突&lt;/strong&gt;：同一实体在不同的分E-R图中可能会有不同的属性；同一对象在某一分E-R图中被抽象为实体，而在另一分E-R图中又可能被抽象为属性，反之亦然。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逻辑结构设计&#34;&gt;逻辑结构设计&lt;/h2&gt;
&lt;p&gt;逻辑结构设计就是在概念结构设计的基础上进行数据模型设计，可以是层次模型、网状模型和关系模型。&lt;/p&gt;
&lt;p&gt;通常是把概念模型转换成为&lt;u&gt;某个具体的数据库管理系统所支持的结构数据模型&lt;/u&gt;（与DBMS有关）。即，将概念结构设计所得的E-R模型转换成关系模式。&lt;/p&gt;
&lt;p&gt;逻辑结构设计的工作步骤：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682577339219.png&#34;
	width=&#34;581&#34;
	height=&#34;296&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682577339219_hu0e28af6a5a7453a0a5eb6666d48c94c7_44563_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682577339219_hu0e28af6a5a7453a0a5eb6666d48c94c7_44563_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;逻辑结构设计的工作步骤&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;471px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;e-r-模型转换关系模式&#34;&gt;E-R 模型转换关系模式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实体向关系模式的转换：&lt;/p&gt;
&lt;p&gt;将E-R图中的实体逐一转换成为一个关系模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体名：对应关系模式的名称；&lt;/li&gt;
&lt;li&gt;实体的属性：转换成关系模式的属性；&lt;/li&gt;
&lt;li&gt;实体标识符：关系的码（键）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;超类和子类的转换：超类和子类定义为两个关系模式，将超类的主键加到子类中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联系向关系模式的转换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一对一联系的转换：&lt;/p&gt;
&lt;p&gt;有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性包括该联系所关联的两个实体的码及联系的属性，关系的码取自任一方实体的码。&lt;/p&gt;
&lt;p&gt;那么一个一对一联系需要转换成三个关系模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式2（一般使用该方式）：将联系归并到关联的两个实体的任一方，给待归并的一方实体属性集中增加另一方实体的码和该联系的属性即可，归并后的实体码保持不变。&lt;/p&gt;
&lt;p&gt;一个一对一联系仅需转换成两个关系模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682562445900.png&#34;
	width=&#34;304&#34;
	height=&#34;358&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682562445900_hu39b33fe28157809884f3b45df834a34e_28041_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682562445900_hu39b33fe28157809884f3b45df834a34e_28041_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;联系向关系模式的转换示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;84&#34;
		data-flex-basis=&#34;203px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式1：&lt;/p&gt;
&lt;p&gt;厂长（&lt;strong&gt;姓名&lt;/strong&gt;，性别，年龄）&lt;/p&gt;
&lt;p&gt;工厂（&lt;strong&gt;厂号&lt;/strong&gt;，厂名，地点）&lt;/p&gt;
&lt;p&gt;管理（（厂长）&lt;strong&gt;姓名&lt;/strong&gt;，厂号，任期）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;粗体代表该关系模式的码。管理的码可以为姓名或厂号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式2：&lt;/p&gt;
&lt;p&gt;厂长（姓名，性别，年龄）&lt;/p&gt;
&lt;p&gt;工厂（厂号，厂名，地点，（厂长）姓名，任期）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一对多联系的转换：&lt;/p&gt;
&lt;p&gt;两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个实体的码及联系的属性，&lt;u&gt;关系的码是多方实体的码&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;方式2（一般使用该方式）：将联系&lt;u&gt;归并到关联的两个实体的多方&lt;/u&gt;，给待归并的多方实体属性集中增加一方实体的码和该联系的属性即可，归并后的多方实体码保持不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682563544291.png&#34;
	width=&#34;315&#34;
	height=&#34;361&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682563544291_hue1cce8af0395e2bd704f6df0a3e3321e_30915_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682563544291_hue1cce8af0395e2bd704f6df0a3e3321e_30915_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一对多联系转换的例子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;209px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式1:&lt;/p&gt;
&lt;p&gt;仓库（&lt;strong&gt;仓库号&lt;/strong&gt;，地点，面积）&lt;/p&gt;
&lt;p&gt;商品（&lt;strong&gt;货号&lt;/strong&gt;，商品名，价格）&lt;/p&gt;
&lt;p&gt;仓储（&lt;strong&gt;货号&lt;/strong&gt;，仓库号，数量）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式2：&lt;/p&gt;
&lt;p&gt;仓库（&lt;strong&gt;仓库号&lt;/strong&gt;，地点，面积）&lt;/p&gt;
&lt;p&gt;商品（&lt;strong&gt;货号&lt;/strong&gt;，商品名，价格，仓库号，数量）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多对多联系的转换：&lt;/p&gt;
&lt;p&gt;多对多联系只能转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个多方实体的码及联系的属性，关系的码是多方实体的码构成的属性组。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682564018777.png&#34;
	width=&#34;327&#34;
	height=&#34;373&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682564018777_hu8cf40dc2a076405a9cb5ca4646519d5e_36334_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/uTools_1682564018777_hu8cf40dc2a076405a9cb5ca4646519d5e_36334_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;多对多联系转换的示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;转换成：&lt;/p&gt;
&lt;p&gt;学生（&lt;strong&gt;学号&lt;/strong&gt;，姓名，性别，年龄）&lt;/p&gt;
&lt;p&gt;课程（&lt;strong&gt;课程号&lt;/strong&gt;，课程名，学时）&lt;/p&gt;
&lt;p&gt;选修（&lt;strong&gt;（学号，课程号）&lt;/strong&gt;，成绩）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;关系模式的规范化&#34;&gt;关系模式的规范化&lt;/h3&gt;
&lt;p&gt;转换后的关系模式可能存在数据冗余、更新异常等问题，所以需要进一步的规范化处理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据语义确定各关系模式的数据依赖（函数依赖）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据数据依赖确定关系模式的范式。判定关系模式是否达到了3NF或4NF。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果关系模式不符合要求，要根据关系模式的分解算法对其进行分解，达到3NF、BCNF或4NF。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系模式的评价及修正。&lt;/p&gt;
&lt;p&gt;根据规范化理论对关系模式分解之后，就可以在理论上消除冗余和更新异常。但根据处理要求，可能还需要增加部分冗余以满足处理要求，这就需要做部分关系模式的处理，分解、合并或增加冗余属性，提高存储效率和处理效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;事务管理&#34;&gt;事务管理&lt;/h1&gt;
&lt;p&gt;事务是一个操作序列，这些操作“要么都做，要么都不做”。&lt;/p&gt;
&lt;p&gt;事务和程序是两个不同的概念，一般一个程序可包含多个事务。&lt;/p&gt;
&lt;p&gt;在SQL语言中，事务定义的语句有以下三条。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BEGIN TRANSACTION&lt;/code&gt;：事务开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COMMIT&lt;/code&gt;：事务提交。&lt;/p&gt;
&lt;p&gt;该操作表示事务成功地结束，它将通知事务管理器该事务的&lt;u&gt;所有更新操作现在可以被提交或永久地保留&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ROLLBACK&lt;/code&gt;：事务回滚。&lt;/p&gt;
&lt;p&gt;该操作表示事务非成功地结束，它将通知事务管理器&lt;u&gt;出故障&lt;/u&gt;了，数据库可能处于不一致状态，该事务的&lt;u&gt;所有更新操作必须回滚或撤销&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务的ACID性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;（Atomicity）：事务是原子的，要么都做，要么都不做。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;（Consistency）：事务执行的结果必须保证数据库从一个一致性状态变到另一个一致性状态。&lt;/p&gt;
&lt;p&gt;因此，当数据库只包含成功事务提交的结果时，称数据库处于一致性状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（Isolation）：事务相互隔离。&lt;/p&gt;
&lt;p&gt;当多个事务并发执行时，任一事务的更新操作直到其成功提交的整个过程，对其他事务都是不可见的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久性&lt;/strong&gt;（Durability）：一旦事务成功提交，即使数据库崩溃，其对数据库的更新操作也将永久有效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据库故障&#34;&gt;数据库故障&lt;/h1&gt;
&lt;p&gt;在数据库的运行过程中，难免会出现计算机系统的软、硬件故障，这些故障会影响数据库中数据的正确性，甚至破坏数据库，使数据库中的全部或部分数据丢失。因此，数据库的关键技术在于建立冗余数据，即备份数据。如何在系统出现故障后能够及时地使数据库恢复到故障前的正确状态，就是数据库恢复技术。&lt;/p&gt;
&lt;p&gt;故障类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事务内部故障&lt;/strong&gt;：有的可以通过事务程序本身发现；有的是非预期的，不能由事务程序处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统故障&lt;/strong&gt;（软故障）：是指造成系统停止运行的任何事件，使得系统要重新启动，例如CPU故障、操作系统故障和突然停电等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;介质故障&lt;/strong&gt;（硬故障）：如磁盘损坏、磁头碰撞和瞬时强磁干扰。此类故障发生的几率小，但破坏性最大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算机病毒&lt;/strong&gt;：计算机病毒是一种人为的故障和破坏，是在计算机程序中插入的破坏，计算机功能或者数据可以繁殖和传播的一组计算机指令或程序代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;备份方法&#34;&gt;备份方法&lt;/h2&gt;
&lt;p&gt;恢复的基本原理是“建立数据冗余”（重复存储）。建立冗余数据的方法是进行&lt;u&gt;数据转储&lt;/u&gt;和&lt;u&gt;登记日志文件&lt;/u&gt;，分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态转储和动态转储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态转储&lt;/strong&gt;：在转储期间不允许对数据库进行任何存取、修改操作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态转储&lt;/strong&gt;：在转储期间允许对数据库进行存取、修改操作。&lt;/p&gt;
&lt;p&gt;动态转储和用户事务可并发执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;海量转储和增量转储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;海量转储&lt;/strong&gt;：指每次转储全部数据；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增量转储&lt;/strong&gt;：指每次只转储上次转储后更新过的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志文件&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;在事务处理的过程中，DBMS把以下操作写入日志文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务开始、事务结束；&lt;/li&gt;
&lt;li&gt;对数据库的插入、删除和修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦发生故障，DBMS的恢复子系统利用日志文件撤销事务对数据库的改变，回退到事务的初始状态。因此，DBMS利用日志文件来进行事务故障恢复和系统故障恢复，并可协助后备副本进行介质故障恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;恢复&#34;&gt;恢复&lt;/h2&gt;
&lt;p&gt;事务恢复有以下3个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;反向扫描文件日志（即从最后向前扫描日志文件），查找该事务的更新操作。&lt;/li&gt;
&lt;li&gt;对事务的更新操作执行逆操作。&lt;/li&gt;
&lt;li&gt;继续反向扫描日志文件，查找该事务的其他更新操作，并做同样的处理，直到事务的开始标志。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;并发控制&#34;&gt;并发控制&lt;/h1&gt;
&lt;p&gt;所谓并发操作，是指在多用户共享的系统中许多用户可能同时对同一数据进行操作。并发操作带来的问题是数据的不一致性，主要有三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;丢失更新&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读脏数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其主要原因是事务的并发操作破坏了事务的隔离性。DBMS的并发控制子系统负责协调并发事务的执行，保证数据库的完整性不受破坏，避免用户得到不正确的数据。&lt;/p&gt;
&lt;h2 id=&#34;封锁&#34;&gt;封锁&lt;/h2&gt;
&lt;p&gt;并发控制的主要技术是封锁。基本封锁的类型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;排它锁（X锁或写锁）：若事务T对数据对象A加上X锁，则&lt;u&gt;只允许T读取和修改A，其他事务都不能再对A加任何类型的锁&lt;/u&gt;，直到T释放A上的锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共享锁（S锁或读锁）：若事务T对数据对象A加上S锁，则&lt;u&gt;只允许T读取A，但不能修改A，其他事务只能再对A加S锁&lt;/u&gt;，直到T释放A上的S锁。&lt;/p&gt;
&lt;p&gt;这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A进行任何修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;分布式数据库&#34;&gt;分布式数据库&lt;/h1&gt;
&lt;p&gt;分布式数据库系统是指数据存放在计算机网络的不同场地的计算机中，每一场地都有自治处理能力并能完成局部应用；而每一场地也参与（至少一种）全局应用程序的执行，全局应用程序可通过网络通信访问系统中多个场地的数据。其定义强调分布性和逻辑整体性两点。&lt;/p&gt;
&lt;p&gt;分布式数据库中有以下基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分片透明&lt;/strong&gt;：指用户或应用程序不需要知道逻辑上访问的表具体是怎么分块存储的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制透明&lt;/strong&gt;：指采用复制技术的分布方法，用户不需要知道数据是复制到哪些节点，如何复制的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;位置透明&lt;/strong&gt;：指用户无须知道数据存放的物理位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑透明&lt;/strong&gt;：指用户或应用程序无需知道局部场地使用的是哪种数据模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具有以下性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享性&lt;/strong&gt;：数据存储在不同的结点数据共享。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自治性&lt;/strong&gt;：指每结点对本地数据都能独立管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可用性&lt;/strong&gt;：指当某一场地故障时，系统可以使用其他场地上的副本而不至于使整个系统瘫痪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布性&lt;/strong&gt;：指数据在不同场地上的存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;存储过程&#34;&gt;存储过程&lt;/h1&gt;
&lt;p&gt;存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。&lt;/p&gt;
&lt;p&gt;存储过程是数据库所提供的一种数据库对象，通过存储过程定义一段代码，提供给应用程序调用来执行。从安全性的角度考虑，更新数据时，通过提供存储过程正第三方调用，将需要更新的数据传入存储过程，而在存储过程内部用代码分别对需要的多个表进行更新，从而避免了向第三方提供系统的表结构，保证了系统的数据安全。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>面向对象篇</title>
        <link>https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/</link>
        <pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;面向对象基本概念&#34;&gt;面向对象基本概念&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;面向对象&lt;/strong&gt;（Object-Oriented，00） = &lt;strong&gt;对象&lt;/strong&gt;（Object）+ &lt;strong&gt;分类&lt;/strong&gt;（Classification）+ &lt;strong&gt;继承&lt;/strong&gt;（Inheritance）+ &lt;strong&gt;通过消息的通信&lt;/strong&gt;（Communication with Messages）&lt;/p&gt;
&lt;h2 id=&#34;对象&#34;&gt;对象&lt;/h2&gt;
&lt;p&gt;在面向对象的系统中，对象是基本的运行时的实体，它包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;：数据；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行为&lt;/strong&gt;：作用于数据的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个对象把属性和行为封装为一个整体。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;封装是一种信息隐蔽技术，它的目的是使对象的使用者和生产者分离，使对象的定义和实现分开。&lt;/p&gt;
&lt;p&gt;对象可以看作是一个程序模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个对象通常由以下成分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象名；&lt;/li&gt;
&lt;li&gt;属性；&lt;/li&gt;
&lt;li&gt;方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息&#34;&gt;消息&lt;/h2&gt;
&lt;p&gt;对象之间进行通信的一种构造叫件消息。&lt;/p&gt;
&lt;h2 id=&#34;类&#34;&gt;类&lt;/h2&gt;
&lt;p&gt;类可以分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实体类&lt;/strong&gt;：实体类的对象表示现实世界中真实的实体；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;接口类&lt;/strong&gt;：接口类的对象为用户提供一种与系统合作交互的方式，分
为人和系统两大类（边界类）；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人的接口可以是显示屏、窗口、Wb窗体、对话框、菜单、列表框、其他显示控制、条形码、二维码或者用户与系统交互的其他方法。&lt;/li&gt;
&lt;li&gt;系统接口涉及到把数据发送到其他系统，或者从其他系统接收数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制类&lt;/strong&gt;：控制类的对象用来控制活动流，充当协调者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;继承&#34;&gt;继承&lt;/h2&gt;
&lt;p&gt;继承是&lt;u&gt;父类&lt;/u&gt;和&lt;u&gt;子类&lt;/u&gt;之间&lt;u&gt;共享数据&lt;/u&gt;和&lt;u&gt;方法&lt;/u&gt;的机制。这是&lt;u&gt;类之间的一种关系&lt;/u&gt;，在定义和实现一个类的时候，可以在一个已经存在的类的基础上进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。&lt;/p&gt;
&lt;p&gt;一个父类可以有多个子类。所以继承又分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单重继承：只从一个父类得到继承；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多重继承：一个子类有两个或更多个父类。&lt;/p&gt;
&lt;p&gt;多重继承中可能导致子类存在二义性的成员。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多态&#34;&gt;多态&lt;/h2&gt;
&lt;p&gt;多态（Polymorphism）：不同的对象收到同一消息可以产生完全不同的结果。&lt;/p&gt;
&lt;p&gt;同一消息就可以调用不同的方法。多态的实现受到继承的支持，利用类的继承的层次关系，把具有通用功能的消息存放在高层次，而不同的实现这一功能的行为放在较低层次，在这些低层次上生成的对象能够给通用消息以不同的响应。&lt;/p&gt;
&lt;p&gt;多态有不同的形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通用&lt;/strong&gt;的多态：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参数&lt;/strong&gt;多态：应用比较广泛，被称为最纯的多态；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包含&lt;/strong&gt;多态：在许多语言中都存在，最常见的例子就是子类型化。即一个类型是另一个类型的子类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定&lt;/strong&gt;的多态：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过载&lt;/strong&gt;（Overloading）多态：同一个名字在不同的上下文中所代表的含义不同；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强制&lt;/strong&gt;多态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定&#34;&gt;绑定&lt;/h2&gt;
&lt;p&gt;绑定是一个把过程调用和响应调用所需要执行的代码加以结合的过程。&lt;/p&gt;
&lt;p&gt;绑定分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态绑定&lt;/strong&gt;：在编译时进行的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态绑定&lt;/strong&gt;：在运行时进行的。&lt;/p&gt;
&lt;p&gt;一个给定的过程调用和代码的结合直到调用发生时才进行。&lt;/p&gt;
&lt;p&gt;动态绑定是和类的继承以及多态相联系的。在继承关系中，子类是父类的一个特例，所以父类对象可以出现的地方，子类对象也可以出现。&lt;/p&gt;
&lt;p&gt;在运行过程中，当一个对象发送消息请求服务时，要根据匿收对象的其体情况将请求的操作与实现的方法进行连接，即动态绑定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;面向对象分析&#34;&gt;面向对象分析&lt;/h1&gt;
&lt;p&gt;同其他分析方法一样，面向对象分析（Object-Oriented Analysis，OOA）的目的是为了获得对应用问题的理解。&lt;/p&gt;
&lt;p&gt;面向对象分析包含5个活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认定对象；&lt;/li&gt;
&lt;li&gt;组织对象；&lt;/li&gt;
&lt;li&gt;描述对象间的相互作用；&lt;/li&gt;
&lt;li&gt;确定对象的操作&lt;/li&gt;
&lt;li&gt;定义对象的内部信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;认定对象&#34;&gt;认定对象&lt;/h2&gt;
&lt;p&gt;在应用领域中，按自然存在的实体确立对象。&lt;/p&gt;
&lt;p&gt;在定义域中，首先将自然存在的“名词”作为一个对象，这通常是研究问题、定义域实体的良好开始。&lt;/p&gt;
&lt;h2 id=&#34;组织对象&#34;&gt;组织对象&lt;/h2&gt;
&lt;p&gt;分析对象间的关系，将相关对象抽象成类，其目的是为了简化关联对象，利用类的继承性建立具有继承性层次的类结构。&lt;/p&gt;
&lt;p&gt;抽象类时可从以下方面考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象间的操作；&lt;/li&gt;
&lt;li&gt;一个对象是另一个对象的一部分，如房子是由门和窗构成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;面向对象设计&#34;&gt;面向对象设计&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;程序设计范型&lt;/strong&gt;（Programming Paradigm）是人们在&lt;u&gt;程序设计时所采用的基本方式模型&lt;/u&gt;，决定了程序设计时采用的&lt;u&gt;思维方式&lt;/u&gt;、&lt;u&gt;使用的工具&lt;/u&gt;，同时又&lt;u&gt;有一定的应用范畴&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;程序设计范型的发展经历了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过程程序设计；&lt;/li&gt;
&lt;li&gt;模块化程序设计；&lt;/li&gt;
&lt;li&gt;函数程序设计；&lt;/li&gt;
&lt;li&gt;逻辑程序设计；&lt;/li&gt;
&lt;li&gt;面向对象程序设计范型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;面向对象程序设计&lt;/strong&gt;（Object-Oriented Programming，&lt;strong&gt;OOP&lt;/strong&gt;）的&lt;u&gt;实质是选用一种&lt;strong&gt;面向对象程序设计语言&lt;/strong&gt;（Object-Oriented Programming Language，&lt;strong&gt;OOPL&lt;/strong&gt;）&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用对象、类及其相关概念所进行的程序设计；&lt;/li&gt;
&lt;li&gt;关键在于加入了类和继承性，从而进一步提高了抽象程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特定的OOP概念一般是通过OOPL中特定的语言机制来体现的。&lt;/p&gt;
&lt;p&gt;OOP现在已经扩展到系统分析和软件设计的范畴，出现了面向对象分析和面向对象设计的概念。&lt;/p&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;设计原则&lt;/h2&gt;
&lt;p&gt;面向对象方法中的五大原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;责任原则&lt;/strong&gt;（Single Responsibility Principle，SRP）：当需要修改某个类的时候原因有且只有一个，让一个类只做一种类型责任。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开放封闭原则&lt;/strong&gt;（Open &amp;amp; Close Principle，OCP）：软件实体（类、模块、函数等）应
该可以扩展的，即&lt;strong&gt;开放的&lt;/strong&gt;；但是不可修改的，即&lt;strong&gt;封闭的&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;里氏替换原则&lt;/strong&gt;（Liskov Substitution Principle，LSP）：子类型必须能够替换掉他们的基
类型。&lt;/p&gt;
&lt;p&gt;即，在任何父类可以出现的地方，都可以用子类的实例来赋值给父类型的引用。&lt;/p&gt;
&lt;p&gt;当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有是一个（is-a）关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖倒置原则&lt;/strong&gt;（Dependence Inversion Principle，DP）：抽象不应该依赖于细节，细
节应该依赖于抽象。即，&lt;u&gt;高层模块不应该依赖于低层模块，二者都应该依赖于抽象&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;接口分离原则&lt;/strong&gt;（Interface Segregation Principle，ISP）：不应该强迫客户依赖于它们不
用的方法。接口属于客户，不属于它所在的类层次结构。&lt;/p&gt;
&lt;p&gt;即：&lt;u&gt;依赖于抽象，不要依赖于具体，同时在抽象级别不应该有对于细节的依赖。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;这样做的好处就在于可以最大限度地应对可能的变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Robert C. Martin提出的面向对象设计原则还包括以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重用发布等价原则（Release Reuse Equivalency Principle，REP）：重用的粒度就是发布的粒度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共同封闭原则&lt;/strong&gt;（Common Closure Principle，CCP）：包中的所有类对于同一类性质的变化应该是共同到闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共同重用原则&lt;/strong&gt;（Common Reuse Principle，CRP）：一个包中的所有类应该是共同重用
的。如果重用了包中的一个类那么就要重用包中的所有类。&lt;/li&gt;
&lt;li&gt;无环依赖原则（Acyclic Dependencies Principle，ADP）：在包的依赖关系图中不允许存
在环，即包之间的结构必须是一个直接的五环图形。&lt;/li&gt;
&lt;li&gt;稳定依赖原则（Stable Dependencies Principle,SDP）：朝着稳定的方向进行依赖。&lt;/li&gt;
&lt;li&gt;稳定抽象原则（Stable Abstractions Principle，SAP）：包的抽象程度应该和其稳定程
度一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;uml&#34;&gt;UML&lt;/h1&gt;
&lt;p&gt;面向对象分析强调的是对一个系统中对象的特征和行为的定义。目前，国际上已经出现了多种面向对象的方法，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Peter Coad和Edward Yourdon的OOA和OOD方法（又称Coad/Yourdon方法或Coad方法）；&lt;/li&gt;
&lt;li&gt;Booch的OOD方法（又称Booch方法）；&lt;/li&gt;
&lt;li&gt;OMT（Object Modeling Technique，面向对象建模技术）方法；&lt;/li&gt;
&lt;li&gt;UML（Unified Modeling Language，统一建模语言）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UML是面向对象软件的标准化建模语言。由于其简单、统一，又能够表达软件设计中的动态和静态信息，目前己经成为可视化建模语言事实上的工业标准。&lt;/p&gt;
&lt;p&gt;UML中包含3种基本构造块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事物；&lt;/li&gt;
&lt;li&gt;关系；&lt;/li&gt;
&lt;li&gt;图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事物&#34;&gt;事物&lt;/h2&gt;
&lt;p&gt;UML中有4种事物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构事物&lt;/strong&gt;（Structural Thing）：是UML模型中的名词。它们&lt;u&gt;通常是模型的&lt;strong&gt;静态部分&lt;/strong&gt;，描述概念或物理元素&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;结构事物包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类（Class）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口（Interface）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协作（Collaboration）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用例（Use Case）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主动类（Active Class）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件（Component）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;制品（Artifact）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结点（Node）；&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055522161.png&#34;
	width=&#34;708&#34;
	height=&#34;294&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055522161_hu872254ba18803fa50bd84092332d0d27_39442_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055522161_hu872254ba18803fa50bd84092332d0d27_39442_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;结构事物的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;577px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行为事物&lt;/strong&gt;（Behavior Thing）：&lt;u&gt;是UML模型的&lt;strong&gt;动态部分&lt;/strong&gt;&lt;/u&gt;。它们是模型中的动词，描述了跨越时间和空间的行为。&lt;/p&gt;
&lt;p&gt;行为事物包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;交互（Interaction）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态机（State Machine）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动（Activity）；&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055712246.png&#34;
	width=&#34;621&#34;
	height=&#34;133&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055712246_hu926c842303194b37bd3d84d241da7490_18166_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055712246_hu926c842303194b37bd3d84d241da7490_18166_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;行为事物的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;466&#34;
		data-flex-basis=&#34;1120px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分组事物&lt;/strong&gt;（Grouping Thing）：UML模型的&lt;strong&gt;组织部分&lt;/strong&gt;，是一些由模型分解成的“盒子”。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;在所有的分组事物中，最主要的分组事物是包（Package）&lt;/u&gt;。包是把元素组织成组的机制，这种机制具有多种用途。结构事物、行为事物甚至其他分组事物都可以放进包内。&lt;/p&gt;
&lt;p&gt;包与构件（仅在运行时存在）不同，它纯粹是概念上的（即它仅在开发时存在）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055987585.png&#34;
	width=&#34;224&#34;
	height=&#34;157&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055987585_hude1f550d1c91183afc794d1e3aa09c46_4122_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682055987585_hude1f550d1c91183afc794d1e3aa09c46_4122_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;包的图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注释事物&lt;/strong&gt;（Annotational Thing）：注释事物是UML模型的&lt;strong&gt;解释部分&lt;/strong&gt;。这些注释事物用来描述、说明和标注模型的任何元素。&lt;/p&gt;
&lt;p&gt;注解（Note）是一种主要的注释事物。注解是一个依附于一个元素或者一组元素之上，对它进行约束或解释的简单符号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关系&#34;&gt;关系&lt;/h2&gt;
&lt;p&gt;UML中有4种关系，这4种关系是UML模型中可以包含的基本关系事物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖&lt;/strong&gt;（Dependency）：是&lt;u&gt;两个事物间的语义关系，其中一个事物（&lt;strong&gt;独立事物&lt;/strong&gt;）发生变化会影响另一个事物（&lt;strong&gt;依赖事物&lt;/strong&gt;）的语义&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在图形上，把一个依赖画成一条&lt;u&gt;可能有方向的虚线&lt;/u&gt;，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089.png&#34;
	width=&#34;200&#34;
	height=&#34;48&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;依赖的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;依赖的变体有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精化；&lt;/li&gt;
&lt;li&gt;跟踪；&lt;/li&gt;
&lt;li&gt;包含；&lt;/li&gt;
&lt;li&gt;延伸。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依赖有偶然性和临时性，即需要的时候依赖，不需要的时候不依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关联&lt;/strong&gt;（Association）：是一种&lt;u&gt;结构关系&lt;/u&gt;，它描述了一组链，&lt;u&gt;链是对象之间的连接&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;关联使用&lt;u&gt;实线&lt;/u&gt;表示，在关联上可以标注重复度（Multiplicity）和角色（Role）。&lt;/p&gt;
&lt;p&gt;描述了&lt;u&gt;整体和部分&lt;/u&gt;间的结构关系的特殊类型的关联：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;聚集&lt;/strong&gt;（Aggregation，聚合）：&lt;u&gt;部分和整体的生命周期不一致&lt;/u&gt;，整体消失了，部分仍然存在，&lt;u&gt;部分可以脱离整体存在&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;使用一端带&lt;u&gt;空心菱形&lt;/u&gt;的实线表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合&lt;/strong&gt;：&lt;u&gt;部分和整体的生命周期一致&lt;/u&gt;，整体消失了，部分也消失了，&lt;u&gt;部分不可以脱离整体而存在&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;使用一端带&lt;u&gt;实心菱形&lt;/u&gt;的实线表示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关联和聚集的图形化表示如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153.png&#34;
	width=&#34;408&#34;
	height=&#34;101&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关联和聚集的图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;403&#34;
		data-flex-basis=&#34;969px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;聚合和组合中，带菱形的一端指向整体，另一端指向部分。&lt;/p&gt;
&lt;p&gt;单向关联：用&lt;u&gt;带箭头实线&lt;/u&gt;表示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关联的关系强度比依赖的关系强度要强一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多重度：&lt;/p&gt;
&lt;p&gt;进行面向对象设计时，类图中可以展现类之间的关联关系，还可以在类图中图示&lt;u&gt;关联中的数量关系&lt;/u&gt;，即多重度。表示数量关系时，&lt;u&gt;用多重度说明数量或数量范围&lt;/u&gt;，&lt;u&gt;表示有多少个实例（对象）能被连接起来&lt;/u&gt;，即&lt;u&gt;一个类的实例能够与另一个类的多少个实例相关联&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;关联类：&lt;/p&gt;
&lt;p&gt;当两个类之间的关联的重复度是多对多时，需要借助额外的属性来帮助表达它们之间的关系，而这个属性就需要定义在一个新的关联类中。关联类记录了这两个类之间的关联信息。关联中这些额外的属性用一条&lt;u&gt;垂直于关联的实线&lt;/u&gt;表示，实线的一段连接接到关联的实线上，另一端指向这些属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化&lt;/strong&gt;（Generalization）：是一种特殊/一般关系，&lt;u&gt;特殊元素（子元素）的对象可替代一般元素（父元素）的对象&lt;/u&gt;。用这种方法，&lt;u&gt;子元素共享了父元素的结构和行为&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在图形上，把一个泛化关系画成一条&lt;u&gt;带有空心箭头的实线&lt;/u&gt;，它指向父元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;泛化的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现&lt;/strong&gt;（Realization）：是&lt;u&gt;类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在两种情况下会使用实现关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在接口和实现它们的类或构件之间：&lt;/li&gt;
&lt;li&gt;在用例和实现它们的协作之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在图形上，把一个实现关系画成一条&lt;u&gt;带有空心箭头的虚线&lt;/u&gt;，箭头指向模板类，另一端于实现类连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682058026631.png&#34;
	width=&#34;167&#34;
	height=&#34;61&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682058026631_hu09469114d42fa29e39948f21a9a04633_1340_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682058026631_hu09469114d42fa29e39948f21a9a04633_1340_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;实现的图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;273&#34;
		data-flex-basis=&#34;657px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uml中的图&#34;&gt;UML中的图&lt;/h2&gt;
&lt;p&gt;UML2.0提供了13种图，分别是（&lt;strong&gt;加粗&lt;/strong&gt;是重点，其它的作为了解）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用例图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;活动图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构件图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;组合结构图&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;包图&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互图&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;交互概览图&lt;/li&gt;
&lt;li&gt;计时图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类图&#34;&gt;类图&lt;/h3&gt;
&lt;p&gt;&lt;u&gt;类图&lt;/u&gt;（Class Diagram）&lt;u&gt;展现了一组对象、接口、协作和它们之间的关系&lt;/u&gt;。在面向对象系统的建模中所建立的&lt;u&gt;最常见的图就是类图&lt;/u&gt;。类图给出系统的静态设计视图，包含主动类的类图（少见）给出了系统的静态进程视图。&lt;/p&gt;
&lt;p&gt;类图中通常包括下述内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570702111.png&#34;
	width=&#34;106&#34;
	height=&#34;243&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570702111_hu4741eab1f2430fa5cd37f3e95504f684_7846_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570702111_hu4741eab1f2430fa5cd37f3e95504f684_7846_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;43&#34;
		data-flex-basis=&#34;104px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;类中的方法和属性前面有以下三种修饰符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;修饰符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;public&lt;/code&gt; 公有的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;private&lt;/code&gt; 私有的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;protected&lt;/code&gt; 受保护的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;package&lt;/code&gt; 包的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例如：&lt;/p&gt;
  &lt;table style=&#34;width: 200px; margin: auto;&#34;&gt;
      &lt;tr&gt;&lt;th&gt;Student&lt;/th&gt;&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;p&gt;
          &lt;code&gt;- id&amp;nbsp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;int&lt;/code&gt;
          &lt;br&gt;
          &lt;code&gt;+ name&amp;nbsp;:&amp;nbsp;String&lt;/code&gt;
          &lt;br&gt;
          &lt;code&gt;+ age&amp;nbsp;&amp;nbsp;:&amp;nbsp;int&lt;/code&gt;
      &lt;/p&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;p&gt;
          &lt;code&gt;+ getId()&amp;nbsp;:&amp;nbsp;int&lt;/code&gt;
      &lt;/p&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570786524.png&#34;
	width=&#34;135&#34;
	height=&#34;74&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;接口的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570820946.png&#34;
	width=&#34;107&#34;
	height=&#34;67&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;协作的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖、泛化和关联关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089.png&#34;
	width=&#34;200&#34;
	height=&#34;48&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;依赖的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153.png&#34;
	width=&#34;408&#34;
	height=&#34;101&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关联图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;403&#34;
		data-flex-basis=&#34;969px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;泛化的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061210921.png&#34;
	width=&#34;619&#34;
	height=&#34;467&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;类图中也可以包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注解和约束；&lt;/li&gt;
&lt;li&gt;包或子系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类图成分总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;图示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684650129674.png&#34;
	width=&#34;142&#34;
	height=&#34;139&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684650129674_hucae45be9ae605ee21a469444ed126234_7038_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684650129674_hucae45be9ae605ee21a469444ed126234_7038_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图中的类的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;245px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接口&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570786524.png&#34;
	width=&#34;135&#34;
	height=&#34;74&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570786524_hu5845e575cae00345fed5de09da321787_3491_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图接口的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;协作&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570820946.png&#34;
	width=&#34;107&#34;
	height=&#34;67&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684570820946_huaaba4fad0440f7f5bf987a2dd4b8f107_2415_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;协作的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;依赖&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089.png&#34;
	width=&#34;200&#34;
	height=&#34;48&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057108089_hufef657bed6e876bd373e5f4bb9f34af6_1059_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;依赖的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;泛化&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;泛化的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;关联&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153.png&#34;
	width=&#34;408&#34;
	height=&#34;101&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682057458153_hu37f2bf65b423a501f386d9709f6e6bc4_8075_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关联图形化表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;403&#34;
		data-flex-basis=&#34;969px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;类图用于对系统的静态设计视图建模，&lt;u&gt;这种视图主要支持系统的功能需求&lt;/u&gt;，通常以下述3种方式之一使用类图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对系统的词汇建模：&lt;/p&gt;
&lt;p&gt;涉及做出这样的决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些抽象是考虑中的系统的一部分；&lt;/li&gt;
&lt;li&gt;哪些抽象处于系统边界之外。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用类图详细描述这些抽象和它们的职责。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对简单的协作建模：协作是一些共同工作的类、接口和其他元素的群体，该群体提供的一些合作行为强于所有这些元素的行为之和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对逻辑数据库模式建模：将模式看作为数据库的概念设计的蓝图。在很多领域中，要在关系数据库或面向对象数据库中存储永久信息，可以用类图对这些数据库的模式建模。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象图&#34;&gt;对象图&lt;/h3&gt;
&lt;p&gt;对象图（Object Diagram）展现了&lt;u&gt;某一时刻一组对象以及它们之间的关系&lt;/u&gt;，&lt;u&gt;描述了在类图中所建立的事物的实例的静态快照&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对象图一般包括对象和链，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061786263.png&#34;
	width=&#34;713&#34;
	height=&#34;312&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对象图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对象：对象图中的对象包含了类名、对象名和属性。&lt;/p&gt;
&lt;p&gt;其图形化如下：&lt;/p&gt;
&lt;table style=&#34;width: 150px; text-align: center;&#34;&gt;
    &lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        对象名 : 类名
    &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
    &lt;p&gt;
        &lt;code&gt;属性1 = 值1&lt;/code&gt;
        &lt;br&gt;
        &lt;code&gt;属性2 = 值2&lt;/code&gt;
        &lt;br&gt;
        ......
    &lt;/p&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;匿名对象（没有对象名）：&lt;/p&gt;
&lt;table style=&#34;width: 150px;&#34;&gt;
    &lt;tr&gt;
    &lt;th style=&#34;text-align: center;&#34;&gt;
        : 类名
    &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;
    &lt;p&gt;
        &lt;code&gt;属性1 = 值1&lt;/code&gt;
        &lt;br&gt;
        &lt;code&gt;属性2 = 值2&lt;/code&gt;
        &lt;br&gt;
        ......
    &lt;/p&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;和类图一样，对象图给出系统的静态设计视图或静态进程视图，但它们是从真实的或原型实例的角度建立的。&lt;/p&gt;
&lt;h3 id=&#34;用例图&#34;&gt;用例图&lt;/h3&gt;
&lt;p&gt;用例图（Use Case Diagram）展现了一组用例、参与者（Actor）以及它们之间的关系。&lt;/p&gt;
&lt;p&gt;用例图通常包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例：是从&lt;strong&gt;用户角度&lt;/strong&gt;描述&lt;strong&gt;系统的行为&lt;/strong&gt;，它将&lt;strong&gt;系统的一个功能&lt;/strong&gt;描述成一系列的事件，这些事件最终对操作者产生有价值的观测结果。&lt;/p&gt;
&lt;p&gt;用例是一个类，它代表&lt;strong&gt;一类功能&lt;/strong&gt;而不是使用该功能的某一具体实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684574449513.png&#34;
	width=&#34;114&#34;
	height=&#34;73&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者：是与系统交互的&lt;strong&gt;外部实体&lt;/strong&gt;，可能是&lt;strong&gt;使用者&lt;/strong&gt;，也可能是与系统交互的&lt;strong&gt;外部系统&lt;/strong&gt;、&lt;strong&gt;基础设备&lt;/strong&gt;等。&lt;/p&gt;
&lt;p&gt;参与者用一个&lt;u&gt;人形图标&lt;/u&gt;表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例之间的关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;包含关系：用带&lt;code&gt;&amp;lt;&amp;lt;include&amp;gt;&amp;gt;&lt;/code&gt;的虚线箭头表示，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578078948.png&#34;
	width=&#34;613&#34;
	height=&#34;182&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;包含关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;336&#34;
		data-flex-basis=&#34;808px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展关系：用带&lt;code&gt;&amp;lt;&amp;lt;extend&amp;gt;&amp;gt;&lt;/code&gt;的虚线箭头表示，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578542547.png&#34;
	width=&#34;607&#34;
	height=&#34;136&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;扩展关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;446&#34;
		data-flex-basis=&#34;1071px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;扩展用例是指，一个用例中，符合某些特定情况才会触发的另一个用例。&lt;/p&gt;
&lt;p&gt;即一个用例执行的时候，可能会发生一些特殊情况或可选情况，这种情况就是这个用例的扩展用例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者和用例之间的关联关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用例与用例以及参与者与参与者之间的泛化关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682062071630.png&#34;
	width=&#34;756&#34;
	height=&#34;382&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;474px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;用例图成分总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;图示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用例&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684574449513.png&#34;
	width=&#34;114&#34;
	height=&#34;73&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684574449513_hu50f432d3b590de151e3190057472158d_3109_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例的图形表示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包含关系&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578078948.png&#34;
	width=&#34;613&#34;
	height=&#34;182&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578078948_hubb51fa3891e688e7291daaa781680867_10772_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例之间的包含关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;336&#34;
		data-flex-basis=&#34;808px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;扩展关系&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578542547.png&#34;
	width=&#34;607&#34;
	height=&#34;136&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684578542547_hu0236ed30d2e6f19ac3b3e55246e9489d_7977_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例之间的扩展关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;446&#34;
		data-flex-basis=&#34;1071px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;泛化关系&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410.png&#34;
	width=&#34;162&#34;
	height=&#34;53&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682057764410_huaf9267ff556daac18150e46c6cbbde24_1023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例与用例以及参与者与参与者之间的泛化关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;交互图&#34;&gt;交互图&lt;/h3&gt;
&lt;p&gt;交互图用于&lt;u&gt;对系统的动态方面进行建模&lt;/u&gt;。一张交互图表现的是一个交互，由一组对象和它们之间的关系组成，包含它们之间可能传递的消息。&lt;/p&gt;
&lt;p&gt;每种交互图针对不同的目的，能适用于不同的情况。交互图表现为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列图&lt;/strong&gt;：强调&lt;strong&gt;消息时间顺序&lt;/strong&gt;的交互图；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信图&lt;/strong&gt;：强调&lt;strong&gt;接收和发送消息的对象的结构组织&lt;/strong&gt;的交互图；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互概览图&lt;/strong&gt;：强调&lt;strong&gt;控制流&lt;/strong&gt;的交互图；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计时图&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中顺序图和通信图是同构的，它们之间可以相互转换。&lt;/p&gt;
&lt;p&gt;在多数情况下，交互图包括对以下内容的具体的或原型化的实例以及它们之间传递的消息进行建模：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类；&lt;/li&gt;
&lt;li&gt;接口；&lt;/li&gt;
&lt;li&gt;构件；&lt;/li&gt;
&lt;li&gt;结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有这些都位于一个表达行为的脚本的语境中。&lt;/p&gt;
&lt;p&gt;交互图一般包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;序列图&#34;&gt;序列图&lt;/h4&gt;
&lt;p&gt;序列图（Sequence Diagram，&lt;strong&gt;顺序图&lt;/strong&gt;）是场景（Scenario）的图形化表示，&lt;u&gt;描述了以时间顺序组织的对象之间的交互活动&lt;/u&gt;，&lt;u&gt;强调消息时间顺序&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;序列图的组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把参加交互的对象放在图的上方，沿水平方向排列。&lt;/p&gt;
&lt;p&gt;通常把发起交互的对象放在左边，下级对象依次放在右边。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把这些对象发送和接收的消息，沿垂直方向，按时间顺序从上到下放置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682064874751.png&#34;
	width=&#34;691&#34;
	height=&#34;471&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;序列图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;序列图的组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象：用方框框起来的&lt;code&gt;对象名:类名&lt;/code&gt;，没有属性和方法等成分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对象生命线&lt;/strong&gt;：表示&lt;u&gt;一个对象存在的时间段&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如上图中对象下方垂直的虚线。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象可以在交互过程中创建：生命线从接收到构造型&lt;code&gt;create&lt;/code&gt;消息开始；&lt;/li&gt;
&lt;li&gt;也可以在交互过程中撤销：生命线从接收到构造型&lt;code&gt;destroy&lt;/code&gt;消息结束，并且给出一个大$\times$的标记表明生命线的结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制焦点&lt;/strong&gt;：控制焦点表示&lt;u&gt;一个对象执行一个动作所经历的时间段&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如上图中对象下方的空表矩形条框。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;普通的消息用&lt;u&gt;带箭头的实线&lt;/u&gt;表示。所有消息的箭头都是指向接收对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回消息：用&lt;u&gt;带箭头的虚线&lt;/u&gt;表示。&lt;/li&gt;
&lt;li&gt;同步消息（调用消息）：指消息发送给接收对象后，需要等待接收对象返回后才可进行下一步操作。&lt;/li&gt;
&lt;li&gt;异步消息：指消息发送给接收对象后，无需等待接收对象返回即可进行下一步操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;序列图有两个不同于通信图的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列图有对象生命线；&lt;/li&gt;
&lt;li&gt;序列图有控制焦点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;通信图&#34;&gt;通信图&lt;/h4&gt;
&lt;p&gt;&lt;u&gt;通信图&lt;/u&gt;（Communication Diagram，&lt;strong&gt;协作图&lt;/strong&gt;）&lt;u&gt;强调收发消息的对象的结构组织&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;通信图的组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将参加交互的&lt;u&gt;对象&lt;/u&gt;作为图的&lt;u&gt;顶点&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;把连接这些对象的&lt;u&gt;链&lt;/u&gt;表示为图的&lt;u&gt;弧&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;用对象发送和接收的&lt;u&gt;消息&lt;/u&gt;来&lt;u&gt;修饰这些链&lt;/u&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就提供了在协作对象的结构组织的语境中观察控制流的一个清晰的可视化轨迹。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682065157645.png&#34;
	width=&#34;719&#34;
	height=&#34;314&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;通信图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通信图有以下成分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象：与序列图一样，是用一个方框框起来的&lt;code&gt;对象名:类名&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;（链接）：用实线表示，可以在链的末端附上一个路径构造型。&lt;/p&gt;
&lt;p&gt;通常仅需显式地表示以下几种链的路径：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;构造型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;local&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;局部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;parameter&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;global&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;全局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;self&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自身&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不必表示&lt;code&gt;association&lt;/code&gt;（关联）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;序号&lt;/strong&gt;：用来表示消息的时间顺序。是消息前的一个数字前缀，可使用带小数点的号码表示嵌套消息，嵌套可为任意深度。&lt;/p&gt;
&lt;p&gt;如2表示第2个消息，2.1表示嵌套在消息2中的第1个消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息：沿同一个链可以显示许多消息（可能发自不同方向），并且每个消息都有唯一的序号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信图有两个不同于序列图的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信图有路径；&lt;/li&gt;
&lt;li&gt;通信图有序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结&#34;&gt;总结&lt;/h4&gt;
&lt;p&gt;顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;差异&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;center&gt;序列图&lt;/center&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;center&gt;通信图&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;强调&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;center&gt;消息时间顺序&lt;/center&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;center&gt;收发消息的对象的结构组织&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;不同的特性&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有对象生命线：对象存在的时间段&lt;/li&gt;&lt;li&gt;有控制焦点：对象执行动作所经历的时间段&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有路径：表示对象之间有交互&lt;/li&gt;&lt;li&gt;有序号：表示消息的时间顺序，可嵌套表示&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;状态图&#34;&gt;状态图&lt;/h3&gt;
&lt;p&gt;状态图（State Diagram，状态转换图）展现了一个状态机。状态图关注系统的动态视图，对于接口、类和协作的行为建模尤为重要，&lt;u&gt;强调对象行为的事件顺序&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;状态图由以下组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态&lt;/strong&gt;：指对象的生命周期中某个条件或者状态，是&lt;u&gt;任何可以被观察到的系统行为模式&lt;/u&gt;，&lt;u&gt;一个状态代表系统的一种行为模式&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;状态规定了系统内对事件的响应方式。&lt;/p&gt;
&lt;p&gt;系统对事件的响应：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是&lt;u&gt;做一个（或一系列）动作&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;可以是仅仅&lt;u&gt;改变系统本身的状态&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;可以是&lt;u&gt;即改变状态，又做动作&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态转换图中定义的状态主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;初态&lt;/strong&gt;（初始状态）：用一个&lt;u&gt;实心圆点&lt;/u&gt;表示。一张状态图&lt;u&gt;只能有一个初态&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终态&lt;/strong&gt;（最终状态）：用一个&lt;u&gt;实心圆点外加一个圆圈&lt;/u&gt;表示。一张状态图&lt;u&gt;可以没有终态，也可以有多个&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间状态&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态图中的状态用一个&lt;u&gt;圆角矩形&lt;/u&gt;表示，可以用两条水平横线将其分为上中下3个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上面部分（必须）：状态的名称；&lt;/li&gt;
&lt;li&gt;中间部分（可选）：状态变量的名称和值；&lt;/li&gt;
&lt;li&gt;下面部分（可选）：活动表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;状态还可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合状态：含有子状态的状态，这个状态也称为其子状态的超状态。&lt;/p&gt;
&lt;p&gt;子状态：嵌套在另外一个状态中的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转换&lt;/strong&gt;（迁移）：是两个状态之间的一种关系，表示对象将在源状态中执行一定的动作，并在某个特定事件发生，而且某个特定的警界（监护）条件满足时进入目标状态。&lt;/p&gt;
&lt;p&gt;状态转换用一条&lt;u&gt;带箭头的实线&lt;/u&gt;表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件&lt;/strong&gt;：是在某个特定时刻发生的事情，&lt;u&gt;它是对引起系统做动作或（和）从一个状态转换到另个状态的外界事件的抽象&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;事件触发&lt;/u&gt;状态转换：&lt;u&gt;状态变迁通常是由事件触发的。&lt;/u&gt;状态之间带箭头实线上的事件发生时，状态转换开始（还可称之为状态“点火”或状态被“触发”）。&lt;/p&gt;
&lt;p&gt;这种情况下应在表达状态转换的箭头线上标出触发转换的&lt;u&gt;事件表达式&lt;/u&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;事件说明 [守卫条件] / 动作表达式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件说明的语法为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;事件名 (参数表)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;守卫条件（监护条件）：一个布尔表达式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当且仅当事件发生且守卫条件为真时，状态转换才发生；&lt;/li&gt;
&lt;li&gt;只有守卫条件没有事件说明时，只要守卫条件为真，状态转换就发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动作表达式是一个过程表达式，当状态转换（事件）开始时执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;自动触发&lt;/u&gt;状态转换：如果箭头线上未标明事件，则表示&lt;u&gt;在源状态的内部活动执行完之后自动触发转换&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684587930655.png&#34;
	width=&#34;717&#34;
	height=&#34;135&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684587930655_hub194f1dce76ed4c99298044c9667a40d_7727_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684587930655_hub194f1dce76ed4c99298044c9667a40d_7727_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图中的事件和转换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;531&#34;
		data-flex-basis=&#34;1274px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;活动&lt;/strong&gt;：指状态中的活动表中的活动。&lt;/p&gt;
&lt;p&gt;语法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;事件名 (参数表) /动作表达式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件名：可以是任何事件的名称。&lt;/p&gt;
&lt;p&gt;在活动表中经常使用以下3中标准事件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;事件名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;u&gt;入口动作&lt;/u&gt;，指定&lt;u&gt;进入该状态&lt;/u&gt;的动作，立即执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;u&gt;出口动作&lt;/u&gt;，指定&lt;u&gt;退出该状态&lt;/u&gt;的动作，立即执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;u&gt;内部活动&lt;/u&gt;，指定&lt;u&gt;在该状态下&lt;/u&gt;的动作，占有有限时间，并可中断地工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682066287326.png&#34;
	width=&#34;831&#34;
	height=&#34;431&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以用状态图对系统的动态方面建模。这些动态方面可以包括出现在系统体系结构的任何视图中的任何一种对象的按事件排序的行为，这些对象包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类（各主动类）；&lt;/li&gt;
&lt;li&gt;接口；&lt;/li&gt;
&lt;li&gt;构件；&lt;/li&gt;
&lt;li&gt;结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当状态图对系统、类或用例的动态方面建模时，通常是对反应型对象建模。&lt;/p&gt;
&lt;h3 id=&#34;活动图&#34;&gt;活动图&lt;/h3&gt;
&lt;p&gt;活动图（Activity Diagram）是一种特殊的状态图，它&lt;u&gt;展现了在系统内从一个活动到另一个活动的流程&lt;/u&gt;。活动图&lt;u&gt;专注于系统的动态视图&lt;/u&gt;，它对于系统的功能建模特别重要，并&lt;u&gt;强调对象间的控制流程&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682067363114.png&#34;
	width=&#34;654&#34;
	height=&#34;744&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;活动图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;活动图一般包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;状态：&lt;/p&gt;
&lt;p&gt;活动图的状态也包含初态和终态。其余的状态还可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动作状态：不能被分解，动作不能被中断。&lt;/li&gt;
&lt;li&gt;活动状态：能够被进一步分解，可以被中断，其活动由其它的活动图来表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流（转换）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活动图可以表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支（判断）：分支的流上用&lt;code&gt;[]&lt;/code&gt;标记的是监护表达式；&lt;/li&gt;
&lt;li&gt;（并发）分岔：将一个流分为多个可并发执行的流；&lt;/li&gt;
&lt;li&gt;（并发）汇合：将分岔出去的多个流合并为同一个流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当对一个系统的动态方面建模时，有以下几种使用活动图的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对工作流建模；&lt;/li&gt;
&lt;li&gt;对操作建模；&lt;/li&gt;
&lt;li&gt;对业务的复杂流程建模。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构件图&#34;&gt;构件图&lt;/h3&gt;
&lt;p&gt;构件图（Component Diagram，&lt;strong&gt;组件图&lt;/strong&gt;）展现了&lt;u&gt;一组构件之间的组织和依赖&lt;/u&gt;。构件图&lt;u&gt;专注于系统的静态实现视图&lt;/u&gt;，它&lt;u&gt;与类图相关，通常把构件映射为一个或多个类、接口或协作&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682068370459.png&#34;
	width=&#34;638&#34;
	height=&#34;332&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;构件图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;构件图的成分有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构件：用&lt;u&gt;矩形&lt;/u&gt;表示，在矩形&lt;u&gt;右上方有一个小标记&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;供接口：用一个&lt;u&gt;&lt;strong&gt;圆圈&lt;/strong&gt;和连接到构件上的实线&lt;/u&gt;表示。构件提供接口给其它构件使用。&lt;/li&gt;
&lt;li&gt;需接口：用一个&lt;u&gt;&lt;strong&gt;半圆&lt;/strong&gt;和连接到构件上的实线&lt;/u&gt;表示。构件使用需接口表示需要调用其它构件提供接口。&lt;/li&gt;
&lt;li&gt;依赖：将供接口（圆圈）和虚接口（半圆）连接到一起，表示两个构件通过这个接口相依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署图&#34;&gt;部署图&lt;/h3&gt;
&lt;p&gt;部署图（Deployment Diagram）是用来&lt;u&gt;对面向对象系统的&lt;strong&gt;物理方面&lt;/strong&gt;建模&lt;/u&gt;的方法，展现了运行时处理结点以及其中构件（制品）的配置。部署图&lt;u&gt;对系统的静态部署视图进行建模&lt;/u&gt;，它与构件图相关。&lt;/p&gt;
&lt;p&gt;部署图&lt;u&gt;展现了系统的软件和硬件之间的关系，在实施阶段使用&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682073176388.png&#34;
	width=&#34;491&#34;
	height=&#34;327&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;部署图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;artifact&amp;gt;&amp;gt;&lt;/code&gt;表示制品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;总结&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;UML图&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;静态建模&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;动态建模&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;物理建模&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用例图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构件图（组件图)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;部署图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;序列图（顺序图，时序图）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通信图（协作图）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;活动图&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;活动图是一种特殊的状态图，它们的差异如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同点：状态中都有初态和终态。&lt;/li&gt;
&lt;li&gt;主要差异：
&lt;ul&gt;
&lt;li&gt;活动图的转换称为流；&lt;/li&gt;
&lt;li&gt;活动图有分支、并发分岔和并发汇合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是UML图的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类图&lt;/strong&gt;：展现一组&lt;u&gt;对象（类）&lt;/u&gt;、&lt;u&gt;接口&lt;/u&gt;、&lt;u&gt;协作&lt;/u&gt;和它们之间的&lt;u&gt;关系&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061210921.png&#34;
	width=&#34;619&#34;
	height=&#34;467&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061210921_hub4b131b7f109e06635ca875a61e12a0b_45450_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对象图&lt;/strong&gt;：展现某一时刻的一组&lt;u&gt;对象&lt;/u&gt;以及它们之间的&lt;u&gt;关系&lt;/u&gt;，描述了在类图中所建立事物的实例的静态快照&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061786263.png&#34;
	width=&#34;713&#34;
	height=&#34;312&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682061786263_hua46f494b700cf1a0ac17d6d1520c7d36_50579_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对象图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;548px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用例图&lt;/strong&gt;：展现了一组&lt;u&gt;用例&lt;/u&gt;、&lt;u&gt;参与者&lt;/u&gt;以及它们之间的&lt;u&gt;关系（包含、扩展、关联和泛化）&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682062071630.png&#34;
	width=&#34;756&#34;
	height=&#34;382&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682062071630_hue8ceb70c383d5b84d539f99bc1fa6287_66549_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用例图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;474px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;序列图（顺序图，时序图）&lt;/strong&gt;：描述了以&lt;u&gt;时间顺序&lt;/u&gt;组织的&lt;u&gt;对象&lt;/u&gt;之间的&lt;u&gt;交互活动&lt;/u&gt;，强调&lt;u&gt;消息时间顺序&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682064874751.png&#34;
	width=&#34;691&#34;
	height=&#34;471&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682064874751_hu9f8f021651236d17904ea27f843ab916_52872_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;序列图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通信图（协作图）&lt;/strong&gt;：强调&lt;u&gt;收发消息的对象的结构组织&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682065157645.png&#34;
	width=&#34;719&#34;
	height=&#34;314&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682065157645_hu479fbd97a58f555006937d3c577e3006_30791_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;通信图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态图（状态转换图）&lt;/strong&gt;：展现了一个状态机，强调&lt;u&gt;对象行为的事件顺序&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682066287326.png&#34;
	width=&#34;831&#34;
	height=&#34;431&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682066287326_hu94ea09022f5bcd63fe669c1e18a4beb2_47522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;活动图&lt;/strong&gt;：一种特殊的状态图，展现了在&lt;u&gt;系统内从一个活动到另一个活动的流程&lt;/u&gt;，强调&lt;u&gt;对象间的控制流程&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682067363114.png&#34;
	width=&#34;654&#34;
	height=&#34;744&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/1682067363114_hua57a5009862c06a77af06a14b99cf391_95291_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;活动图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构件图（组件图)&lt;/strong&gt;：展现了一组&lt;u&gt;构件之间的组织和依赖&lt;/u&gt;，将构件映射为类、接口或协作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682068370459.png&#34;
	width=&#34;638&#34;
	height=&#34;332&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682068370459_hue00d8420ae8e9d060383db5e372a8f97_47534_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;构件图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部署图&lt;/strong&gt;：对物理建模，展现了&lt;u&gt;运行时处理结点以及其中构件（制品）的配置&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682073176388.png&#34;
	width=&#34;491&#34;
	height=&#34;327&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682073176388_hu28a5a922204a8226fa8f8a21e50bdfbf_36398_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;部署图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;设计模式&#34;&gt;设计模式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;设计模式代码仓库：&lt;a class=&#34;link&#34; href=&#34;https://gitee.com/linner_cheng/design-patterns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitee.com/linner_cheng/design-patterns&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每一个设计模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。使用设计模式能减少一些重复劳动。设计模式的核心在于提供了相关问题的解决方案，使得人们可以更加简单方便地&lt;u&gt;复用成功的设计和体系结构&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;设计模式一般有以下4个要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式名称（Pattern Name）&lt;/li&gt;
&lt;li&gt;问题（Problem）&lt;/li&gt;
&lt;li&gt;解决方案（Solution）&lt;/li&gt;
&lt;li&gt;效果（Consequences）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定了所包含的&lt;u&gt;类&lt;/u&gt;和&lt;u&gt;实例&lt;/u&gt;的：
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;角色&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;协作方式&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;职责分配&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每一个设计模式都：
&lt;ul&gt;
&lt;li&gt;集中于一个特定的&lt;u&gt;面向对象设计问题&lt;/u&gt;或设计要点&lt;/li&gt;
&lt;li&gt;描述了什么时候使用它&lt;/li&gt;
&lt;li&gt;在另一些设计约束条件下是否还能使用&lt;/li&gt;
&lt;li&gt;使用的效果和如何取舍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计模式分类：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;br&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;创建型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;结构型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;行为型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;说明&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与对象的创建有关&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;处理类或对象的组合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述类或对象的交互和职责分配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类模式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Factory Method（工厂方法模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adapter（适配器模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Interpreter（解释器模式）&lt;br&gt;Template Method（模板方法模式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对象模式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Abstract Factory（抽象工厂模式）&lt;br&gt;Builder（生成器模式）&lt;br&gt;Prototype（原型模式）&lt;br&gt;Singleton（单例模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adapter（适配器模式）&lt;br&gt;Bridge（桥接模式）&lt;br&gt;Composite（组合模式）&lt;br&gt;Decorator（装饰器模式）&lt;br&gt;Facade（外观模式）&lt;br&gt;Flyweight（享元模式）&lt;br&gt;Proxy（代理模式）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chain of Responsibility（责任链模式）&lt;br&gt;Command（命令模式）&lt;br&gt;Iterator（迭代器模式）&lt;br&gt;Mediator（中介者模式）&lt;br&gt;Memento（备忘录模式）&lt;br&gt;Observer（观察者模式）&lt;br&gt;State（状态模式）&lt;br&gt;Strategy（策略模式）&lt;br&gt;Visitor（访问者模式）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;创建型设计模式&#34;&gt;创建型设计模式&lt;/h2&gt;
&lt;p&gt;创建型模式&lt;u&gt;抽象了实例化过程&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类创建型模式（工厂方法）：使用继承改变被实例化的类；&lt;/li&gt;
&lt;li&gt;对象创建型模式（剩余的其它）：将实例化委托给另一个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单工厂模式&#34;&gt;简单工厂模式&lt;/h3&gt;
&lt;p&gt;简单工厂模式属于创建型模式，但不属于23种设计模式之一。&lt;/p&gt;
&lt;p&gt;简单工厂模式定义了一个工厂类，它可以根据参数的不同，返回不同类的实例，被创建的实例通常都具有共同的父类。&lt;/p&gt;
&lt;p&gt;在简单工厂模式中用于创建实例的方法通常长为静态（&lt;code&gt;static&lt;/code&gt;）方法，因此简单工厂模式又称为静态工厂方法（Static Factroy Method）。&lt;/p&gt;
&lt;p&gt;简单工厂模式包含以下三种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂（核心）：负责实现创建所有产品的内部逻辑。工厂类可以被外界直接调用，创建所需对象。&lt;/li&gt;
&lt;li&gt;抽象产品：工厂类所创建的所有对象的父类，封装了产品对象的公共方法，所有的具体产品为其子类对象。&lt;/li&gt;
&lt;li&gt;具体产品：简单工厂模式的创建目标，所有被创建的对象都是某个具体类的实例，它要实现抽象产品中声明的抽象方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684673603980.png&#34;
	width=&#34;388&#34;
	height=&#34;389&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684673603980_hu2ef0ebae0df52fd887858a47b2f64eb2_23589_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684673603980_hu2ef0ebae0df52fd887858a47b2f64eb2_23589_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;简单工厂模式示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;99&#34;
		data-flex-basis=&#34;239px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;代码示例如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 抽象产品
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 抽象方法，返回产品信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ProductA&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 具体产品A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProductA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Product &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;产品的信息：A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ProductB&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 具体产品B
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProductB&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Product &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;产品的信息：B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Factory&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 静态工厂类
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 根据参数获取Product
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param type 指定创建的对象的类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Product &lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String type&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Product product &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 判读参数，声明对应的对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            product &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductA&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            product &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductB&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;没有&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; type &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;类型的产品&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; product&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleFactory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Product productA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        productA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Product productB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        productB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Product productC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;productC&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;工厂方法&#34;&gt;工厂方法&lt;/h3&gt;
&lt;p&gt;工厂方法（Factory Method）模式定义一个用于&lt;u&gt;创建对象的接口&lt;/u&gt;，让&lt;u&gt;子类决定实例化哪一个类&lt;/u&gt;。工厂模式&lt;u&gt;使一个类的实例化延迟到其子类&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单工厂违反了开放封闭原则，对扩展是开发的，对修改是封闭的。所以工厂方法的接口不创建具体的对象，而是交由子类来实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工厂方法结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682232330534.png&#34;
	width=&#34;725&#34;
	height=&#34;268&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682232330534_huc77d54806485b83d5b01369d9c023787_25091_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682232330534_huc77d54806485b83d5b01369d9c023787_25091_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;工厂方法结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;270&#34;
		data-flex-basis=&#34;649px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：定义工厂方法所创建的对象的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteProduct&lt;/code&gt;：实现&lt;code&gt;Product&lt;/code&gt;接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Creator&lt;/code&gt;：声明工厂方法，该方法返回一个&lt;code&gt;Product&lt;/code&gt;类型的对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Creator&lt;/code&gt;也可以定义一个工厂方法的默认实现，它返回一个默认的&lt;code&gt;ConcreteProduct&lt;/code&gt;对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteCreator&lt;/code&gt;：重定义工厂方法以返回一个&lt;code&gt;ConcreteProduct&lt;/code&gt;实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684730369571.png&#34;
	width=&#34;485&#34;
	height=&#34;463&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684730369571_hu7977095aad3e90574890476c02b8b81e_30170_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684730369571_hu7977095aad3e90574890476c02b8b81e_30170_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;工厂方法示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;251px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 产品接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     这里抽象产品是接口还是抽象类不重要，重要的是Factory一定得是接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 接口方法，返回产品信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ProductA&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProductA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Product &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;产品的信息：A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ProductB&lt;/code&gt;与&lt;code&gt;ProductA&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Factory&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 工厂方法接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    * 接口方法，获取Product
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product &lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FactoryA&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 工厂A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     只负责生产ProductA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FactoryA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Factory &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 实现方法创建ProductA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product &lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 直接返回ProductA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductA&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FactoryB&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 工厂B
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     只负责生产ProductB
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FactoryB&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Factory &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 实现方法创建ProductB
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product &lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 直接返回ProductB
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductB&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FactoryMethod&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Factory factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FactoryA&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Product productA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FactoryB&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Product productB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProduct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Factory Method模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个类&lt;u&gt;不知道它所必须创建的对象的类&lt;/u&gt;（不知道要创建的具体类）的时候。&lt;/li&gt;
&lt;li&gt;当一个类希望&lt;u&gt;由它的子类来指定它所创建的对象&lt;/u&gt;的时候。&lt;/li&gt;
&lt;li&gt;当类&lt;u&gt;将创建对象的职责委托给多个帮助子类中的某一个&lt;/u&gt;，并且你希望将哪一个&lt;u&gt;帮助子类是代理者&lt;/u&gt;这一信息局部化的时候。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工厂方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：用户类和工厂类分开。&lt;/li&gt;
&lt;li&gt;优点：用户需要什么对象，只需向工厂请求即可。用户无需修改就可使用对象。&lt;/li&gt;
&lt;li&gt;缺点：对象修改时，工厂类也需要做相应的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象工厂模式&#34;&gt;抽象工厂模式&lt;/h3&gt;
&lt;p&gt;抽象工厂（Abstract Factory）提供一个&lt;u&gt;创建一系列相关或相互依赖对象的接口&lt;/u&gt;，而&lt;u&gt;无须指定它们具体的类&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象工厂的工厂类是&lt;code&gt;abstract class&lt;/code&gt;（抽象类），工厂方法是&lt;code&gt;interface&lt;/code&gt;。抽象工厂可以创建更多的类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;抽象工厂模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682230457950.png&#34;
	width=&#34;704&#34;
	height=&#34;330&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682230457950_hu9c89e6a2ba3c7411a12e6de71f8df7cf_36899_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682230457950_hu9c89e6a2ba3c7411a12e6de71f8df7cf_36899_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;抽象工厂模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;512px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbstractFactory&lt;/code&gt;：声明一个创建抽象产品对象的操作接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteFactory&lt;/code&gt;：实现创建具体产品对象的操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AbstractProduct&lt;/code&gt;：为一类产品对象声明一个接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteProduct&lt;/code&gt;：定义一个将被相应的具体工厂创建的产品对象，实现&lt;code&gt;AbstractProduct&lt;/code&gt;接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Client&lt;/code&gt;：仅使用由&lt;code&gt;AbstractFactory&lt;/code&gt;和&lt;code&gt;AbstractProduct&lt;/code&gt;类声明的接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;创建两个产品接口&lt;code&gt;ProductA&lt;/code&gt;和&lt;code&gt;ProductB&lt;/code&gt;，并分别创建这两个产品接口的实现类&lt;code&gt;ProductA1&lt;/code&gt;和&lt;code&gt;ProductA2&lt;/code&gt;以及&lt;code&gt;ProductB1&lt;/code&gt;和&lt;code&gt;ProductB2&lt;/code&gt;。代码略。需要注意的是这里&lt;code&gt;ProductA&lt;/code&gt;和&lt;code&gt;ProductB&lt;/code&gt;代表两种不同的产品，它们的类型可以完全不相同。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Factory&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 接口方法获取ProductA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ProductA &lt;span style=&#34;color:#a6e22e&#34;&gt;createProductA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 接口方法获取ProductB
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ProductB &lt;span style=&#34;color:#a6e22e&#34;&gt;createProductB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Factory1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 工厂1创建产品ProductA1和ProductB1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Factory &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 创建产品ProductA1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ProductA &lt;span style=&#34;color:#a6e22e&#34;&gt;createProductA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductA1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 创建产品ProductB1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ProductB &lt;span style=&#34;color:#a6e22e&#34;&gt;createProductB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductB1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Factory2&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 工厂2创建产品ProductA2和ProductB2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Factory &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 代码与Factory1类似，略 */&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractFactory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Factory factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Factory1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        ProductA productA1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProductA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        ProductB productB1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProductB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productA1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productB1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Factory2&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        ProductA productA2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProductA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        ProductB productB2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createProductB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productA2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productB2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Abstract Factory模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个系统要&lt;u&gt;独立于它的产品的创建、&lt;strong&gt;组合&lt;/strong&gt;和表示&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;一个系统要由&lt;u&gt;多个产品系列中的一个来配置&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;当要强调&lt;u&gt;一系列相关的产品&lt;/u&gt;对象的设计以便进行&lt;u&gt;联合使用&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;当提供一个&lt;u&gt;产品类库&lt;/u&gt;，只想&lt;u&gt;显示它们的接口而不是实现&lt;/u&gt;时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抽象工厂模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类（具体工厂）去做。它仅负责给存储具体工厂类必须实现的接口。&lt;/p&gt;
&lt;h3 id=&#34;生成器模式&#34;&gt;生成器模式&lt;/h3&gt;
&lt;p&gt;生成器（Builder，&lt;strong&gt;建造者&lt;/strong&gt;）模式将一个&lt;u&gt;复杂对象的&lt;strong&gt;构建&lt;/strong&gt;与它的&lt;strong&gt;表示&lt;/strong&gt;分离&lt;/u&gt;，使得&lt;u&gt;同样的构建过程可以创建不同的表示&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;生成器模式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682231345251.png&#34;
	width=&#34;729&#34;
	height=&#34;261&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682231345251_hu690497866a39e8a8fdd5b4c1f3b39af4_22986_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682231345251_hu690497866a39e8a8fdd5b4c1f3b39af4_22986_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;生成器模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：表示被构造的复杂对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Builder&lt;/code&gt;：为创建一个&lt;code&gt;Product&lt;/code&gt;对象的各个部件指定抽象接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BuildPart()&lt;/code&gt;：生成零件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteBuilder&lt;/code&gt;：实现&lt;code&gt;Builder&lt;/code&gt;的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，提供一个检索产品的接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcreteBuilder&lt;/code&gt;创建&lt;code&gt;Product&lt;/code&gt;对象产品的内部表示并定义它的装配过程。包含定义组成组件的类，包括将这些组件装配成最终产品的接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetResult()&lt;/code&gt;：获取生成（组装完成）的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Director&lt;/code&gt;：构造一个使用&lt;code&gt;Builder&lt;/code&gt;接口的对象。最终是使用&lt;code&gt;Director&lt;/code&gt;来构造&lt;code&gt;Product&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 零件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 添加零件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param part 要添加的零件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String part&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;part&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parts=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; parts &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Builder&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 生成产品零件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buildPart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 获取结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; Product &lt;span style=&#34;color:#a6e22e&#34;&gt;getResult&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Builder1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Builder &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Product product &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Product&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buildPart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product &lt;span style=&#34;color:#a6e22e&#34;&gt;getResult&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; product&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Builder2&lt;/code&gt;与&lt;code&gt;Builder1&lt;/code&gt;类似，略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Director&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Director&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 根据指定的Builder来生产零件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param builder 指定用来生产零件的Builder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Builder builder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        builder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buildPart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BuilderTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Director director &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Director&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Builder builder1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Builder1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        director&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;builder1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Product product1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResult&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;product1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Builder2 builder2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Builder2&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        director&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;construct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;builder2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Product product2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResult&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;product2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Builder模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当&lt;u&gt;创建复杂对象的算法&lt;/u&gt;应该&lt;u&gt;独立于该对象的组成部分以及它们的装配方式&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;当&lt;u&gt;构造过程必须允许被构造的对象有不同的表示&lt;/u&gt;时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原型模式&#34;&gt;原型模式&lt;/h3&gt;
&lt;p&gt;原型（Prototype）模式用&lt;u&gt;原型实例指定创建对象的种类&lt;/u&gt;，并且&lt;u&gt;通过复制这些原型创建新的对象&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;原型模式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682233376386.png&#34;
	width=&#34;638&#34;
	height=&#34;298&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682233376386_hu1813704620029f1adb77611772cb6330_23912_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682233376386_hu1813704620029f1adb77611772cb6330_23912_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;原型模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;513px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Prototype&lt;/code&gt;：声明一个复制自身的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcretePrototype&lt;/code&gt;：实现一个复制自身的操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Client&lt;/code&gt;：让一个原型复制自身从而创建一个新的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prototype&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Prototype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 克隆方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Prototype &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Double price&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 价格
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Double price&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;price&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; price&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Product object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Product&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 这里也可以直接使用带参的构造方法，而不必使用setter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; object&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 省略 getter, setter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, price=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; price &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrototypeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Product product1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Product&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2023&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product1: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; product1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Product product2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Product&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; product1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product2: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; product2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Prototype模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个系统应该&lt;u&gt;独立于它的产品创建、&lt;strong&gt;构成&lt;/strong&gt;和表示&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;当要实例化的类是在&lt;u&gt;运行时刻指定&lt;/u&gt;时，例如，通过动态装载。&lt;/li&gt;
&lt;li&gt;为了&lt;u&gt;避免创建&lt;/u&gt;一个&lt;u&gt;与产品类层次平行的工厂类层次&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;当一个类的&lt;u&gt;实例只能有几个不同状态组合中的一种&lt;/u&gt;时。建立相应数目的原型并克隆它们，可能比每次用合适的状态手工实例化该类更方便一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原型模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：通过给出一个原型对象来指明所要创建的对象的类型，然后复制这个原型对象的方法创建出更多同类型的对象。&lt;/li&gt;
&lt;li&gt;优点：允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。&lt;/li&gt;
&lt;li&gt;缺点：每一个类都必须配备一个克隆方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单例模式&#34;&gt;单例模式&lt;/h3&gt;
&lt;p&gt;单例（Singleton，单态）模式保证&lt;u&gt;一个类仅有一个实例&lt;/u&gt;，并&lt;u&gt;提供一个访问它的全局访问点&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就好像Spring中的Bean，每个Bean默认有且仅有一个实例，通过&lt;code&gt;@Autowired&lt;/code&gt;自动装配（来访问）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单例模式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682233866165.png&#34;
	width=&#34;464&#34;
	height=&#34;169&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682233866165_huef95807dda454cba71e939a884d0b18a_14126_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682233866165_huef95807dda454cba71e939a884d0b18a_14126_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;单例模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;658px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Singleton&lt;/code&gt;：指定一个&lt;code&gt;Instance&lt;/code&gt;操作，允许客户访问它的唯一实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Instance&lt;/code&gt;：是一个类操作；可能负责创建它自己的唯一实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Singleton&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 在内部示例化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 定义私有的构造方法，让其它外部类无法通过构造方法示例化对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 全局访问方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *     因为该类为单例，所以使用静态方法获取即可
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SingletonTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 验证Singleton是否为单例，打印它的地址即可
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Singleton singleton1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;singleton1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Singleton singleton2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;singleton2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Singleton模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当类&lt;u&gt;只能有一个实例&lt;/u&gt;而且客户可以从一个众所周知的访问点访问它时。&lt;/li&gt;
&lt;li&gt;当这个&lt;u&gt;唯一实例&lt;/u&gt;应该是通过子类化可扩展的，并且&lt;u&gt;客户无须更改代码就能使用一个扩展的实例&lt;/u&gt;时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单例模式：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。&lt;/p&gt;
&lt;h2 id=&#34;结构型设计模式&#34;&gt;结构型设计模式&lt;/h2&gt;
&lt;p&gt;结构型设计模式涉及&lt;u&gt;如何组合类或对象以获得更大的结构&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构型类模式：&lt;u&gt;采用继承机制来组合接口或实现&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;一个简单的例子是&lt;u&gt;采用多重继承方法将两个以上的类组合成一个类&lt;/u&gt;，结果这个类包含了所有父类的性质。&lt;/p&gt;
&lt;p&gt;这一模式尤其有助于多个独立开发的类库协同工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构型对象模式：描述了&lt;u&gt;如何对一些对象进行组合，从而实现新功能的一些方法&lt;/u&gt;（不是对接口和实现进行组合）。&lt;/p&gt;
&lt;p&gt;因为可以在运行时刻改变对象组合关系，所以对象组合方式具有更大的灵活性，而这种机制用静态类组合是不可能实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;适配器模式&#34;&gt;适配器模式&lt;/h3&gt;
&lt;p&gt;适配器（Adapter，&lt;strong&gt;变压器&lt;/strong&gt;）模式&lt;u&gt;将一个类的接口转换成客户希望的另外一个接口&lt;/u&gt;。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类适配器使用多重继承对一个接口与另一个接口进行匹配：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684742134174.png&#34;
	width=&#34;834&#34;
	height=&#34;283&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684742134174_hu7df046caa470d36e253230e85d6e2972_27919_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684742134174_hu7df046caa470d36e253230e85d6e2972_27919_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类适配器模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;294&#34;
		data-flex-basis=&#34;707px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象适配器依赖于对象组合：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682299306295.png&#34;
	width=&#34;885&#34;
	height=&#34;340&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682299306295_hu70732d4798a13d6a6d2177345328e203_31455_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682299306295_hu70732d4798a13d6a6d2177345328e203_31455_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对象适配器模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;260&#34;
		data-flex-basis=&#34;624px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Target&lt;/code&gt;：定义&lt;code&gt;Client&lt;/code&gt;使用的与特定领域相关的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Client&lt;/code&gt;：与符合&lt;code&gt;Target&lt;/code&gt;接口的对象协同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Adaptee&lt;/code&gt;：定义一个已经存在的接口，这个接口需要适配。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Adapter&lt;/code&gt;（适配器）：对&lt;code&gt;Adaptee&lt;/code&gt;的接口与&lt;code&gt;Target&lt;/code&gt;接口进行适配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象适配器对象模式代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Target&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 目标接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Target request...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Adaptee&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 需适配接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Adaptee&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;specificRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Adaptee specificRequest...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Adapter&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Adapter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Target &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 对象适配
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Adaptee adaptee &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Adaptee&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 重写并在其中调用Adaptee的对应方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        adaptee&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;specificRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AdapterTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Target target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Adapter&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adapter模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想使用一个已经存在的类，而它的&lt;u&gt;接口不符合要求&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;想创建一个可以复用的类，该类可以&lt;u&gt;与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;（仅适用于对象Adapter）想使用一个已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。&lt;u&gt;对象适配器可以适配它的父类接口。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。&lt;/p&gt;
&lt;h3 id=&#34;桥接模式&#34;&gt;桥接模式&lt;/h3&gt;
&lt;p&gt;桥接（Bridge）模式&lt;u&gt;将抽象部分与其实现部分分离，使它们都可以独立地变化&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;桥接模式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682299992836.png&#34;
	width=&#34;932&#34;
	height=&#34;387&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682299992836_hudb1c01aa99ecdd687550b15293eda98a_45309_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682299992836_hudb1c01aa99ecdd687550b15293eda98a_45309_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;桥接模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;577px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Abstraction&lt;/code&gt;：定义&lt;u&gt;抽象类的接口&lt;/u&gt;，维护一个指向&lt;code&gt;Implementor&lt;/code&gt;类型对象的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RefinedAbstraction&lt;/code&gt;：扩充由&lt;code&gt;Abstraction&lt;/code&gt;定义的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Implementor&lt;/code&gt;：定义&lt;u&gt;实现类的接口&lt;/u&gt;，该接口不一定要与&lt;code&gt;Abstraction&lt;/code&gt;的接口完全一致；事实上这两个接口可以完全不同。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;code&gt;Implementor&lt;/code&gt;接口仅提供基本操作，而&lt;code&gt;Abstraction&lt;/code&gt;定义了基于这些基本操作的较高层次的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteImplementor&lt;/code&gt;：实现&lt;code&gt;Implementor&lt;/code&gt;接口并定义它的具体实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Color&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 产品颜色接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operationImp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Product product&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Product&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 产品接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 默认名称
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toHexString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Color color&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 指向Implementor的指针，其实用private也可以，只需要为其定义getter、setter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Color &lt;span style=&#34;color:#a6e22e&#34;&gt;getColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; color&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Color color&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; color&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name=&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, color=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Red&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Color &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operationImp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Product product&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;product&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Bule&lt;/code&gt;与&lt;code&gt;Red&lt;/code&gt;类似，略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ProductA&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProductA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Product &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        color&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operationImp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bridge&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Product productA1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductA&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Color red &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Red&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productA1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;red&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        productA1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Product productA2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductA&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Color blue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Blue&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        productA2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;blue&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        productA2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bridge模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;不希望在抽象和它的实现部分之间有一个固定的绑定关系。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;例如，这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类的&lt;u&gt;抽象&lt;/u&gt;以及它的&lt;u&gt;实现都&lt;/u&gt;应该&lt;u&gt;可以通过生成子类的方法加以扩充&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;这是Bridge模式使得开发者&lt;u&gt;可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对一个&lt;u&gt;抽象的实现部分的修改&lt;/u&gt;应对客户不产生影响，即&lt;u&gt;客户代码不必重新编译&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（C++）想对客户完全&lt;u&gt;隐藏抽象的实现部分&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有许多类要生成的类层次结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想在&lt;u&gt;多个对象间共享实现&lt;/u&gt;（可能使用引用计数），但同时要求&lt;u&gt;客户并不知道这一点&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联。也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化。&lt;/p&gt;
&lt;h3 id=&#34;组合模式&#34;&gt;组合模式&lt;/h3&gt;
&lt;p&gt;组合（Composite，&lt;strong&gt;合成&lt;/strong&gt;）模式&lt;u&gt;将对象组合成树型结构以表示“部分——整体”的层次结构&lt;/u&gt;。Composite使得用户&lt;u&gt;对单个对象和组合对象的使用具有一致性&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;组合模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682300973563.png&#34;
	width=&#34;940&#34;
	height=&#34;440&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682300973563_hu29c872695ca6ff6ded5279e7e927bfc7_52033_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682300973563_hu29c872695ca6ff6ded5279e7e927bfc7_52033_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;组合模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;512px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Component&lt;/code&gt;：为组合中的对象&lt;u&gt;声明接口&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在适当情况下&lt;u&gt;实现所有类共有接口的默认行为&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;声明一个接口用于访问和管理&lt;code&gt;Component&lt;/code&gt;的子组件；&lt;/li&gt;
&lt;li&gt;（可选）&lt;u&gt;在递归结构中定义一个接口，用于访问一个父组件&lt;/u&gt;，并在合适的情况下&lt;u&gt;实现&lt;/u&gt;它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Leaf&lt;/code&gt;：在组合中表示&lt;u&gt;叶结点对象&lt;/u&gt;，叶结点没有子结点；在组合中&lt;u&gt;定义图元对象的行为&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Composite&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义有子组件的那些组件的行为；&lt;/li&gt;
&lt;li&gt;存储子组件；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Component&lt;/code&gt;接口中实现与子组件有关的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;：通过&lt;code&gt;Component&lt;/code&gt;接口操纵组合组件的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AbstractFile&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 模范Linux tree命令的输出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *     只是为了展示，并不重要
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toTreeString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String treeString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; childrenList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getChildrenList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;childrenList &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            treeString &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                AbstractFile children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                String childTreeString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toTreeString&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;children&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; split &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childTreeString&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                childTreeString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;├&amp;#39;&lt;/span&gt;
                     &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;└&amp;#39;&lt;/span&gt;
                     &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;│&amp;#39;&lt;/span&gt;
                     &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;    &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;│   &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;└── &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;├── &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    childTreeString &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                treeString &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; childTreeString&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; treeString&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChildrenList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;File&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractFile &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChildrenList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Folder&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Folder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractFile &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; childrenList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Folder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AbstractFile file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChildrenList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; toTreeString&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Composite&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 模仿Linux的文件结构
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        AbstractFile root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Folder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; childrenNameList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sbin&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boot&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sys&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;etc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usr&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String childrenName &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; childrenNameList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            AbstractFile children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Folder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;childrenName&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;children&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AbstractFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; childrenList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getChildrenList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        AbstractFile myFolder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Folder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linner&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        AbstractFile homeFolder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childrenList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        homeFolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;myFolder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 5&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            AbstractFile file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
            myFolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                AbstractFile folder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Folder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;folder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
                myFolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;folder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    AbstractFile folderFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
                    folder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;folderFile&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/
├── sbin
├── boot
├── sys
├── etc
├── usr
├── home
│   └── linner
│       ├── file1
│       ├── folder1
│       │   ├── file1_1
│       │   ├── file1_2
│       │   └── file1_3
│       ├── file2
│       ├── file3
│       ├── folder3
│       │   ├── file3_1
│       │   ├── file3_2
│       │   └── file3_3
│       ├── file4
│       ├── file5
│       └── folder5
│           ├── file5_1
│           ├── file5_2
│           └── file5_3
└── root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Composite模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想表示对象的&lt;u&gt;部分——整体层次结构&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;希望用户&lt;u&gt;忽略组合对象与单个对象的不同&lt;/u&gt;，用户将&lt;u&gt;统一地使用组合结构中的所有对象&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。&lt;/p&gt;
&lt;h3 id=&#34;装饰器模式&#34;&gt;装饰器模式&lt;/h3&gt;
&lt;p&gt;装饰器（Decorator）模式&lt;u&gt;动态地给一个对象添加一些额外的职责&lt;/u&gt;。装饰器提供了用子类扩展功能的灵活替代。就增加功能而言，&lt;u&gt;Decorator模式比派生子类更加灵活&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;装饰器模式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682302304911.png&#34;
	width=&#34;862&#34;
	height=&#34;392&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682302304911_hu87036585f545fff625bfcce0389726df_55394_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682302304911_hu87036585f545fff625bfcce0389726df_55394_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;装饰器模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;219&#34;
		data-flex-basis=&#34;527px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Component&lt;/code&gt;：定义一个&lt;u&gt;对象接口&lt;/u&gt;，可以给这些对象&lt;u&gt;动态地添加职责&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteComponent&lt;/code&gt;：定义一个对象，可以&lt;u&gt;给这个对象添加一些职责&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Decorator&lt;/code&gt;：&lt;u&gt;维持一个指向&lt;code&gt;Component&lt;/code&gt;对象的指针&lt;/u&gt;，并&lt;u&gt;定义一个与&lt;code&gt;Component&lt;/code&gt;接口一致的接口&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteDecorator&lt;/code&gt;：&lt;u&gt;向组件添加职责。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Person&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 职责
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Student&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;的职责：学习&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Decorator&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Person person&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DecoratorA&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DecoratorA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Decorator &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DecoratorA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Person person&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; person&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 原本的职责
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新职责：摸鱼&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DecoratorB&lt;/code&gt;与&lt;code&gt;DecoratorA&lt;/code&gt;类似，略；&lt;/p&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DecoratorPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Person zhangsan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Student&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        zhangsan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;============================&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;/*Decorator decoratorA = new DecoratorA(zhangsan);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        decoratorA.operation();*/&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 装饰器对象也相当于Person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 装饰链
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        zhangsan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DecoratorA&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;zhangsan&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        zhangsan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DecoratorB&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;zhangsan&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        zhangsan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Decorator模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;u&gt;不影响其他对象的情况下&lt;/u&gt;，以动态、透明的方式给单个对象&lt;u&gt;添加职责&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;处理那些可以撤销的职责&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;当不能采用生成子类的方式进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是，由于类定义被隐藏，或类定义不能用于生成子类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;外观模式&#34;&gt;外观模式&lt;/h3&gt;
&lt;p&gt;外观（Facade，&lt;strong&gt;门面&lt;/strong&gt;）模式&lt;u&gt;为子系统中的一组接口提供一个一致的门面（界面）&lt;/u&gt;，Facade模式&lt;u&gt;定义了&lt;/u&gt;一个&lt;u&gt;高层接口&lt;/u&gt;，这个接口&lt;u&gt;使得这一子系统更加容易使用&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;外观模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682302810965.png&#34;
	width=&#34;950&#34;
	height=&#34;376&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682302810965_hu0169411cc8d389f824aec2bd1bd88e86_24708_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682302810965_hu0169411cc8d389f824aec2bd1bd88e86_24708_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;外观模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;252&#34;
		data-flex-basis=&#34;606px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Facade&lt;/code&gt;：知道哪些子系统类负责处理请求；&lt;u&gt;将客户的请求代理给适当的子系统对象&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Subsystem classes&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现子系统的功能；&lt;/li&gt;
&lt;li&gt;处理有&lt;code&gt;Facade&lt;/code&gt;对象指派的任务；&lt;/li&gt;
&lt;li&gt;没有&lt;code&gt;Facade&lt;/code&gt;的任何相关信息，即没有指向&lt;code&gt;Facade&lt;/code&gt;的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SubSystem1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubSystem1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;执行子系统1的功能&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;SubSystem2&lt;/code&gt;和&lt;code&gt;SubSystem3&lt;/code&gt;与&lt;code&gt;SubSystem1&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Facade&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Facade&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SubSystem1 subSystem1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SubSystem2 subSystem2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SubSystem3 subSystem3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Facade&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        subSystem1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubSystem1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        subSystem2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubSystem2&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        subSystem3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubSystem3&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        subSystem1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;method1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        subSystem2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;method2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        subSystem3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;method3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FacadePattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Facade facade &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Facade&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        facade&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        facade&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        facade&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Facade模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Facade可以提供一个简单的默认视图，供大多数用户使用。&lt;/p&gt;
&lt;p&gt;要&lt;u&gt;为一个复杂子系统提供一个简单接口&lt;/u&gt;时，子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类，这使得子系统更具有可重用性，也更容易对子系统进行定制，但也给那些不需要定制子系统的用户带来一些使用上的困难。&lt;/p&gt;
&lt;p&gt;Facade提供的简单默认视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过Facade层。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;客户程序与抽象类的实现部分之间存在着很大的依赖性&lt;/u&gt;。引入Facade将这个子系统与客户以及其他的子系统分离，可以&lt;u&gt;提高子系统的独立性和可移植性&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当需要&lt;u&gt;构建一个层次结构的子系统&lt;/u&gt;时，&lt;u&gt;使用Facade模式定义子系统中每层的入口点&lt;/u&gt;。如果子系统之间是相互依赖的，则可以让它们仅通过Facade进行通信，从而&lt;u&gt;简化了它们之间的依赖关系&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外观模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。&lt;/p&gt;
&lt;p&gt;外观模式提供一个高层次的接口，使得子系统更易于使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个&lt;u&gt;单例模式&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;整个系统可以有多个门面类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;享元模式&#34;&gt;享元模式&lt;/h3&gt;
&lt;p&gt;享元（Flyweight）模式&lt;u&gt;运用共享技术有效地支持大量细粒度的对象&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;细粒度对象：在业务模型上，按照业务需求将对象加以细分，从而得到更多的业务模型对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;享元模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682305434953.png&#34;
	width=&#34;870&#34;
	height=&#34;561&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682305434953_hu5d09b2ef7c809ea7781b9cd3cc8a6bd3_70263_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682305434953_hu5d09b2ef7c809ea7781b9cd3cc8a6bd3_70263_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;享元模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Flyweight&lt;/code&gt;：描述一个接口，通过这个接口&lt;code&gt;Flyweight&lt;/code&gt;可以&lt;u&gt;接受并作用于外部状态&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteFlyweight&lt;/code&gt;：&lt;u&gt;实现&lt;code&gt;Flyweight&lt;/code&gt;接口，并为内部状态（如果有）增加存储空间。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcreteFlyweight&lt;/code&gt;对象必须是可共享的。它所存储的状态必须是内部的，即它必须独立于&lt;code&gt;ConcreteFlyweight&lt;/code&gt;对象的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并非所有的&lt;code&gt;Flyweight&lt;/code&gt;子类都需要被共享。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flyweight&lt;/code&gt;接口使共享成为可能，但它并不强制共享。在&lt;code&gt;Flyweight&lt;/code&gt;对象结构的某些层次，&lt;code&gt;UnsharedConcreteFlyweight&lt;/code&gt;对象通常将&lt;code&gt;ConcreteFlyweight&lt;/code&gt;对象作为子结点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FlyweightFactory&lt;/code&gt;：&lt;u&gt;创建并管理&lt;code&gt;Flyweight&lt;/code&gt;对象&lt;/u&gt;；确保合理地共享&lt;code&gt;Flyweight&lt;/code&gt;，当用户请求一个&lt;code&gt;Flyweight&lt;/code&gt;时，&lt;code&gt;FlyweightFactory&lt;/code&gt;对象提供一个已创建的实例或者在不存在时创建一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;：维持一个对&lt;code&gt;Flyweight&lt;/code&gt;的引用；计算或存储一个或多个&lt;code&gt;Flyweight&lt;/code&gt;的外部状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Piece&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Piece&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; String color&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; color&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;WhitePiece&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WhitePiece&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Piece &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WhitePiece&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PieceFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WHITE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 打印地址和坐标信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        String piece &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WhitePiece@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;piece&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BlackPiece&lt;/code&gt;与&lt;code&gt;WhitePiece&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PieceFactory&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PieceFactory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String WHITE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String BLACK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Piece&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; piecesMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
            WHITE&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WhitePiece&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
            BLACK&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BlackPiece&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Piece &lt;span style=&#34;color:#a6e22e&#34;&gt;getPiece&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String key&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; piecesMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Flyweight&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        PieceFactory factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PieceFactory&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Piece whitePiece1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPiece&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PieceFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WHITE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        whitePiece1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;20&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 23&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Piece whitePiece2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPiece&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PieceFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WHITE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        whitePiece2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 27&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Piece blackPiece1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPiece&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PieceFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BLACK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        blackPiece1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;20&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 22&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Piece blackPiece2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPiece&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PieceFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BLACK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        blackPiece2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 28&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flyweight模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个应用程序&lt;u&gt;使用了大量的对象&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;完全由于&lt;u&gt;使用大量的对象，造成很大的存储开销&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;对象的&lt;u&gt;大多数状态都可变为外部状态&lt;/u&gt;。
&lt;ul&gt;
&lt;li&gt;外部状态：容易发生改变的状态；&lt;/li&gt;
&lt;li&gt;内部状态：不容易发生改变的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果&lt;u&gt;删除对象的外部状态&lt;/u&gt;，那么&lt;u&gt;可以用相对较少的共享对象取代很多组对象&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;享元模式能做到共享的关键是区分状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内蕴状态：存储在享元内部，不会随环境的改变而有所不同。&lt;/li&gt;
&lt;li&gt;外蕴状态：随环境的改变而改变的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外蕴状态不能影响内蕴状态，它们是相互独立的。&lt;/p&gt;
&lt;p&gt;享元模式：将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。&lt;/p&gt;
&lt;h3 id=&#34;代理模式&#34;&gt;代理模式&lt;/h3&gt;
&lt;p&gt;代理（Proxy）模式为其他对象&lt;u&gt;提供一种代理以控制对这个对象的访问&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;代理模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682306107287.png&#34;
	width=&#34;807&#34;
	height=&#34;348&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682306107287_hu0d398b0509b4d48f9b3205627bb8971a_28885_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682306107287_hu0d398b0509b4d48f9b3205627bb8971a_28885_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;代理模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;231&#34;
		data-flex-basis=&#34;556px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Proxy&lt;/code&gt;：保存一个引用使得&lt;u&gt;代理可以访问实体&lt;/u&gt;；提供一个与&lt;code&gt;Subject&lt;/code&gt;的接口相同的接口，使&lt;u&gt;代理可以用来代替实体&lt;/u&gt;；&lt;u&gt;控制对实体的存取&lt;/u&gt;，并可能负责创建和删除它。&lt;/p&gt;
&lt;p&gt;其他功能依赖于代理的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Remote Proxy&lt;/code&gt;：负责对请求及其参数进行编码，并向不同地址空间中的实体发送己编码的请求；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Virtual Proxy&lt;/code&gt;：可以缓存实体的附加信息，以便延迟对它的访问；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Protection Proxy&lt;/code&gt;：检查调用者是否具有实现一个请求所必需的访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;/code&gt;：定义&lt;code&gt;RealSubject&lt;/code&gt;和&lt;code&gt;Proxy&lt;/code&gt;的共用接口，这样就在任何使用&lt;code&gt;RealSubject&lt;/code&gt;的地方都可以使用&lt;code&gt;Proxy&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RealSubject&lt;/code&gt;：定义&lt;code&gt;Proxy&lt;/code&gt;所代表的实体。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;RealSubject&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 代理实体
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RealSubject&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Subject &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RealSubject request...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Proxy&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 代理
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Proxy&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Subject &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; RealSubject realSubject&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Proxy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RealSubject realSubject&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;realSubject&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; realSubject&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proxy pre-request...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        realSubject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proxy post-request...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProxyPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        RealSubject realSubject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RealSubject&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Proxy proxy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;realSubject&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        proxy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Proxy模式适用于在&lt;u&gt;需要比较通用和复杂的对象指针代替简单的指针的时候&lt;/u&gt;，常见情况有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;远程代理（Remote Proxy）：为一个对象在不同地址空间提供局部代表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚代理(Virtual Proxy）：根据需要创建开销很大的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保护代理（Protection Proxy）：控制对原始对象的访问，用于对象应该有不同的访问权限的时候。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;智能引用（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作。&lt;/p&gt;
&lt;p&gt;典型用途包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对指向实际对象的引用计数，这样当该对象没有引用时，可以被自动释放；&lt;/li&gt;
&lt;li&gt;当第一次引用一个持久对象时，将它装入内存；&lt;/li&gt;
&lt;li&gt;在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;某些情况下，用户不想或者不能够直接引用一个对象，代理对象可以在用户和目标对象直接起到中介的作用。&lt;/p&gt;
&lt;p&gt;客户端分辨不出代理主题对象与真实主题对象。代理模式可以不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。&lt;/p&gt;
&lt;h2 id=&#34;行为型设计模式&#34;&gt;行为型设计模式&lt;/h2&gt;
&lt;p&gt;行为模式涉及&lt;u&gt;算法和对象间职责的分配&lt;/u&gt;。行为模式不仅&lt;u&gt;描述对象或类的模式&lt;/u&gt;，还&lt;u&gt;描述它们之间的通信模式&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;行为类模式：使用&lt;u&gt;继承机制&lt;/u&gt;在类间分派行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行为对象模式：使用&lt;u&gt;对象复合&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;一些行为对象模式&lt;u&gt;描述了一组&lt;strong&gt;对等&lt;/strong&gt;的对象怎样相互协作以完成其中任一个对象都无法单独完成的任务&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;责任链模式&#34;&gt;责任链模式&lt;/h3&gt;
&lt;p&gt;责任链（Chain of Responsibility）模式&lt;u&gt;使多个对象都有机会处理请求&lt;/u&gt;，从而避免请求的发送者和接收者之间的耦合关系。&lt;u&gt;将这些对象连成一条链&lt;/u&gt;，并&lt;u&gt;沿着这条链传递该请求，直到有一个对象处理它为止&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaWeb中&lt;code&gt;Filter&lt;/code&gt;（过滤器）就是责任链模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;责任链模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682307471896.png&#34;
	width=&#34;680&#34;
	height=&#34;348&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682307471896_huf23cf1c3201c893b8b3f5c2bf75098c6_29363_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682307471896_huf23cf1c3201c893b8b3f5c2bf75098c6_29363_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;责任链模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;468px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Handler&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义一个处理请求的接口；&lt;/li&gt;
&lt;li&gt;（可选）实现后继链。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteHandler&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理它所负责的请求；&lt;/li&gt;
&lt;li&gt;可访问它的后继者；&lt;/li&gt;
&lt;li&gt;如果可处理该请求，就处理它，否则将该请求转发给后继者。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;：向链上的具体处理者（&lt;code&gt;ConcreteHandler&lt;/code&gt;）对象提交请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Handler&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Handler next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Handler next&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FuDaoYuan&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 辅导员
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FuDaoYuan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Handler &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 审批7天内的假期
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;request &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FuDaoYuan allow...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无法审批&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;YuanZhang&lt;/code&gt;和&lt;code&gt;XiaoZhang&lt;/code&gt;与&lt;code&gt;FuDaoYuan&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChainOfResponsibility&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Handler fuDaoYuan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FuDaoYuan&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Handler yuanZhang &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; YuanZhang&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Handler xiaoZhang &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XiaoZhang&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        fuDaoYuan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;yuanZhang&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        yuanZhang&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;xiaoZhang&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        fuDaoYuan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=================&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        fuDaoYuan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=================&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        fuDaoYuan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;29&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=================&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        fuDaoYuan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handlerRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;31&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Chain of Responsibility模式适用于以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有&lt;u&gt;多个的对象可以处理一个请求&lt;/u&gt;，哪个对象处理该请求&lt;u&gt;运行时刻自动确定&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;想在&lt;u&gt;不明确指定接收者的情况下向多个对象中的一个提交一个请求&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;可处理一个请求的对象集合应被&lt;u&gt;动态指定&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。&lt;/p&gt;
&lt;p&gt;处理者有两个选择：承担责任或者把责任推给下家。&lt;/p&gt;
&lt;p&gt;一个请求可以最终不被任何接收端对象所接受。&lt;/p&gt;
&lt;h3 id=&#34;命令模式&#34;&gt;命令模式&lt;/h3&gt;
&lt;p&gt;命令（Command）模式将&lt;u&gt;一个请求封装为一个对象&lt;/u&gt;，从而使得可以&lt;u&gt;用不同的请求对客户进行参数化&lt;/u&gt;；对&lt;u&gt;请求排队&lt;/u&gt;或&lt;u&gt;记录请求日志&lt;/u&gt;，以及&lt;u&gt;支持可撤销的操作&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;命令模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682311014909.png&#34;
	width=&#34;924&#34;
	height=&#34;305&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682311014909_hu71620aca29416c3ad91bf9fc175e50fb_35195_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682311014909_hu71620aca29416c3ad91bf9fc175e50fb_35195_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;命令模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;302&#34;
		data-flex-basis=&#34;727px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Command&lt;/code&gt;：声明执行操作的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteCommand&lt;/code&gt;：将&lt;u&gt;一个接收者对象绑定于一个动作；调用接收者相应的操作&lt;/u&gt;，以实现&lt;code&gt;Execute&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;：创建一个具体命令对象并设定它的接收者&lt;code&gt;Receiver&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Invoker&lt;/code&gt;：要求该命令执行这个请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Receiver&lt;/code&gt;：知道如何实施与执行一个请求相关的操作。&lt;/p&gt;
&lt;p&gt;任何类都可能作为一个接收者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Command&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 命令接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 执行命令
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Tv&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 开机行为
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;powerOnAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tv power-on...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 关机行为
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;powerOffAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tv power-off...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PowerOn&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 开机命令
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PowerOn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Command &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Tv tv&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PowerOn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Tv tv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tv&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        tv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;powerOnAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PowerOff&lt;/code&gt;与&lt;code&gt;PowerOn&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Invoker&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 请求者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Command command&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 设置请求命令
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setCommand&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Command command&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; command&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 执行命令
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        command&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Tv tv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Tv&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Command powerOn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PowerOn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tv&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Command powerOff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PowerOff&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tv&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Invoker invoker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Invoker&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setCommand&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;powerOn&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setCommand&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;powerOff&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Command模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;抽象出待执行的动作以参数化某对象。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;Command模式是过程语言中的&lt;u&gt;回调&lt;/u&gt;（Callback）&lt;u&gt;机制&lt;/u&gt;的一个面向对象的&lt;u&gt;替代品&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;u&gt;不同的时刻指定、排列和执行请求&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;一个Command对象可以有一个与初始请求无关的生存期。&lt;/p&gt;
&lt;p&gt;如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可以将负责该请求的命令对象传递给另一个不同的进程，并在那实现该请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;支持取消操作&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;Command的Execute操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。&lt;/p&gt;
&lt;p&gt;Command接口必须添加一个Unexecute操作，该操作取消上一次Execute 调用的效果。&lt;/p&gt;
&lt;p&gt;执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Execute来实现重数不限的“取消和“重做”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;支持修改日志&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;这样当系统崩溃时，这些修改可以被重做一遍。&lt;/p&gt;
&lt;p&gt;在 Command 接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。&lt;/p&gt;
&lt;p&gt;从崩溃中恢复的过程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用构建在原语操作上的高层操作构造一个系统。&lt;/p&gt;
&lt;p&gt;这样一种结构在支持事务（Transaction）的信息系统中很常见。&lt;/p&gt;
&lt;p&gt;Command模式提供了对事务进行建模的方法。Command有一个公共接口，使得可以用同一种方式调用所有的事务，同时使用该模式也易于添加新事务以扩展系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令模式：把一个请求或者操作封装到一个对象中。命令模式把&lt;u&gt;发出命令的责任&lt;/u&gt;和&lt;u&gt;执行命令的责任&lt;/u&gt;分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不必知道接收请求的一方的接口；&lt;/li&gt;
&lt;li&gt;不必知道请求是怎么被接收&lt;/li&gt;
&lt;li&gt;不必知道请求的操作是否执行，何时被执行以及是怎么被执行的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解释器模式&#34;&gt;解释器模式&lt;/h3&gt;
&lt;p&gt;解释器（Interpreter）模式&lt;u&gt;给定一个语言，定义它的文法的一种表示，并定义一个解释器&lt;/u&gt;，这个解释器使用该表示来解释语言中的句子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可用于实现程序语言设计中的上下文无关文法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解释器模式结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682311888750.png&#34;
	width=&#34;705&#34;
	height=&#34;369&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682311888750_hu0fd3a707223ef37ad012b4e875690974_34918_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682311888750_hu0fd3a707223ef37ad012b4e875690974_34918_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;解释器模式结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AbstractExpression&lt;/code&gt;：声明一个&lt;u&gt;程序的解释操作&lt;/u&gt;，这个接口为抽象语法树中所有的结点所共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TerminalExpression&lt;/code&gt;：&lt;u&gt;实现与文法中的终结符相关联的解释操作&lt;/u&gt;；一个句子中的每个终结符需要该类的一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NonterminalExpression&lt;/code&gt;：对文法中的每一条规则都需要一个&lt;code&gt;NonterminalExpression&lt;/code&gt;类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为每个符号都维护一个&lt;code&gt;AbstractExpression&lt;/code&gt;类型的实例变量；&lt;/li&gt;
&lt;li&gt;为文法中的非终结符实现解释（&lt;code&gt;Interpret&lt;/code&gt;）操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt;：包含解释器之外的一些&lt;u&gt;全局信息&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;：构建（或被给定）表示该文法定义的语言中一个特定的句子的抽象语法树，该抽象语法树由&lt;code&gt;NonterminalExpression&lt;/code&gt;和&lt;code&gt;TerminalExpression&lt;/code&gt;的实例装配而成；调用解释操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interpreter模式适用于当&lt;u&gt;有一个语言需要解释执行&lt;/u&gt;，且&lt;u&gt;可将该语言中的句子表示为一个抽象语法树&lt;/u&gt;时，以下情况效果最好:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;该&lt;u&gt;文法简单&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对于复杂的发文，文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无须构建抽象语法树即可解释表达式，这样可以节省空间还可能节省时间。&lt;/p&gt;
&lt;p&gt;即Interpreter模式需要构建抽象语法树，如果文法太复杂，需要构建复杂的语法树，不便于管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;效率不是一个关键问题。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;最高效的解释器通常不是通过直接解释语法分析树实现的，而是首先将它们转换成另一种形式。不过，即使在这种情况下，转换器仍然可用该模式实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;题目选项描述：&lt;/p&gt;
&lt;p&gt;有一个语言需要&lt;u&gt;解释执行&lt;/u&gt;，并且可将句子表示为一个&lt;u&gt;抽象语法树&lt;/u&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解释器模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在SQL解析、符号处理引擎等。&lt;/p&gt;
&lt;h3 id=&#34;迭代器模式&#34;&gt;迭代器模式&lt;/h3&gt;
&lt;p&gt;迭代器（Iterator）模式&lt;u&gt;提供一种方法顺序访问&lt;/u&gt;一个&lt;u&gt;聚合对象中的各个元素&lt;/u&gt;，且&lt;u&gt;不需要暴露该对象的内部表示&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多个对象聚在一起形成的总体称之为聚合（聚集），聚合对象是能够包容一组对象的容器对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。&lt;/p&gt;
&lt;p&gt;迭代器模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682312615849.png&#34;
	width=&#34;845&#34;
	height=&#34;401&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682312615849_hub10e6946683a05bf6194a5483b6bc2bc_43952_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682312615849_hub10e6946683a05bf6194a5483b6bc2bc_43952_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;迭代器模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Iterator&lt;/code&gt;（迭代器）：定义访问和遍历元素的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteIterator&lt;/code&gt;（具体迭代器）：实现迭代器接口；对该聚合遍历时跟踪当前位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Aggregate&lt;/code&gt;（聚合）：定义创建相应迭代器对象的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteAggregate&lt;/code&gt;（具体聚合）：实现创建相应迭代器的接口，该操作返回&lt;code&gt;ConcreteIterator&lt;/code&gt;的一个适当的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Book&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Double price&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// getter、setter和toString，略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Aggregate&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aggregate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Iterator &lt;span style=&#34;color:#a6e22e&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Iterator&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Iterator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BookAggregate&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookAggregate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Aggregate &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Book&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; books &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Book book&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        books&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;book&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Book &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; books&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; books&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Iterator &lt;span style=&#34;color:#a6e22e&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BookIterator&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BookIterator&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 迭代对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookIterator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Iterator &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BookAggregate bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookIterator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BookAggregate bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bookAggregate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;++);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IteratorPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        BookAggregate bookAggregate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Double&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; booksMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;数据结构&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;操作系统&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计算机网络&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 40&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;96&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计算机组成原理&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 81&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;92&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        booksMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;

        Iterator iterator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bookAggregate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;iterator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Book book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Book&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; iterator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;book&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Iterator模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;访问&lt;/u&gt;一个&lt;u&gt;聚合对象的内容&lt;/u&gt;而&lt;u&gt;无须暴露它的内部表示&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;支持&lt;u&gt;对聚合对象的多种遍历&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;为&lt;u&gt;遍历不同的聚合结构提供一个统一的接口&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中介者模式&#34;&gt;中介者模式&lt;/h3&gt;
&lt;p&gt;中介者模式（Mediator，调停者）用一个&lt;u&gt;中介对象来封装一系列的对象交互&lt;/u&gt;。中介者&lt;u&gt;使各对象不需要显式地相互引用&lt;/u&gt;，从而使其&lt;u&gt;耦合松散&lt;/u&gt;，而且&lt;u&gt;可以独立地改变它们之间的交互&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;中介者模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682313139750.png&#34;
	width=&#34;855&#34;
	height=&#34;236&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682313139750_hue770aa3c8fde88302c9d09952e57e382_24131_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682313139750_hue770aa3c8fde88302c9d09952e57e382_24131_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;中介者模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;362&#34;
		data-flex-basis=&#34;869px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mediator&lt;/code&gt;（中介者）：定义一个接口用于各同事（&lt;code&gt;Colleague&lt;/code&gt;）对象通信。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteMediator&lt;/code&gt;（具体中介者）：通过协调各同事对象实现协作行为；了解并维护它的各个同事。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Colleague&lt;/code&gt;（同事类）：知道它的中介者对象；每一个同事类对象在需要与其他同事通信的时候与它的中介者通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mediator模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;一组对象以定义良好但是复杂的方式进行通信&lt;/u&gt;，产生的&lt;u&gt;相互依赖关系结构混乱且难以理解&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;一个对象引用其他很多对象&lt;/u&gt;并且&lt;u&gt;直接与这些对象通信&lt;/u&gt;，&lt;u&gt;导致难以复用该对象&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;想&lt;u&gt;定制一个分布在多个类中的行为&lt;/u&gt;，而又&lt;u&gt;不想生成太多的子类&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中介者模式：包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。&lt;/p&gt;
&lt;p&gt;当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。中介者模式将多对多的相互作用转化为一对多的相互作用。&lt;/p&gt;
&lt;p&gt;中介者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。&lt;/p&gt;
&lt;h3 id=&#34;备忘录模式&#34;&gt;备忘录模式&lt;/h3&gt;
&lt;p&gt;备忘录（Memento）模式在&lt;u&gt;不破坏封装性的前提下，捕获一个对象的内部状态&lt;/u&gt;，并在对象之外保存这个状态。这样以后就可以&lt;u&gt;将对象恢复到原先保存的状态&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;Memento模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682314218216.png&#34;
	width=&#34;847&#34;
	height=&#34;266&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682314218216_hu96fb8022010cf254fe57392ea3f8173e_38752_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682314218216_hu96fb8022010cf254fe57392ea3f8173e_38752_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Memento模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;318&#34;
		data-flex-basis=&#34;764px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Memento&lt;/code&gt;（备忘录）：存储原发器对象的内部状态，原发器根据需要决定备忘录存储原发器的哪些内部状态；防止原发器以外的其他对象访问备忘录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Originator&lt;/code&gt;（原发器）：创建一个备忘录，用于记录当前时刻它的内部状态；使用备忘录恢复内部状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Caretaker&lt;/code&gt;（管理者）负责保存好备忘录；不能对备忘录的内容进行操作或检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Memento模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须&lt;u&gt;保存&lt;/u&gt;一个&lt;u&gt;对象在某一个时刻的（部分）状态&lt;/u&gt;，这样以后需要时它才能&lt;u&gt;恢复到先前的状态&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;如果用接口来让其他对象直接得到这些状态，将会&lt;u&gt;暴露对象的实现细节并破坏对象的封装性&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;题目选项描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将对象的状态恢复到先前的状态。&lt;/li&gt;
&lt;li&gt;在不破坏封装性的前提下，捕获对象的内部状态并在对象之外保存。&lt;/li&gt;
&lt;li&gt;必须保存一个对象在某一个时刻的（部分）状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键词：&lt;u&gt;状态&lt;/u&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。&lt;/p&gt;
&lt;h3 id=&#34;观察者模式&#34;&gt;观察者模式&lt;/h3&gt;
&lt;p&gt;观察者（Observer）模式&lt;u&gt;定义对象间的一种一对多的依赖关系&lt;/u&gt;，当&lt;u&gt;一个对象的状态发生改变&lt;/u&gt;时，&lt;u&gt;所有依赖于它的对象都得到通知并被自动更新&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即，观察者模式让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaWeb中&lt;code&gt;Listener&lt;/code&gt;就是观察者模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观察者模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682314647475.png&#34;
	width=&#34;814&#34;
	height=&#34;315&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682314647475_hu9d1a28a63559700a0e73d11397468ba2_57129_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682314647475_hu9d1a28a63559700a0e73d11397468ba2_57129_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;观察者模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;258&#34;
		data-flex-basis=&#34;620px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Subject&lt;/code&gt;（目标）：提供注册和删除观察者对象的接口；知道它的观察者，可以有任意多个观察者观察同一个目标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Observer&lt;/code&gt;（观察者）：为那些在目标发生改变时需获得通知的对象&lt;u&gt;定义&lt;/u&gt;一个&lt;u&gt;更新接口&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteSubject&lt;/code&gt;（具体目标）：将&lt;u&gt;有关状态存入各&lt;code&gt;ConcreteObserver&lt;/code&gt;对象&lt;/u&gt;；当它的&lt;u&gt;状态发生改变&lt;/u&gt;时，向它的各个观察者&lt;u&gt;发出通知&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteObserver&lt;/code&gt;（具体观察者）：维护一个指向&lt;code&gt;ConcreteSubject&lt;/code&gt;对象的引用；&lt;u&gt;存储有关状态&lt;/u&gt;，这些状态应与目标的状态保持一致；实现&lt;code&gt;Observer&lt;/code&gt;的更新接口，以&lt;u&gt;使自身状态与目标的状态保持一致&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Observer&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 观察者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 更新观察者状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 观察目标
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 注册观察者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Observer observer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 删除观察者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;detach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Observer observer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 状态改变，通知所有观察者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notifyAllObservers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String state&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ConcreteObserver&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcreteObserver&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Observer &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Subject subject&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcreteObserver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Subject subject&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subject&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[收到通知] &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ConcreteObserver{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name=&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; , state=&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; , subject=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; subject &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ConcreteSubject&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcreteSubject&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Subject &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; observerList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcreteSubject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        observerList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Observer observer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        observerList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;observer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;detach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Observer observer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        observerList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;observer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notifyAllObservers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[发出通知] &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Observer observer &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; observerList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            observer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String state&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[状态改变] &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        notifyAllObservers&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ConcreteSubject{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name=&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; , state=&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObserverPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Subject subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcreteSubject&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;主题&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Observer zhangsan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcreteObserver&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; subject&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Observer lisi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcreteObserver&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;李四&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; subject&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Observer wangwu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcreteObserver&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;王五&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; subject&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;notifyAllObservers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observer模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个抽象模型有两个方面，其中&lt;u&gt;一个方面依赖于另一个方面&lt;/u&gt;，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用。&lt;/li&gt;
&lt;li&gt;当对&lt;u&gt;一个对象的改变需要同时改变其他对象&lt;/u&gt;，而&lt;u&gt;不知道具体有多少对象有待改变&lt;/u&gt;时。&lt;/li&gt;
&lt;li&gt;当&lt;u&gt;一个对象必须通知其他对象&lt;/u&gt;，而它又不能假定其他对象是谁，即&lt;u&gt;不希望这些对象是紧耦合的&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;状态模式&#34;&gt;状态模式&lt;/h3&gt;
&lt;p&gt;状态（State）模式允许一个对象在其&lt;u&gt;内部状态改变时改变它的行为&lt;/u&gt;。对象看起来似乎修改了它的类。&lt;/p&gt;
&lt;p&gt;状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。&lt;/p&gt;
&lt;p&gt;状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。&lt;/p&gt;
&lt;p&gt;状态模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682315217521.png&#34;
	width=&#34;644&#34;
	height=&#34;245&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682315217521_hu4dba732357bdf8362aa7b4938d2e11ca_27336_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682315217521_hu4dba732357bdf8362aa7b4938d2e11ca_27336_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;630px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Context&lt;/code&gt;（上下文）：定义客户感兴趣的接口；维护一个&lt;code&gt;ConcreteState&lt;/code&gt;子类的实例，这个实例定义当前状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State&lt;/code&gt;（状态）：定义一个接口以封装与&lt;code&gt;Context&lt;/code&gt;的一个特定状态相关的行为。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteState&lt;/code&gt;（具体状态子类）：每个子类实现与&lt;code&gt;Context&lt;/code&gt;的一个状态相关的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;State&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Context&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 贩卖机
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; State state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StateA&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StateB&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 购买饮料
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; State &lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;State state&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;StateA&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 有货
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StateA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; State &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;购买成功&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(--&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StateB&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;购买失败&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;有货&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;StateB&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 有货
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StateB&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; State &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;购买失败，等待补货&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setCount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;补货成功，请重新购买&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StateA&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无货&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StatePattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Context context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;State模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个&lt;u&gt;对象的行为决定于它的状态&lt;/u&gt;，并且它&lt;u&gt;必须在运行时刻根据状态改变它的行为&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个&lt;u&gt;操作中含有庞大的多分支的条件语句&lt;/u&gt;，且&lt;u&gt;这些分支依赖于该对象的状态&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;这个状态常用一个或多个&lt;u&gt;枚举常量&lt;/u&gt;表示。&lt;/p&gt;
&lt;p&gt;State模式&lt;u&gt;将每一个条件分支放入一个独立的类中&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;策略模式&#34;&gt;策略模式&lt;/h3&gt;
&lt;p&gt;策略（Strategy）模式&lt;u&gt;定义一系列的算法&lt;/u&gt;，把它们一个个封装起来，并且&lt;u&gt;使它们可以相互替换&lt;/u&gt;。此模式使得算法可以独立于使用它们的客户而变化。&lt;/p&gt;
&lt;p&gt;即，策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684936229743.png&#34;
	width=&#34;712&#34;
	height=&#34;246&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684936229743_hu811afef84e63cbea0b023147cbf27d32_34806_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1684936229743_hu811afef84e63cbea0b023147cbf27d32_34806_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;策略模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;289&#34;
		data-flex-basis=&#34;694px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Strategy&lt;/code&gt;（策略）：定义所有支持的算法的公共接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt;使用这个接口来调用某&lt;code&gt;ConcreteStrategy&lt;/code&gt;定义的算法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteStrategy&lt;/code&gt;（具体策略）：以&lt;code&gt;Strategy&lt;/code&gt;接口实现某具体算法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt;（上下文）：用一个&lt;code&gt;ConcreteStrategy&lt;/code&gt;对象来配置；维护一个对&lt;code&gt;Strategy&lt;/code&gt;对象的引用；可定义一个接口来让&lt;code&gt;Strategy&lt;/code&gt;访问它的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Strategy&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Strategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoNumberOperation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;OperationContext&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OperationContext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Strategy strategy&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; strategy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;twoNumberOperation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setStrategy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Strategy strategy&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strategy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strategy&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;AddStrategy&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddStrategy&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Strategy &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoNumberOperation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与&lt;code&gt;AddStrategy&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StrategyPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        OperationContext context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OperationContext&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Strategy add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AddStrategy&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Strategy sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubStrategy&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Strategy multiply &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MultiplyStrategy&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         * 我觉得下面这部分代码应该是放在OperationContext.operation()中实现的&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         * 因为策略模式就是要让用户不知道使用的是哪种算法&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         * 但是对于这个案例来说不适合这样实现
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         */&lt;/span&gt;

        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setStrategy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;add&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2023&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 527&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;

        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setStrategy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sub&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2023&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 527&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;

        context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setStrategy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;multiply&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2023&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 527&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strategy模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;许多相关的类仅仅是行为有异&lt;/u&gt;。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;需要使用一个算法的不同变体&lt;/u&gt;。例如，定义一些反映不同空间的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时，可以使厨策略模式。&lt;/li&gt;
&lt;li&gt;算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。&lt;/li&gt;
&lt;li&gt;一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，将相关的条件分支移入它们各自的&lt;code&gt;Strategy&lt;/code&gt;类中，以代替这些条件语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;策略模式使得算法可以在不影响到客户端的情况下发生变化。&lt;/p&gt;
&lt;p&gt;策略模把行为和环境分开：环境类负责维持和查询行为类，各种算法在具体的策略类中提供。&lt;/p&gt;
&lt;p&gt;由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。&lt;/p&gt;
&lt;h3 id=&#34;模板方法模式&#34;&gt;模板方法模式&lt;/h3&gt;
&lt;p&gt;模板方法模式（Template Method）定义一个操作中的算法骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;p&gt;模板方法模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682316789017.png&#34;
	width=&#34;610&#34;
	height=&#34;352&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682316789017_hu736eb87456a6272db6aa15cc311737f4_38587_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682316789017_hu736eb87456a6272db6aa15cc311737f4_38587_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;模板方法模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AbstractClass&lt;/code&gt;（抽象类）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义抽象的原语操作，具体的子类将重定义它们以实现一个算法的各步骤；&lt;/li&gt;
&lt;li&gt;实现模板方法，定一个算法的骨架，该模板方法不仅调用原语操作，也调用定义在&lt;code&gt;AbstractClass&lt;/code&gt;或其他对象中的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteClass&lt;/code&gt;（具体类）：实现原语操作以完成算法中与特定子类相关的步骤。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Template Method模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;一次性实现&lt;/u&gt;一个&lt;u&gt;算法的不变的部分&lt;/u&gt;，并将&lt;u&gt;可变的行为留给子类来实现&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各&lt;u&gt;子类中公共的行为应被提取出来并集中到一个公共父类&lt;/u&gt;中，以&lt;u&gt;避免代码重复&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制子类扩展。&lt;/p&gt;
&lt;p&gt;模板方法旨在特定点调用“hook”操作（默认的行为，子类可以在必要时进行重定义扩展），这就只允许在这些点进行扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。&lt;/p&gt;
&lt;h3 id=&#34;访问者模式&#34;&gt;访问者模式&lt;/h3&gt;
&lt;p&gt;访问者（Visitor）模式&lt;u&gt;表示一个作用于某&lt;strong&gt;对象结构&lt;/strong&gt;中的&lt;strong&gt;各元素&lt;/strong&gt;的操作&lt;/u&gt;。它&lt;u&gt;允许在不改变各元素的类的前提下，定义作用于这些元素的新操作&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即，访问者模式的目的是&lt;u&gt;封装一些施加于某种数据结构元素之上的操作&lt;/u&gt;。一旦&lt;u&gt;这些操作需要修改&lt;/u&gt;的话，&lt;u&gt;接受这个操作的数据结构可以保持不变&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是结构和行为分离，结构被定义在具体对象中（具体对象实现操作的一小部分），行为被定义在访问者中（操作的大部分由访问者实现）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;访问者模式的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682316261510.png&#34;
	width=&#34;823&#34;
	height=&#34;653&#34;
	srcset=&#34;https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682316261510_hu39725207e23c3afa845c404a5c71934c_93016_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/uTools_1682316261510_hu39725207e23c3afa845c404a5c71934c_93016_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;访问者模式的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;302px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteVisitor&lt;/code&gt;（具体访问者）：实现每个有&lt;code&gt;Visitor&lt;/code&gt;声明的操作，每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcreteVisitor&lt;/code&gt;为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累积结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Element&lt;/code&gt;（元素）：定义以一个访问者为参数的&lt;code&gt;Accept&lt;/code&gt;操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcreteElement&lt;/code&gt;（具体元素）：实现以一个访问者为参数的&lt;code&gt;Accept&lt;/code&gt;操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ObjectStructure&lt;/code&gt;（对象结构）：能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；可以是一个组合或者一个集合。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Person&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 接受访问对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Visitor visitor&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; split &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getClass&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; split&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;last&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name=&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Visitor&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visitor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 访问学生
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Student student&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 访问老师
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Teacher teacher&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Student&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        setName&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Visitor visitor&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        visitor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Teacher&lt;/code&gt;与&lt;code&gt;Student&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Visitor1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visitor1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Visitor &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Student student&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visitor1 &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; student&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Teacher teacher&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visitor1 &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; teacher&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Visitor2&lt;/code&gt;与&lt;code&gt;Visitor1&lt;/code&gt;类似，代码略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PersonStructure&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonStructure&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; people &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonStructure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Student&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Student&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;李四&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Student&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;王五&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;

        people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Teacher&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;李老师&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Teacher&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;陈老师&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Teacher&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;刘老师&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 使用访问者访问集合中所有对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Visitor visitor&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Person person &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; people&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;visitor&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VisitorPattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        PersonStructure structure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonStructure&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        Visitor visitor1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Visitor1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        structure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;visitor1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;==============================&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        Visitor visitor2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Visitor2&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        structure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;visitor2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Visitor模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个&lt;u&gt;对象结构包含很多类对象&lt;/u&gt;，它们有不同的接口，而用户想对这些对象&lt;u&gt;实施一些依赖于其具体类的操作&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要对一个&lt;u&gt;对象结构中的对象进行很多不同的并且不相关的操作&lt;/u&gt;，而又想要避免这些操作“污染”这些对象的类。&lt;/p&gt;
&lt;p&gt;Visitor使得用户可以将相关的操作集中起来定义在一个类中。当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;定义对象结构的类很少改变，但经常需要在此结构上定义新的操作&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。&lt;/p&gt;
&lt;h2 id=&#34;设计模式总结&#34;&gt;设计模式总结&lt;/h2&gt;
&lt;p&gt;创建型设计模式（抽象了对象的实例化过程）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工厂方法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态生产对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义创建对象的接口，由子类实例化对象。让类的实例化延迟到其子类。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象工厂&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成系列对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供创建一系列对象的接口，无需指定具体的类。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;构造复杂对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将复杂对象的构建与表示分离。使得同样的构建可以创建不同的表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;克隆对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用原型实例指定创建对象的类型，通过复制原型来创建对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单例&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一个实例&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保证一个类仅有一个实例，并提供一个全局访问点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工厂方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;一个类不知道它所必须创建对象的类&lt;/li&gt;&lt;li&gt;由子类来指定创建的对象&lt;/li&gt;&lt;li&gt;将创建对象的职责委托给多个帮助子类中的某一个&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象工厂&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;系统独立于它产品的创建、&lt;u&gt;组合&lt;/u&gt;和表示&lt;/li&gt;&lt;li&gt;系统由多个产品系列中的一个来配置&lt;/li&gt;&lt;li&gt;强调一系列相关产品对象的设计，以便进行联合使用&lt;/li&gt;&lt;li&gt;提供一个产品类库，只显示它们的接口而不是实现&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;创建复杂对象的算法，独立于该对象的组成部分以及它们的装配方式&lt;/li&gt;&lt;li&gt;构造过程必须允许被构造的对象有不同的表示&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;系统独立于它产品创建、&lt;u&gt;构成&lt;/u&gt;和表示&lt;/li&gt;&lt;li&gt;要实例化的类是在运行时刻指定，如动态装载&lt;/li&gt;&lt;li&gt;避免创建一个与产品类层次平行的工厂类层次&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单例&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;类只能有一个实例，用户可从一个全局点访问&lt;/li&gt;&lt;li&gt;这个唯一实例是通过子类化可扩展的，客户无须更改代码就能使用扩展实例&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结构型模式（组合类或对象获得新的结构）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;适配器（类/对象）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接口转换&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将类的接口转换成兼容其他类的接口。&lt;br&gt;使原本接口不兼容的类可以一起工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桥接&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象与实现分离&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将类的抽象与实现分离，使它们可以独立变化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将对象组合成树型结构以表示“部分——整体”的层次结构。&lt;br&gt;使得用户对单个对象和组合对象的使用具有一致性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;装饰&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态附加职责&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;动态地给一个对象添加一些额外的职责，比用子类来扩展功能更灵活。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外观&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对外统一接口&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为子系统定义和提供一个统一的对外高层接口（外观）。&lt;br&gt;简化了该子系统的使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;享元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;共享大量细粒度对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供支持大量细粒度对象共享的有效方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代理&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介代理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为其他对象提供一种代理以控制对这个对象的访问。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;适配器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;使用接口不符合要求的类&lt;/li&gt;&lt;li&gt;创建可复用、可与其它不相关类或不可预见类协同工作&lt;/li&gt;&lt;li&gt;（仅适用于对象适配器）想使用子类，但又不想对它们子类化来匹配接口&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桥接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;在抽象和实现之间没有固定的绑定关系&lt;/li&gt;&lt;li&gt;抽象以及实现都可以通过生成子类的方法扩充&lt;/li&gt;&lt;li&gt;对抽象的实现部分的修改不会对用户产生影响&lt;/li&gt;&lt;li&gt;隐藏抽象的实现&lt;/li&gt;&lt;li&gt;在多个对象间共享实现，用户并不知道&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;表示对象的部分——整体层次结构&lt;/li&gt;&lt;li&gt;希望用户忽略组合对象与单个对象的不同，并统一地使用它们&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;装饰器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;不影响其他对象，而动态透明地添加职责&lt;/li&gt;&lt;li&gt;处理那些可以撤销的职责&lt;/li&gt;&lt;li&gt;不能采用子类进行扩充&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外观&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;为一个复杂子系统提供一个简单接口&lt;/li&gt;&lt;li&gt;客户程序与抽象类的实现部分之间存在着很大的依赖性&lt;/li&gt;&lt;li&gt;需要构建一个层次结构的子系统时&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;享元&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;使用了大量的对象，造成很大开销&lt;/li&gt;&lt;li&gt;对象的大多数状态都可变为外部状态&lt;/li&gt;&lt;li&gt;删除对象的外部状态后，可以用相对较少的共享对象取代很多组对象&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;在需要比较通用和复杂对象指针代替简单指针时&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;行为型模式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;关键字&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;责任链&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;职责传递&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将处理请求的多个对象连成一条链，请求在链中传递，直到有对象处理。&lt;br&gt;给多个对象处理请求的机会，减少请求的发送者与接收者之间的耦合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请求封装为对象&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将一个请求封装为一个对象，可用不同请求对客户进行参数化。&lt;br&gt;将请求排队或记录日志，支持撤销操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;解释器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;语句解释&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;给定一种语言，定义其文法和解释器，解释器根据文法解释语言中的句子。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;迭代器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;顺序访问数据集&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供一个顺序访问聚合对象中元素的方法，不需要暴露对象的内部表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介者&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不直接引用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用对象封装一系列的对象交互。&lt;br&gt;使各对象不需显式地相互调用，达到低耦合。&lt;br&gt;可以独立改变对象间的交互。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备忘录&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;保存状态&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不破坏封装的前提下，捕获对象的内部状态，并在该对象之外保存。&lt;br&gt;可以在以后恢复保存的状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;观察者&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;联动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义对象间的一种一对多依赖关系。&lt;br&gt;一个对象状态改变，所有依赖于它的对象都得到通知并被自动更新。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态封装成类&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;把对象的行为封装在不同的状态对象中。&lt;br&gt;允许一个对象在其内部状态改变时改变它的行为。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多方案切换&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义并封装一系列算法，使它们可以在不影响客户端的情况下相互替换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模板方法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;框架&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义一个操作中的算法骨架，让其子类来实现算法中的剩余逻辑。&lt;br&gt;可以不改变算法结构而重新定义其某些特定步骤。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;访问者&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据与操作分离&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;封装作用与某对象结构中元素的操作。&lt;br&gt;可以在不改变元素类的前提下，定义或修改作用于这些元素的操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;适用性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;责任链&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;有多个对象处理请求，运行时刻自动确定由谁处理&lt;/li&gt;&lt;li&gt;不明指定接收者的情况下向多个对象中的一个提交请求&lt;/li&gt;&lt;li&gt;可处理请求的对象集合被动态指定&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;抽象出待执行的动作以参数化某对象&lt;/li&gt;&lt;li&gt;不同的时刻指定、排列和执行请求&lt;/li&gt;&lt;li&gt;支持取消操作，支持修改日志&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;解释器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;文法简单&lt;/li&gt;&lt;li&gt;效率不是关键问题&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;迭代器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;访问聚合对象的内容而不暴露其内部表示&lt;/li&gt;&lt;li&gt;支持对聚合对象的多种遍历&lt;/li&gt;&lt;li&gt;为遍历不同的聚合结构提供一个统一的接口&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;一组对象以复杂的方式进行通信&lt;/li&gt;&lt;li&gt;一个对象引用其他很多对象并且直接与这些对象通信&lt;/li&gt;&lt;li&gt;定制一个分布在多个类中的行为，而又不想生成太多的子类&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备忘录&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;必须保存一个对象在某一个时刻的（部分）状态&lt;/li&gt;&lt;li&gt;如果用接口让其他对象直接得到这些状态，会暴露对象的实现细节并破坏对象的封装性&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;观察者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;当抽象模型有两个方面，其中一个方面依赖于另一个方面&lt;/li&gt;&lt;li&gt;当改变一个对象的同时需要改变其他对象，又不知道有多少对象待改变&lt;/li&gt;&lt;li&gt;当一个对象必须通知其他对象，又不能假定其他对象是谁（不能紧耦合）&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;对象的行为决定于它的状态，且在运行时刻根据状态改变行为&lt;/li&gt;&lt;li&gt;操作中含有庞大的多分支的条件语句&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;许多相关的类仅仅是行为有异&lt;/li&gt;&lt;li&gt;需要使用一个算法的不同变体&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模板方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;一次性实现算法中不变的部分，将可变的行为留给子类实现&lt;/li&gt;&lt;li&gt;各子类中公共行为被提取到公共父类中，避免代码重复&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;访问者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;ul&gt;&lt;li&gt;对象结构包含很多类对象，用户想对这些对象实施操作&lt;/li&gt;&lt;li&gt;对对象结构中的对象进行很多不同且不相关的操作&lt;/li&gt;&lt;li&gt;定义对象结构的类很少改变，但经常需要在此结构上定义新操作&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;个人理解的方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;简述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工厂方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;具体工厂（工厂接口的实现）创建具体对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;抽象工厂&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个具体工厂（抽象工厂的子类）创建多个产品，不同工厂用不同方式创建这一系列产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;生成器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;复杂对象通过切换构建&lt;code&gt;construct(Builder)&lt;/code&gt;来创建不同表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;多个原型之间通过克隆&lt;code&gt;Prototype.clone()&lt;/code&gt;来复制对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单例&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过私有化无参构造方法、静态&lt;code&gt;Singleton instance&lt;/code&gt;属性和静态&lt;code&gt;getInstance()&lt;/code&gt;方法使对象保持单例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;适配器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;适配器继承目标类，重写目标类的方法，方法将不兼容的接口包装成与目标类一致的接口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;桥接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将产品（抽象）与其某属性（实现）分开，通过桥接（组合）产品与其属性独立出来的类来制造不同产品。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用树形结构和一致的抽象类让部分和整体的操作一致。如文件树。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;装饰器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;装饰器继承被装饰类，通过构造器传入被装饰对象，然后在与被装饰类一致的方法中添加新操作。多个装饰器嵌套可组成一条装饰链。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外观&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;复杂子系统有很多操作，外观将其简化。跟适配器很像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;享元&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;让一个对象假装成许多个对象。就是很多个对象之间可能有一部分属性的值是一样的，定义一个对象然后共享这部分属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;代理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;代理就是给被代理对象加一些操作，跟适配器和外观不同的是代理的接口是与被代理对象一致的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;责任链&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;有多个接口一致的对象，将请求在这些对象间层层转发，请求可以被其中一个对象处理（JavaWeb里的过滤器）。和嵌套的装饰器很像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;命令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就是一个命令一个对象，调用这些对象的方式一致（对象接口一致）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;解释器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;解释语言的上下文。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;迭代器&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在集合对象的外部，通过迭代器访问集合中的元素，对应的迭代器可由集合对象给出&lt;code&gt;iterator()&lt;/code&gt;。跟Java里的迭代器一个样。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中介者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;有多个类似对象，这些对象通过中介互相发送消息（就好像微信聊天一样，微信就是中介）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备忘录&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;捕获并保存对象的内部状态，并且可以恢复到原型保存的状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;观察者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在目标对象状态更新时，观察者们可以收到通知&lt;code&gt;update()&lt;/code&gt;，然后更新自身状态，与目标对象的状态保持一致。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;状态&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个状态一个类，在状态中通过判断变换到其它状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;策略&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就是动态切换算法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模板方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;模板实现算法操作中不变的部分，其余的交给子类去实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;访问者&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就是在&lt;code&gt;Visitor.visit(访问对象)&lt;/code&gt;中定义对象的操作，然后在结构类中提供&lt;code&gt;accept(Visitor)&lt;/code&gt;来访问这些对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>知识产权篇</title>
        <link>https://blog.linner.asia/p/%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E7%AF%87/</link>
        <pubDate>Sat, 15 Apr 2023 12:29:35 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;著作权&#34;&gt;著作权&lt;/h1&gt;
&lt;p&gt;著作权（也称为版权）：是指作者对其创作的作品享有的人身权和财产权。&lt;/p&gt;
&lt;p&gt;人身权包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发表权&lt;/li&gt;
&lt;li&gt;署名权&lt;/li&gt;
&lt;li&gt;修改权&lt;/li&gt;
&lt;li&gt;保护作品完整权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;财产权包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作品的使用权&lt;/li&gt;
&lt;li&gt;获得报酬&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;著作权中，发表权有时限，时限是作者终身及其死亡后50年。署名权、修改权、保护作品完整权等不受时间限制，受到永久保护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;知识产权的特点&#34;&gt;知识产权的特点&lt;/h1&gt;
&lt;p&gt;知识产权的特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无形性&lt;/li&gt;
&lt;li&gt;双重性&lt;/li&gt;
&lt;li&gt;确认性&lt;/li&gt;
&lt;li&gt;独占性&lt;/li&gt;
&lt;li&gt;地域性&lt;/li&gt;
&lt;li&gt;时间性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;地域性&#34;&gt;地域性&lt;/h2&gt;
&lt;p&gt;各国主管机关依照本国法律授予的知识产权，&lt;u&gt;只能在不国领域内受法律保护&lt;/u&gt;。著作权虽然自动产生，但它受地域限制。&lt;/p&gt;
&lt;h2 id=&#34;时间性&#34;&gt;时间性&lt;/h2&gt;
&lt;p&gt;知识产权具有法定的保护期限。&lt;/p&gt;
&lt;p&gt;例如，我国发明专利的保护期为20年，自专利申请日起计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我国公民的作品发表权的保护期为作者终生及其死亡后50年。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我国商标权的保护期限自核准注册之日起10年内有效。&lt;/p&gt;
&lt;p&gt;但可以根据其所有人的需要无限地延长权利期限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在期限届满前6个月内申请续展注册，&lt;/li&gt;
&lt;li&gt;每次续展注册的有效期为10年，&lt;/li&gt;
&lt;li&gt;续展注册的次数不限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商业秘密受法律保护的期限是不确定的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;计算机软件著作权&#34;&gt;计算机软件著作权&lt;/h1&gt;
&lt;p&gt;计算机软件著作权有两个对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主体&lt;/strong&gt;：指享有著作权的人，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公民&lt;/li&gt;
&lt;li&gt;法人&lt;/li&gt;
&lt;li&gt;其他组织&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客体&lt;/strong&gt;：指著作权法保护的计算机软件著作权的范围（受保护的对象）。&lt;/p&gt;
&lt;p&gt;著作权法保护的计算机软件是指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算机程序&lt;/strong&gt;，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源程序，&lt;/li&gt;
&lt;li&gt;目标程序；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算机程序&lt;strong&gt;有关文档&lt;/strong&gt;，文档一般以以下形式出现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序设计说明书，&lt;/li&gt;
&lt;li&gt;流程图，&lt;/li&gt;
&lt;li&gt;用户手册。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机软件著作权受到以下两个法律的保护：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《中华人民共和国著作权法》，简称著作权法；&lt;/li&gt;
&lt;li&gt;《计算机软件保护条例》。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时限：计算机软件著作权的权利自软件开发完成之日起产生。&lt;/p&gt;
&lt;h2 id=&#34;保护条件&#34;&gt;保护条件&lt;/h2&gt;
&lt;p&gt;《计算机软件保护条例》规定，依法受到保护的计算机软件作品必须符合下列条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;独立创作。&lt;/p&gt;
&lt;p&gt;不可抄袭。使用他人软件作品的逻辑步骤的组合方式，对他人构成侵权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可被感知。&lt;/p&gt;
&lt;p&gt;受保护的软件必须固定在某种有形物体上，例如固定在存储器、磁盘和磁带等设备上，也可以是其他的有形物，如纸张等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑合理。&lt;/p&gt;
&lt;p&gt;软件作品必须具备合理的逻辑思想，并以正确的逻辑步骤表现出来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;权利&#34;&gt;权利&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机软件的著作人身权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发表权&lt;/li&gt;
&lt;li&gt;开发者身份权（也称为署名权）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算机软件的著作财产权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用权&lt;/li&gt;
&lt;li&gt;复制权&lt;/li&gt;
&lt;li&gt;修改权&lt;/li&gt;
&lt;li&gt;发行权&lt;/li&gt;
&lt;li&gt;翻译权&lt;/li&gt;
&lt;li&gt;注释权&lt;/li&gt;
&lt;li&gt;信息网络传播权&lt;/li&gt;
&lt;li&gt;出租权&lt;/li&gt;
&lt;li&gt;使用许可权&lt;/li&gt;
&lt;li&gt;获得报酬权&lt;/li&gt;
&lt;li&gt;转让权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件合法持有人的权利&lt;/p&gt;
&lt;p&gt;软件的合法复制品所有人享有下述权利：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据使用的需要把软件装入计算机等能存储信息的装置内。&lt;/li&gt;
&lt;li&gt;根据需要进行必要的复制。&lt;/li&gt;
&lt;li&gt;为了防止复制品损坏而制作备份复制品（不能给他人使用）。&lt;/li&gt;
&lt;li&gt;为了把该软件用于实际的计算机应用环境或者改进其功能性能而进行必要的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;保护期&#34;&gt;保护期&lt;/h2&gt;
&lt;p&gt;计算机软件著作权的权利自软件开发完成之日起产生，保护期为50年。保护期满，除开发者身份权以外，其他权利终止。&lt;/p&gt;
&lt;p&gt;一旦计算机软件著作权超出保护期，软件就进入公有领域。计算机软件著作权人的单位终止和计算机软件著作权人的公民死亡均无合法继承人时，除开发者身份权以外，该软件的其他权利进入公有领域。软件进入公有领域后成为社会公共财富，公众可无偿使用。&lt;/p&gt;
&lt;h2 id=&#34;职务作品&#34;&gt;职务作品&lt;/h2&gt;
&lt;p&gt;职务软件作品是指公民在单位任职期间为热行本单位工作任务所开发的计算机软件作品。&lt;/p&gt;
&lt;p&gt;根据《计算机软件保护条例》可以判断软件作品的归属。&lt;/p&gt;
&lt;p&gt;构成职务软件作品的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公民在单位任职期间所开发的软件如果是执行本职工作的结果，即针对本职工作中明确指定的开发目标所开发的，则该软件的著作权属于该单位。&lt;/li&gt;
&lt;li&gt;当公民作为某单位的雇员时，如其开发的软件属于执行本职工作的结果，该软件著作权应当归单位享有。&lt;/li&gt;
&lt;li&gt;如果该雇员主要使用了单位的设备，著作权不能属于该雇员个人享有。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果软件作品属于职务软件作品，那开发者只有署名权。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构成非职务软件（个人）作品的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所开发的软件作品不是执行其本职工作的结果。&lt;/p&gt;
&lt;p&gt;若雇员开发创作的软件不是执行本职工作的结果，则构成非职务计算机软件著作权的条件之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发的软件作品与开发者在单位中从事的工作内容无直接联系。&lt;/p&gt;
&lt;p&gt;雇员所开发的软件作品与其本职工作没有直接的关系，则构成非职务计算机软件著作权的第二个条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发的软件作品未使用单位的物质技术条件。&lt;/p&gt;
&lt;p&gt;开发软件作品所必须的设备、数据、资金和其他软件开发环境，不属于雇员所在的单位所有。没有使用受雇单位的任何物质技术条件构成非职务软件著作权的第三个条件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;委托开发&#34;&gt;委托开发&lt;/h2&gt;
&lt;p&gt;委托开发的软件作品属于著作权法规定的委托软件作品。委托开发软件作品著作权关系的建立，&lt;u&gt;一般由委托方与受委托方订立合同而成立&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;委托开发软件作品关系中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;委托方：主要责任是提供资金、设备等物质条件，并不直接参与开发软件作品的创作开发活动。&lt;/li&gt;
&lt;li&gt;受托方：主要责任是根据委托合同规定的目标开发出符合条件的软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接受他人委托开发的软件，其著作权的归属由委托者与受委托者签订书面合同约定：无书面合同或者合同未作明确约定的，其著作权由受托人享
有。&lt;/p&gt;
&lt;p&gt;委托开发的软件著作权的归属按以下标准确定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件著作权的归属应当根据委托开发软件的合同来确定。&lt;/li&gt;
&lt;li&gt;若&lt;u&gt;没有签订书面协议&lt;/u&gt;，或者&lt;u&gt;在协议中未对软件著作权归属作出明确的约定&lt;/u&gt;，则&lt;u&gt;软件著作权属于受委托者&lt;/u&gt;，即&lt;u&gt;属于实际完成软件的开发者&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;侵权行为&#34;&gt;侵权行为&lt;/h2&gt;
&lt;p&gt;计算机软件著作权侵权行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;未经软件著作权人的同意而发表或者登记其软件作品。&lt;/p&gt;
&lt;p&gt;侵犯著作权人的发表权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将他人开发的软件当作自己的作品发表或者登记。&lt;/p&gt;
&lt;p&gt;侵犯开发者身份权和署名权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未经合作者的同意将与他人合作开发的软件当作自己独立完成的作品发表或者登记。&lt;/p&gt;
&lt;p&gt;合作开发的软件，软件作品的发表权也应由全体开发者共同行使。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在他人开发的软件上署名或者更改他人开发的软件上的署名。&lt;/p&gt;
&lt;p&gt;侵犯了软件著作人的开发者身份权及署名权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未经软件著作权人或者其合法受让者的许可，修改、翻译其软件作品。&lt;/p&gt;
&lt;p&gt;侵犯了著作权人或其合法受让者的使用权中的修改权、翻译权。&lt;/p&gt;
&lt;p&gt;如果征得软件作品著作人的同意，修改和改善新增加的部分，创作者应享有著作权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未经软件著作权人或其合法受让者的许可，复制或部分复制其软件作品。&lt;/p&gt;
&lt;p&gt;侵犯了著作权人或其合法受让者的使用权中的复制权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未经软件著作权人及其合法受让者同意，向公众发行、出租其软件的复制品。&lt;/p&gt;
&lt;p&gt;此种行为侵犯了著作权人或其合法受让者的发行权与出租权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未经软件著作权人或其合法受让者同意，向任何第三方办理软件权利许可或转让事宜。&lt;/p&gt;
&lt;p&gt;侵犯了软件著作权人或其合法受让者的使用许可权和转让权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未经软件著作权人及其合法受让者同意，通过信息网络传播著作权人的软件。&lt;/p&gt;
&lt;p&gt;侵犯了软件著作权人或其合法受让者的信息网络传播权。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;商业秘密权&#34;&gt;商业秘密权&lt;/h1&gt;
&lt;p&gt;商业秘密的定义：“指不为公众所知悉的、能为权利人带来经济利益、具有实用性并经权利人采取保密措施的技术信息和经营信息”。&lt;/p&gt;
&lt;p&gt;商业秘密的基本内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经营秘密：未公开的经营信息，是指与生产经营销售活动有关的经营方法、
管理方法、产销策略、货源情报、客户名单、标底和标书内容等专有知识。&lt;/li&gt;
&lt;li&gt;技术秘密：未公开的技术信息，是指与产品生产和制造有关的技术诀窍、生产方案、工艺流程、设计图纸、化学配方和技术情报等专有知识。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商业秘密的构成条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须具有未公开性，即不为公众所知悉；&lt;/li&gt;
&lt;li&gt;必须具有实用性，即能为权利人带来经济效益；&lt;/li&gt;
&lt;li&gt;必须具有保密性，即采取了保密措施。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商业秘密的丧失：一项商业秘密受到法律保护的依据是必须具备上述构成商业秘密的3个条件，当缺少上述3个条件之一时就会造成商业秘密丧失保护。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;专利权&#34;&gt;专利权&lt;/h1&gt;
&lt;p&gt;专利申请的原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;专利申请人及其代理人&lt;/u&gt;在办理各种手续时都应当采用&lt;strong&gt;书面&lt;/strong&gt;形式。&lt;/li&gt;
&lt;li&gt;遵循&lt;u&gt;“一份申请一项发明”&lt;/u&gt;原则。&lt;/li&gt;
&lt;li&gt;多人就&lt;u&gt;同样&lt;/u&gt;的发明创造申请专利的，专利权&lt;u&gt;授给最先申请人&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;相同的发明，多人&lt;u&gt;同时&lt;/u&gt;申请，由所有申请人&lt;u&gt;协商确定&lt;/u&gt;专利权归属。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;专利的时限（均自申情日起计算）：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;发明专利权&lt;/td&gt;
        &lt;td&gt;20年&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;实用新型专利权&lt;/td&gt;
        &lt;td&gt;10年&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;外观设计专利权&lt;/td&gt;
        &lt;td&gt;15年&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;商标权&#34;&gt;商标权&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;商标权保护期限自核准注册之日起&lt;u&gt;10年内有效&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;商标权保护期限可以&lt;u&gt;根据其所有人的需要无限地延长权利期限&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;在期限届满&lt;u&gt;前6个月内&lt;/u&gt;申请续展注册，每次续展注册的&lt;u&gt;有效期为10年&lt;/u&gt;，&lt;u&gt;续展注册的次数不限&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如果商标权人逾期不办理续展注册，其商标权也将终止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商标权注册先申请注册先得，同一天申请先使用商标先得，都没使用过则协商。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>操作系统篇</title>
        <link>https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/</link>
        <pubDate>Wed, 12 Apr 2023 16:28:00 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;计算机系统由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常把未配置软件的计算机称为裸机。&lt;/p&gt;
&lt;p&gt;操作系统（Operating System）目的是为了填补人与机器之间的鸿沟，即建立用户与计算机之间的接口，而为裸机配置的一种系统软件。&lt;/p&gt;
&lt;p&gt;操作系统也包括了系统软件。&lt;/p&gt;
&lt;p&gt;操作系统在计算机系统中的地位：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682583172164.png&#34;
	width=&#34;309&#34;
	height=&#34;145&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682583172164_hu95f8d82f9265c9b90d825ec44597f47b_15128_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682583172164_hu95f8d82f9265c9b90d825ec44597f47b_15128_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;操作系统在计算机系统中的地位&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;511px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;操作系统是用户与计算机之间的接口，它在计算机系统中占据重要而特殊的地位，所有其他软件，如编辑程序、汇编程序、编译程序、数据库管理系统等系统软件，以及大量的应用软件都是建立在操作系统基础上的，并得到它的支持和取得它的服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;进程管理&#34;&gt;进程管理&lt;/h1&gt;
&lt;p&gt;进程管理也称&lt;strong&gt;处理机管理&lt;/strong&gt;。在多道程序批处理系统和分时系统中有多个并发执行的程序，为了描述系统中程序执行时动态变化的过程引入了进程。进程是&lt;u&gt;资源分配和独立运行的基本单位&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;进程有两个基本属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可拥有资源的独立单位；&lt;/li&gt;
&lt;li&gt;可独立调度和分配的基本单位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序执行顺序&#34;&gt;程序执行顺序&lt;/h2&gt;
&lt;h3 id=&#34;程序顺序执行&#34;&gt;程序顺序执行&lt;/h3&gt;
&lt;p&gt;前驱图是一种有向无循环图，由结点和有向边组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结点：代表各程序段的操作；&lt;/li&gt;
&lt;li&gt;有向边：表示两个程序段（结点）操作之间存在的前驱关系（$\rightarrow$）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前驱关系：&lt;/p&gt;
&lt;p&gt;程序段$P_i$和$P_j$的前趋关系表示成$P_i \rightarrow P_j$，其中，$P_i$是$P_j$的前驱，$P_j$是$P_i$的后继，其含义是：&lt;/p&gt;
&lt;p&gt;$P_i$执行结束后$P_j$才能执行。例如，输入、计算和输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682753834678.png&#34;
	width=&#34;358&#34;
	height=&#34;107&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682753834678_hu6d3bc9d03d4b0ff312250fbf00a60477_10333_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682753834678_hu6d3bc9d03d4b0ff312250fbf00a60477_10333_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3个结点的前驱图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;334&#34;
		data-flex-basis=&#34;802px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;程序顺序执行时的主要特征包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序性&lt;/li&gt;
&lt;li&gt;封闭性&lt;/li&gt;
&lt;li&gt;可再现性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序并发执行&#34;&gt;程序并发执行&lt;/h3&gt;
&lt;p&gt;若在计算机系统中采用多道程序设计技术，则主存中的多道程序可处于并发执行状态。&lt;/p&gt;
&lt;p&gt;虽然每个作业有前趋关系的各程序段不能在CPU和输入/输出各部件（同一个部件）中并行执行，但是同一个作业内没有前趋关系的程序段或不同作业的程序段可以分别在CPU和各输入/输出部件上（不同部件中）并行执行。&lt;/p&gt;
&lt;p&gt;例如，某系统中有一个CPU、一台输入设备和一台输出设备，每个作业具有3个程序段输入I&lt;sub&gt;i&lt;/sub&gt;、计算C&lt;sub&gt;i&lt;/sub&gt;和输出P&lt;sub&gt;i&lt;/sub&gt;（i = 1，2，3）。其前驱图如（其中，在同一垂直方向上的作业并行执行）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682754585700.png&#34;
	width=&#34;480&#34;
	height=&#34;203&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682754585700_hu4b10fcccafa543644054288a5464f60e_23561_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682754585700_hu4b10fcccafa543644054288a5464f60e_23561_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;程序并发执行的前驱图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;程序并发执行时的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;失去了程序的封闭性；&lt;/li&gt;
&lt;li&gt;程序和机器的执行程序的活动不再一一对应；&lt;/li&gt;
&lt;li&gt;并发程序间的相互制约性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序并发执行带来的问题：并发程序间共享了变量，破坏了程序的封闭性和可再现性。&lt;/p&gt;
&lt;p&gt;并发程序的问题可以通过研究进程间的同步和互斥解决。&lt;/p&gt;
&lt;h2 id=&#34;进程的三态模型&#34;&gt;进程的三态模型&lt;/h2&gt;
&lt;p&gt;在多道程序系统中，进程在处理器上交替运行，状态也不断地发生变化，因此进程一般有3种基本状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行&lt;/strong&gt;：当一个进程在处理机上运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;就绪&lt;/strong&gt;：一个进程获得了除处理机外的一切所需资源，一旦得到处理机即可运行（还未得到）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阻塞&lt;/strong&gt;（等待或睡眠）：一个进程正在等待某一事件发生而暂时停止运行，这时即使把处理机分配给进程也无法运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682757000186.png&#34;
	width=&#34;314&#34;
	height=&#34;275&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682757000186_hu9e5c56c8e04acd724f5897dbc39951bf_39384_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682757000186_hu9e5c56c8e04acd724f5897dbc39951bf_39384_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;进程的三态模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;274px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程间的通信&#34;&gt;进程间的通信&lt;/h2&gt;
&lt;p&gt;在多道程序环境的系统中存在多个可以并发执行的进程，故进程间必然存在资源共享和相互合作的问题。进程通信是指各个进程交换信息的过程。&lt;/p&gt;
&lt;h3 id=&#34;同步和互斥&#34;&gt;同步和互斥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同步&lt;/strong&gt;：合作进程间的直接制约问题。&lt;/p&gt;
&lt;p&gt;进程间的同步：是指在系统中一些需要相互合作，协同工作的进程，这样的相互联系称为进程的同步。&lt;/p&gt;
&lt;p&gt;例如，进程A向缓冲区送数据，进程B从缓冲区取数据加工，当进程B要取数据加工时，必须是进程A完成了向缓冲区送数据的操作，否则进程B必须停下来等待进程A的操作结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;互斥&lt;/strong&gt;：申请临界资源进程间的间接制约问题。&lt;/p&gt;
&lt;p&gt;进程间的互斥：是指系统中多个进程因争用临界资源而互斥执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;临界资源（Critical Resource，CR）：在多道程序系统环境中，那些一次只能供一个进程使用的资源。如打印机、共享变量和表格等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;临界区管理的原则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;临界区（Critical Section，CS）：是进程中对临界资源实施操作的那段程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对互斥临界区管理的4条原则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有空即进&lt;/strong&gt;：当&lt;u&gt;无进程处于临界区&lt;/u&gt;时，&lt;u&gt;允许&lt;/u&gt;进程&lt;u&gt;进入&lt;/u&gt;临界区，并且&lt;u&gt;只能在临界区运行有限
的时间&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无空则等&lt;/strong&gt;：当&lt;u&gt;有一个进程在临界区&lt;/u&gt;时，&lt;u&gt;其他欲进入临界区的进程必须等待&lt;/u&gt;，以保证进程互斥地访问临界资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有限等待&lt;/strong&gt;：&lt;u&gt;对于要求访问临界资源的进程，应保证进程能在有限的时间进入临界区，以免陷入“&lt;strong&gt;饥饿&lt;/strong&gt;”状态&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;让权等待&lt;/strong&gt;：&lt;u&gt;当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入&lt;strong&gt;忙等&lt;/strong&gt;状态。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信号量机制&#34;&gt;信号量机制&lt;/h3&gt;
&lt;p&gt;信号量机制是一种有效的进程同步与互斥工具。&lt;/p&gt;
&lt;p&gt;信号量机制主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型信号量&lt;/li&gt;
&lt;li&gt;记录型信号量&lt;/li&gt;
&lt;li&gt;信号量集机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整型信号量：&lt;/p&gt;
&lt;p&gt;信号量是一个整型变量，根据控制对象的不同被赋予不同的值。信号量分为如下两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公用信号量：实现进程间的互斥，初值为&lt;code&gt;1&lt;/code&gt;或资源的数目。&lt;/li&gt;
&lt;li&gt;私用信号量：实现进程间的同步，初值为&lt;code&gt;0&lt;/code&gt;或某个正整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号量$S$的物理意义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S \ge 0$：表示某资源的可用数，此时&lt;strong&gt;有可用资源&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;$S &amp;lt; 0$：则其绝对值表示阻塞队列中等待该资源的进程数，此时无可用资源，并且有进程被阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pv操作&#34;&gt;PV操作&lt;/h3&gt;
&lt;p&gt;PV操作：实现进程同步与互斥的常用方法。&lt;/p&gt;
&lt;p&gt;P操作和V操作是低级通信原语，在执行期间不可分割。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;P操作&lt;/strong&gt;（减）：表示&lt;strong&gt;申请&lt;/strong&gt;一个资源；&lt;/p&gt;
&lt;p&gt;定义：$S := S-1$（$S$表示信号量）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S \ge 0$：执行P操作的进程继续执行；&lt;/li&gt;
&lt;li&gt;$S &amp;lt; 0$：无可用资源，置该进程为&lt;strong&gt;阻塞&lt;/strong&gt;状态，并将其插入阻塞队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;V操作&lt;/strong&gt;（加）：表示&lt;strong&gt;释放&lt;/strong&gt;一个资源。&lt;/p&gt;
&lt;p&gt;定义：$S := S+1$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S &amp;gt; 0$：执行V操作的进程继续执行；&lt;/li&gt;
&lt;li&gt;$S \le 0$：表示释放前有程序被阻塞，从阻塞状态唤醒一个进程，并将其插入就绪队列，然后执行V操作的进程继续。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用PV操作实现进程的互斥：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;令信号量&lt;code&gt;mutex&lt;/code&gt;的初始值为1；&lt;/li&gt;
&lt;li&gt;进入临界区：执行P操作；&lt;/li&gt;
&lt;li&gt;推出临界区：执行V操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;利用PV操作实现进程的同步：&lt;/p&gt;
&lt;p&gt;实现进程的同步可用一个信号量与消息联系起来。&lt;/p&gt;
&lt;p&gt;信号量的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为&lt;code&gt;0&lt;/code&gt;：表示希望的消息未产生；&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;0&lt;/code&gt;：表示希望的消息已经存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假定信号量S表示某条消息，进程可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用P操作：测试消息是否到达；&lt;/li&gt;
&lt;li&gt;调用V操作：通知消息已经准备好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者进程$P_1$：不间断地生产产品送入缓冲区；&lt;/li&gt;
&lt;li&gt;消费者进程$P_2$：不断地从缓冲区中取产品消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为实现$P_1$与$P_2$间同步问题，分别设置信号量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S_1$：初值为1，表示缓冲区空，可以将产品送入缓冲区；&lt;/li&gt;
&lt;li&gt;$S_2$：初值为0，表示缓冲区有产品。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步过程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/1682764456232.png&#34;
	width=&#34;979&#34;
	height=&#34;310&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/1682764456232_hu6e19bc324f149858223ccc26524ab5b3_49832_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/1682764456232_hu6e19bc324f149858223ccc26524ab5b3_49832_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PV实现进程同步例子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;315&#34;
		data-flex-basis=&#34;757px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;若缓冲区可存放$n$件产品，生产者不断生产，消费者不断消费。可以设置3个信号量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S$：互斥信号量，初值为1；&lt;/li&gt;
&lt;li&gt;$S_1$：表示是否可以将产品放入缓冲区，初值为$n$；&lt;/li&gt;
&lt;li&gt;$S_2$：表示缓冲区是否存有产品，初值为0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其同步过程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682764884289.png&#34;
	width=&#34;550&#34;
	height=&#34;368&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682764884289_hu368c9d1d9bbd6fc224fbfea4ef2251fc_27674_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682764884289_hu368c9d1d9bbd6fc224fbfea4ef2251fc_27674_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;n缓冲区的同步&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;死锁现象&#34;&gt;死锁现象&lt;/h3&gt;
&lt;p&gt;死锁是指两个以上的进程互相都要请求对方己经占有的资源，导致这些进程都无法继续运行下去的现象。&lt;/p&gt;
&lt;p&gt;产生死锁的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程间互相&lt;u&gt;竞争资源&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;多个进程所共享的资源不足以满足它们的需求时，将引起它们对资源的竞争，从而导致死锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;进程推进顺序非法&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;进程在运行的过程中请求和释放资源的顺序不当，从而导致死锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生死锁的4个必要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件&lt;/li&gt;
&lt;li&gt;请求保持条件&lt;/li&gt;
&lt;li&gt;不可剥夺条件&lt;/li&gt;
&lt;li&gt;环路条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发生死锁时，在进程资源有向图中必构成环路（每个进程占有了下一个进程申请的一个或多个资源），如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682766203339.png&#34;
	width=&#34;323&#34;
	height=&#34;242&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682766203339_hud4a0dc9a9e923fd6220edd8b9fb65856_13413_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682766203339_hud4a0dc9a9e923fd6220edd8b9fb65856_13413_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2个进程死锁的资源有向图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;资源：用&lt;strong&gt;方框&lt;/strong&gt;表示资源的集合，&lt;strong&gt;方框中的圆圈&lt;/strong&gt;表示资源；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程：用&lt;strong&gt;圆圈&lt;/strong&gt;表示；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有向边：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求资源：箭头由进程指向资源&lt;/p&gt;
&lt;p&gt;$$
\bigcirc \rightarrow \Box
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分配资源：箭头由资源指向进程&lt;/p&gt;
&lt;p&gt;$$
\bigcirc \leftarrow \Box
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;造成死锁的情况有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程推进顺序不当：&lt;/p&gt;
&lt;p&gt;设有两个互斥资源$A$和$B$被两个并发执行的进程$P_1$和$P_2$共享。假如它们按照如下次序请求，则系统会发生死锁：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$P_1.Request(A)$：请求成功，资源$A$被$P_1$占用；&lt;/li&gt;
&lt;li&gt;$P_2.Request(B)$：请求成功，资源$B$被$P_2$占用；&lt;/li&gt;
&lt;li&gt;$P_1.Request(B)$：请求失败，资源$B$已被$P_2$占用；&lt;/li&gt;
&lt;li&gt;$P_2.Request(A)$：请求失败，资源$A$已被$P_1$占用。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;上述请求顺序中，1和2的顺序可以交换，3和4的顺序可以交换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同类资源分配不当：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$m$：资源数，&lt;/li&gt;
&lt;li&gt;$n$：进程数，&lt;/li&gt;
&lt;li&gt;$k$：每个进程都要求的资源数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若满足$m \ge n \times (k-1) + 1$，则不会发生死锁。&lt;/p&gt;
&lt;p&gt;若每个进程要求的资源数不同，为$k_i$（$i = 1,2,\cdots,n$），那么此时可能会引起死锁的原因是：&lt;/p&gt;
&lt;p&gt;$$
m &amp;lt; \sum_{i=1}^{n}{k_i}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PV操作使用不当：&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682767634275.png&#34;
	width=&#34;577&#34;
	height=&#34;290&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682767634275_hue3c28c66fad26634474279e0ad2c7ba2_24056_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682767634275_hue3c28c66fad26634474279e0ad2c7ba2_24056_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PV死锁示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;477px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当信号量$S_1=S_2=0$时将发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P_2.P(S_2)$：执行前$S_2 = 0$，执行后$S_2 = -1$，$P_2$等待；&lt;/li&gt;
&lt;li&gt;$P_1.P(S_1)$：执行前$S_1 = 0$，执行后$S_1 = -1$，$P_1$等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时$P_1$和$P_2$都无法继续运行，造成死锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁的处理&#34;&gt;死锁的处理&lt;/h3&gt;
&lt;p&gt;死锁的处理策略主要有4种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鸵鸟策略（不理睬策略）&lt;/li&gt;
&lt;li&gt;预防策略&lt;/li&gt;
&lt;li&gt;避免策略&lt;/li&gt;
&lt;li&gt;检测与解除死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;死锁预防：&lt;/p&gt;
&lt;p&gt;死锁预防是&lt;u&gt;采用某种策略限制并发进程对资源的请求，破坏死锁产生的4个必要条件之一，严格防止死锁的产生&lt;/u&gt;，使系统在任何时刻都不满足死锁的必要条件。预防死锁的两种策略如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预先静态分配法：破坏了“不可剥夺条件”，&lt;u&gt;预先分配所需资源，保证不等待资源&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;该方法的问题是降低了对资源的利用率，降低进程的并发程度；有时可能无法预先知道所需资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源有序分配法：破坏了“环路条件”，&lt;u&gt;把资源分类按顺序排列，保证不形成环路&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;该方法存在的问题是限制进程对资源的请求：由于资源的排序占用系统开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;死锁避免：&lt;/p&gt;
&lt;p&gt;比起死锁预防，&lt;u&gt;死锁避免则不那么严格地限制产生死锁的必要条件&lt;/u&gt;。最著名的死锁避免算法是银行家算法，死锁避免算法需要很大的系统开销。&lt;/p&gt;
&lt;h3 id=&#34;银行家算法&#34;&gt;银行家算法&lt;/h3&gt;
&lt;p&gt;银行家算法对于进程发出的、每一个系统可以满足的&lt;u&gt;资源请求命令加以检测&lt;/u&gt;，若分配资源后系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入不安全状态，则不予分配；&lt;/li&gt;
&lt;li&gt;仍处于安全状态，则实施分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与死锁预防策略相比，银行家算法提高了资源的利用率，但对于分配资源后系统是否安全的检测，增加了系统开销。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全状态：指系统能按某种顺序如$&amp;lt;P_1, P_2, \cdots, P_n&amp;gt;$来为每个进程分配其所需资源，直到最大需求，使每个进程都可顺序完成。&lt;/p&gt;
&lt;p&gt;通常称$&amp;lt;P_1, P_2, \cdots, P_n&amp;gt;$序列为安全序列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不安全状态：若系统不存在这样一个安全序列，则称系统处于不安全状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设系统有$n$个进程（$P_i, i = 1, 2, \cdots, n$），使用银行家算法求系统安全序列的一般步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据目前可用资源数和仍需资源数求得序列当前的第$k$（$1 \le k \le n$）个进程应为$P_i$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$P_i$的仍需资源数$\le$系统可用资源数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据$P_i$的已分配资源数 + 分配前系统可用资源数，求出系统执行完$P_i$后的可用资源数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统执行完$P_4$后，会释放$P_4$占用的资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复执行步骤1到步骤2，直到能判断系统处于安全状态还是不安全状态。若为安全状态，则可求出安全序列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设系统种有三类互斥资源$R_1$、$R_2$和$R_3$，可用资源数分别为8、7和4。在$T_0$时刻系统种有$P_1$、$P_2$、$P_3$、$P_4$和$P_5$这5个进程，这些进程对资源的最大需求量和已分配资源数如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682941260775.png&#34;
	width=&#34;490&#34;
	height=&#34;231&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682941260775_huc824e9a1db295e8386ae441612171dce_27041_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1682941260775_huc824e9a1db295e8386ae441612171dce_27041_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;进程对资源的最大需求量和已分配资源数&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;509px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;由上图可得系统的仍需资源数（最大需求量 - 已分配资源数）为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可得系统目前可用资源数（可用资源数 - 所有进程的最大需求量）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;求出安全序列的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据目前可用资源数和仍需资源数可得序列中第1个进程应为$P_4$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为$P_4$仅仅只需要再分配一个$R_1$，而系统目前恰好剩余1个$R_1$和$R_2$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;系统执行完$P_4$后，会释放$P_4$占用的资源，那么此时系统可用资源数为（已分配资源数 + 分配前可用资源数）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与上一步类似，可求得序列中第2个进程为$P_2$或$P_5$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若为$P_2$，执行完$P_2$后，系统可用资源数为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若为$P_5$，执行完$P_5$后，系统可用资源数为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据上一步，有两个可能的安全序列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若序列的上一个进程为$P_2$，序列的第3个进程为$P_5$。&lt;/li&gt;
&lt;li&gt;若序列的上一个进程为$P_5$，序列的第3个进程为$P_2$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时，无论当前序列为$&amp;lt;P_4, P_2, P_5&amp;gt;$还是$&amp;lt;P_4, P_5, P_2&amp;gt;$，它们执行完序列的第3个进程后，系统可用资源数都为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据上一步的系统可用资源数，上一步所得的两个序列的第4个进程都为$P_1$。&lt;/p&gt;
&lt;p&gt;此时，它们执行完$P_1$后，系统可用资源数为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个序列的第4个进程都为$P_3$。&lt;/p&gt;
&lt;p&gt;它们执行完$P_3$后，系统可用资源数为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$R_3$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此时系统可用资源数与检测前的可用资源数相等，即所有资源都被释放，没有被任何进程占用。&lt;/p&gt;
&lt;p&gt;那么该系统处于安全状态，且一共有两个安全序列，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$&amp;lt;P_4, P_2, P_5, P_4, P_3&amp;gt;$；&lt;/li&gt;
&lt;li&gt;$&amp;lt;P_4, P_5, P_2, P_4, P_3&amp;gt;$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;线程&#34;&gt;线程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;传统进程有两个基本属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可拥有资源的独立单位；&lt;/li&gt;
&lt;li&gt;可独立调度和分配的基本单位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;引入线程的原因是，进程的系统必须付出较大的时空开销。引入线程后，将传统进程的两个基本属性分开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程：作为调度和分配的基本单位；&lt;/li&gt;
&lt;li&gt;进程：作为独立分配资源的单位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程是进程中的一个实体，是被系统独立分配和调度的基本单位。&lt;/p&gt;
&lt;p&gt;线程的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程&lt;u&gt;基本上不拥有资源&lt;/u&gt;，只拥有一点运行中必不可少的资源（如程序计数器、一组寄存器和栈），它可与同属一个进程的其他线程共享进程所拥有的全部资源。&lt;/li&gt;
&lt;li&gt;线程&lt;u&gt;也具有就绪、运行和阻塞3种基本状态&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;线程可创建另一个线程。&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;同一个进程中的多个线程可并发执行。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程因其具有许多传统进程所具有的特性，故称为&amp;quot;轻型进程（Light-Weight Process）&amp;quot;；而传统进程称为&amp;quot;重型进程（Heavy-Weight Process）&amp;quot;。&lt;/p&gt;
&lt;p&gt;线程分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户级线程（User-Level Threads）：不依赖于内核，该类线程的创建、撤销和切换都不利用系统调用来实现；&lt;/li&gt;
&lt;li&gt;内核支持线程（Kernel-Supported Threads）：依赖于内核，即无论是在用户进程中的线程，还是在系统中的线程，它们的创建、撤销和切换都利用系统调用来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;某些系统同时实现了两种类型的线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与线程不同的是，不论是系统进程还是用户进程，在进行切换时，都要依赖于内核中的进程调度。因此，不论是什么进程都是与内核有关的，是在内核支持下进行切换的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;存储管理&#34;&gt;存储管理&lt;/h1&gt;
&lt;h2 id=&#34;程序局部性原理&#34;&gt;程序局部性原理&lt;/h2&gt;
&lt;p&gt;程序在执行时将呈现出局部性规律，即在一段时间内，程序的执行仅局限于某个部分。相应地，它所访问的存储空间也局限于某个区域内。&lt;/p&gt;
&lt;p&gt;程序的局限性表现在以下两个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间局限性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果程序中的某条&lt;u&gt;指令一旦执行&lt;/u&gt;，则不久的将来该指令&lt;u&gt;可能再次被执行&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;如果某个&lt;u&gt;存储单元被访问&lt;/u&gt;，则不久以后该存储单元&lt;u&gt;可能再次被访问&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生时间局限性的典型原因是&lt;u&gt;在程序中存在着大量的循环操作&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空间局限性&lt;/strong&gt;：指一旦&lt;u&gt;程序访问了某个存储单元&lt;/u&gt;，则在不久的将来，&lt;u&gt;其附近的存储单元也最有可能被访问&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;即程序在一段时间内所访问的地址可能集中在一定的范围内，其典型原因为&lt;u&gt;程序是顺序执行的&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分页存储管理&#34;&gt;分页存储管理&lt;/h2&gt;
&lt;p&gt;分页原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;页&lt;/strong&gt;：将一个进程的地址空间划分成若干个大小相等的区域，称为页。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块&lt;/strong&gt;（&lt;strong&gt;页框&lt;/strong&gt;）：将主存空间划分成与页相同大小的若干个物理块，称为块或页框。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在为进程分配主存时，将进程中若干页分别装入多个不相邻接的块中。&lt;/p&gt;
&lt;p&gt;地址结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683184749140.png&#34;
	width=&#34;496&#34;
	height=&#34;55&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683184749140_huc3516dc5b3afdb66549a0018a9af7acc_4005_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683184749140_huc3516dc5b3afdb66549a0018a9af7acc_4005_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;分页地址结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;901&#34;
		data-flex-basis=&#34;2164px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中，页内地址是同一页（页号）中的偏移量。&lt;/p&gt;
&lt;p&gt;分页的过程是由操作系统完成的，对用户是透明的，所以用户不必关心分页的过程，其优点是能有效地提高主存利用率，其缺点是不易实现共享。&lt;/p&gt;
&lt;h2 id=&#34;分段存储管理&#34;&gt;分段存储管理&lt;/h2&gt;
&lt;p&gt;在分段存储管理方式中，作业的地址空间被划分为若干个段。每个段是一组完整的逻辑信息，例如有主程序段、子程序段、数据段及堆栈段等。每个段都有自己的名字，都是从0开始编址的一段连续的地址空间，各段的长度是不等的。&lt;/p&gt;
&lt;p&gt;分段系统的地址结构如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683184796335.png&#34;
	width=&#34;504&#34;
	height=&#34;61&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683184796335_hu25a29dab249da34b410fe572ea519567_5391_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683184796335_hu25a29dab249da34b410fe572ea519567_5391_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;分段的地址结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;826&#34;
		data-flex-basis=&#34;1982px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;段是信息的逻辑单位，其优点是易于实现段的共享，即允许若干个进程共享一个或多个段，而且对段的保护也十分简单。&lt;/p&gt;
&lt;h2 id=&#34;段页式存储管理&#34;&gt;段页式存储管理&lt;/h2&gt;
&lt;p&gt;结合分页和分段存储管理方式，形成一种新的存储管理方式，即段页式存储管理。段页式系统有两种系统的优点。&lt;/p&gt;
&lt;p&gt;段页式系统的基本原理是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将整个主存划分成大小相等的存储块（页框）。&lt;/li&gt;
&lt;li&gt;将用户程序按程序的逻辑关系分为若干个段，并为每个段赋予一个段名。&lt;/li&gt;
&lt;li&gt;将每个段划分成若干页，以页框为单位离散分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;段页式地址空间的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683185435872.png&#34;
	width=&#34;507&#34;
	height=&#34;59&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683185435872_hudceecbbea023b28d9d0b4202d398bc34_6863_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683185435872_hudceecbbea023b28d9d0b4202d398bc34_6863_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;段页式的地址结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;859&#34;
		data-flex-basis=&#34;2062px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;设备管理&#34;&gt;设备管理&lt;/h1&gt;
&lt;h2 id=&#34;缓冲技术&#34;&gt;缓冲技术&lt;/h2&gt;
&lt;p&gt;缓冲技术可提高外设利用率，尽可能使外设处于忙状态。缓冲技术可以采用两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件缓冲：利用专门的硬件寄存器作为缓冲；&lt;/li&gt;
&lt;li&gt;软件缓冲：通过操作系统来管理的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单缓冲&#34;&gt;单缓冲&lt;/h3&gt;
&lt;p&gt;单缓冲工作过程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683187166221.png&#34;
	width=&#34;601&#34;
	height=&#34;138&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683187166221_hu2e2de07b65dca5af28bd1f31f21a9e74_17060_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683187166221_hu2e2de07b65dca5af28bd1f31f21a9e74_17060_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;单缓冲工作过程图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;435&#34;
		data-flex-basis=&#34;1045px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当第1块数据送入用户工作区后（进行数据处理），缓冲区是空闲的，可以传送第2块数据（输入）。即第1块数据的处理$C_1$与第2块数据的输入$T_2$是可以并行的，以此类推：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683189558038.png&#34;
	width=&#34;1251&#34;
	height=&#34;272&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683189558038_huf41226c97da8111160feca89ef09c095_5839_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683189558038_huf41226c97da8111160feca89ef09c095_5839_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;单缓冲并行工作示意图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;459&#34;
		data-flex-basis=&#34;1103px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;若$T$为输入的时间，$M$为传输的时间，$C$为处理的时间系统对每一块数据的处理时间为：$Max(C, T) + M$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$T &amp;gt; C$：处理时间为$M + T$；&lt;/li&gt;
&lt;li&gt;$T &amp;lt; C$：处理时间为$M + C$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$n$个作业的单缓冲所花费的时间为：&lt;/p&gt;
&lt;p&gt;$$
(Max(C, T) + M) \times n + Min(C, T)
$$&lt;/p&gt;
&lt;h3 id=&#34;双缓冲&#34;&gt;双缓冲&lt;/h3&gt;
&lt;p&gt;双缓冲进一步加快了I/O的速度，提高了设备的利用率。其工作基本过程是在设备输入时，先将数据输入到缓冲区1，装满后便转向缓冲区2。&lt;/p&gt;
&lt;p&gt;双缓冲工作过程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683187304566.png&#34;
	width=&#34;586&#34;
	height=&#34;141&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683187304566_hu42e162687d638192c0899ff8af8eca78_27945_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683187304566_hu42e162687d638192c0899ff8af8eca78_27945_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;双缓冲工作过程图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;415&#34;
		data-flex-basis=&#34;997px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;双缓冲的工作特点是，可以实现对缓冲中数据的输入$T$和提取$M$，与CPU的计算$C$，三者并行工作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683189296831.png&#34;
	width=&#34;1147&#34;
	height=&#34;257&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683189296831_hu582c92cd9e0fed45f58d15d99767bd10_23747_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683189296831_hu582c92cd9e0fed45f58d15d99767bd10_23747_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;双缓冲并行工作示意图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;446&#34;
		data-flex-basis=&#34;1071px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在双缓冲时，系统处理一块数据的时间可以粗略地认为是$Max(C, T)$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$C &amp;lt; T$：可使块设备连续输入；&lt;/li&gt;
&lt;li&gt;$C &amp;gt; T$：可使系统不必等待设备输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$n$个作业的双缓冲所花费的时间为：&lt;/p&gt;
&lt;p&gt;$$
Max(T, M, C) \times n + T + M + C - Max(T, M, C)
$$&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;p&gt;$$
Max(T, M, C) \times (n - 1) + T + M + C
$$&lt;/p&gt;
&lt;h2 id=&#34;磁盘调度算法&#34;&gt;磁盘调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先来先服务&lt;/strong&gt;（First-Come First-Served，FCFS）：根据进程请求访问磁盘的先后次序进行调度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：公平、简单，且每个进程的请求都能依次得到处理，不会出现某进程的请求长期得不到满足的情况。&lt;/li&gt;
&lt;li&gt;缺点：此算法由于未对寻道进行优化，致使平均寻道时间可能较长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最短寻道时间优先&lt;/strong&gt;（Shortest Seek Time First，SSTF，最短移臂算法）：该算法选择这样的进程，其要求访问的磁道与当前磁头所在的磁道距离最近，使得每次的寻道时间最短。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可能会出现饥饿现象。&lt;/li&gt;
&lt;li&gt;缺点：不能保证平均寻道时间最短。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扫描算法&lt;/strong&gt;（SCAN，电梯调度算法）：总是从磁头当前位置开始，沿磁头的移动方向去选择离当前磁头最近的那个柱面的请求。如果沿磁头的方向无请求访问时，就改变磁头的移动方向。&lt;/p&gt;
&lt;p&gt;在这种调度方法下磁头的移动类似于电梯的调度，所以它也称为电梯调度算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：避免了饥饿现象的出现。&lt;/li&gt;
&lt;li&gt;缺点：当磁头刚从里向外移动过某一磁道时，恰有一进程请求访问此磁道，这时该进程必须等待，待磁头从里向外，再从外向里扫描完所有要访问的磁道后才处理该进程的请求，致使该进程的请求被严重地推迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单向扫描算法&lt;/strong&gt;（CSCAN，循环扫描算法）：为了减少上述SCAN缺点中存在的这种延迟，算法规定磁头只做单向移动。&lt;/p&gt;
&lt;p&gt;例如，只是自里向外移动，从当前位置开始沿磁头的移动方向去选择离当前磁头最近的那个柱面访问，如果沿磁头的方向无请求访问时，磁头立即返回到最里面的欲访问的柱面，再亦即将最小柱面号紧接着最大柱面号构成循环，进行循环扫描。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;旋转调度算法&#34;&gt;旋转调度算法&lt;/h2&gt;
&lt;p&gt;旋转调度要考虑的问题是，当移动臂定位后，有多个进程等待访问该柱面时，应当如何决定这些进程的访问顺序。显然，系统应该选择延迟时间最短的进程对磁盘的扇区进行访问。&lt;/p&gt;
&lt;p&gt;当有若干等待进程请求访问磁盘上的信息时，旋转调度应考虑如下情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程请求访问的是同一磁道上不同编号的扇区。&lt;/li&gt;
&lt;li&gt;进程请求访问的是不同磁道上不同编号的扇区。&lt;/li&gt;
&lt;li&gt;进程请求访问的是不同磁道上具有相同编号的扇区。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于情况1和2，旋转调度总是让首先到达读/写磁头位置下的扇区先进行传送操作：对于情况3，旋转调度可以任选一个读/写磁头位置下的扇区进行传送操作。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;假设磁盘旋转速度为20ms/圈，每读一个记录后处理需要4ms。若格式化时每个磁道被分为10个扇区，有10个逻辑记录存放在同一磁道上，其排序顺序如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683254658689.png&#34;
	width=&#34;799&#34;
	height=&#34;84&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683254658689_hu487242034338a061bdbac38b652b0fd8_18129_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683254658689_hu487242034338a061bdbac38b652b0fd8_18129_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;旋转调度算法例题排序表&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;951&#34;
		data-flex-basis=&#34;2282px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;初始时读写头停在记录A处，程序顺序处理这些记录（A～J）。&lt;/p&gt;
&lt;p&gt;顺序处理完这些记录的总时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683268410250.png&#34;
	width=&#34;322&#34;
	height=&#34;311&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683268410250_hua6d0da9a28446871d2f3485a4e0dfcf2_31100_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683268410250_hua6d0da9a28446871d2f3485a4e0dfcf2_31100_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;初始逻辑记录分布情况&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;248px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;经过一个扇区的时间 $= 20ms /10 = 2ms$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理完A，磁盘转到读写头指向B开始处时，这个过程的时间为$2ms + 20ms = 22ms$。&lt;/p&gt;
&lt;p&gt;因为磁盘是一直在旋转的，而读取A扇区（2ms）后，处理A扇区花费4ms。此时磁盘可以再经过两个扇区，来到记录D的开始处。&lt;/p&gt;
&lt;p&gt;为了顺序处理记录，磁盘需要再旋转8个扇区回到B开始处。相当于处理完A后磁盘需要再旋转一圈以开始读取B。这样一个过程所耗费的时间即为$2ms + 20ms = 22ms$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序处理完所有记录的总时间 $= 9 \times (2ms + 20ms) + 2ms + 4ms = 204ms$。&lt;/p&gt;
&lt;p&gt;前9个记录（A～J）的一个过程所耗费的时间是一样的（$ 9 \times (2ms + 20ms)$）。&lt;/p&gt;
&lt;p&gt;当处理完记录I并旋转到J开始处时，只需要读取J（2ms）并且处理完（4ms）即可。这个过程的时间应为（$2ms + 4ms$）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录优化分布方案：&lt;/p&gt;
&lt;p&gt;让下一个要读取的记录，刚好在上一个记录处理完成后读写头所停的扇区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683268275593.png&#34;
	width=&#34;370&#34;
	height=&#34;358&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683268275593_hu1fd7a0d7b66c86301a4701cd6064b2ca_34524_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683268275593_hu1fd7a0d7b66c86301a4701cd6064b2ca_34524_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;优化后记录的分布情况&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;248px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;优化后的总时间 $= 10 \times (2ms + 4ms) = 60ms$。&lt;/p&gt;
&lt;p&gt;设$n$个扇区的磁盘，经过一个扇区的时间为$t$，读取一个记录后处理的时间为$c$，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序处理完所有记录的总时间为：&lt;/p&gt;
&lt;p&gt;$$
(t + nt) (n-1) + t + c
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
t \times n^2 + c
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录优化后的总时间：&lt;/p&gt;
&lt;p&gt;$$
n(t + c)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;文件管理&#34;&gt;文件管理&lt;/h1&gt;
&lt;h2 id=&#34;多级索引结构&#34;&gt;多级索引结构&lt;/h2&gt;
&lt;p&gt;磁盘索引是指在索引表中记录磁盘的地址项，地址项直接或间接地记录了磁盘数据块的地址。&lt;/p&gt;
&lt;p&gt;磁盘索引有以下几种结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接索引&lt;/strong&gt;：索引表中的地址项直接指向磁盘数据块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683271855209.png&#34;
	width=&#34;670&#34;
	height=&#34;659&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683271855209_huf7e40bf65f513be949eb336b71dc4ea2_12373_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683271855209_huf7e40bf65f513be949eb336b71dc4ea2_12373_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;直接索引&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;244px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一级间接地址索引&lt;/strong&gt;：索引表中的地址项指向一个磁盘索引块。这个索引块中的记录是地址项，这些地址项直接指向磁盘数据块。&lt;/p&gt;
&lt;p&gt;称这个磁盘索引块为&lt;strong&gt;一级索引块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683274982800.png&#34;
	width=&#34;904&#34;
	height=&#34;737&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683274982800_huff8f6fdfb39dd4f32432b5e59af5e0b4_20046_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683274982800_huff8f6fdfb39dd4f32432b5e59af5e0b4_20046_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一级间接地址索引&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二级间接地址索引&lt;/strong&gt;：索引表中的地址项指向一个磁盘索引块。这个索引块中的一个记录指向一个一级索引块。&lt;/p&gt;
&lt;p&gt;称这个记录指向一级索引块的磁盘索引块为&lt;strong&gt;二级索引块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683275164015.png&#34;
	width=&#34;1121&#34;
	height=&#34;784&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683275164015_hua10eb987a90138ea134a6bae248d9c53_39919_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683275164015_hua10eb987a90138ea134a6bae248d9c53_39919_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;二级间接地址索引&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件目录&#34;&gt;文件目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件控制块&lt;/strong&gt;（FCB）：用于文件的描述和控制的数据结构，实现了文件的“按名存取”。&lt;/p&gt;
&lt;p&gt;文件控制块至少要包括文件名和存放文件的物理地址。&lt;/p&gt;
&lt;p&gt;文件控制块也称为&lt;strong&gt;文件的说明&lt;/strong&gt;或&lt;strong&gt;文件目录项&lt;/strong&gt;（简称&lt;strong&gt;目录项&lt;/strong&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件目录&lt;/strong&gt;：文件控制块的有序集合。&lt;/p&gt;
&lt;p&gt;即文件目录是由文件控制块组成的，专门用于文件的检索。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件控制块&#34;&gt;文件控制块&lt;/h3&gt;
&lt;p&gt;文件控制块中包含以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本信息类：例如文件名、文件的物理地址、文件长度和文件块数等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取控制信息类：文件的存取权限。&lt;/p&gt;
&lt;p&gt;UNIX中，用户分成三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件主用户&lt;/li&gt;
&lt;li&gt;同组用户&lt;/li&gt;
&lt;li&gt;一般用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上三类用户对文件的权限为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读&lt;/li&gt;
&lt;li&gt;写&lt;/li&gt;
&lt;li&gt;执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用信息类：文件建立日期、最后一次修改日期、最后一次访问的日期、当前使用的
信息（如打开文件的进程数、在文件上的等待队列）等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;目录结构&#34;&gt;目录结构&lt;/h3&gt;
&lt;p&gt;组织好文件的目录是设计文件系统的重要环节，文件目录结构的组织方式直接影响到文件的存取速度，关系到文件的共享性和安全性。&lt;/p&gt;
&lt;p&gt;常见的目录结构有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一级目录结构&lt;/strong&gt;：一级目录的整个目录组织是一个&lt;u&gt;线性结构&lt;/u&gt;，在整个系统中&lt;u&gt;只需建立一张目录表&lt;/u&gt;，系统为每个文件分配一个目录项。&lt;/p&gt;
&lt;p&gt;优点：结构简单；&lt;/p&gt;
&lt;p&gt;缺点：查找速度慢，不允许重名和不便于实现文件共享等。&lt;/p&gt;
&lt;p&gt;主要用在单用户环境中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二级目录结构&lt;/strong&gt;：为了克服一级目录结构存在的缺点引入了二级目录结构。&lt;/p&gt;
&lt;p&gt;二级目录结构的组成为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主文件目录&lt;/strong&gt;（Master File Directory，MFD）：每个用户文件目录都占有一个目录项，其目录项中包括用户名和指向该用户目录文件的指针；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户目录&lt;/strong&gt;（User File Directory，UFD）：由用户所有文件的目录项组成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：提高了检索目录的速度，较好地解决了重名问题。&lt;/p&gt;
&lt;p&gt;缺点：该结构虽然能有效地将多个用户隔离开（这种隔离在各个用户之间完全无关时是一个优点），但当多个用户之间要相互合作去共同完成一个大任务，且一个用户又需要去访问其他用户的文件时，这种隔离便成为一个缺点，因为这种隔离使诸用户之间不便于共享文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多级目录结构&lt;/strong&gt;：在多道程序设计系统中常采用多级目录结构。&lt;/p&gt;
&lt;p&gt;多级目录结构是树型目录结构。从根结点向下，每一个结点是一个目录，叶结点是文件。&lt;/p&gt;
&lt;p&gt;在采用多级目录结构的文件系统中，用户要访问一个文件，必须指出文件所在的路径名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径名&lt;/strong&gt;：从某个目录开始到该文件的通路上所有各级目录名拼起来得到的。&lt;/p&gt;
&lt;p&gt;在各目录名之间、目录名与文件名之间需要用分隔符隔开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;绝对路径名&lt;/strong&gt;（Absolute Path Name）：指从根目录开始的完整路径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全文件名&lt;/strong&gt;：指绝对路径名加上该文件的文件名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;相对路径名&lt;/strong&gt;：从当前所在目录开始到其他目录或文件的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;位示图&#34;&gt;位示图&lt;/h2&gt;
&lt;p&gt;位示图（Bitmap）是一种空闲空间管理方法。通过在外存上建立一张位示图，记录文件存储器的使用情况。&lt;/p&gt;
&lt;p&gt;位示图用二进制的一位来表示一个物理块的使用情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;：表示空闲；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;：表示占用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683253664111.png&#34;
	width=&#34;569&#34;
	height=&#34;256&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683253664111_hu7a2cf55f628e04ce29478d10a9f586cd_28648_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1683253664111_hu7a2cf55f628e04ce29478d10a9f586cd_28648_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;位示图示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;222&#34;
		data-flex-basis=&#34;533px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;位示图的大小由磁盘空间的大小（物理块总数）决定。&lt;/p&gt;
&lt;p&gt;位示图的描述能力强，适合各种物理结构。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>数据结构篇</title>
        <link>https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/</link>
        <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;复杂度&#34;&gt;复杂度&lt;/h1&gt;
&lt;p&gt;算法时间复杂度以算法中基本操附重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，只要大致计算出相应的数量级即可，使用大$O$表示法表示（空间复杂度也是）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法规则：多项相加，保留最高阶项，并将系数化为1；&lt;/li&gt;
&lt;li&gt;乘法规则：多项相乘都保留，并将系数化为1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/1681099842666.png&#34;
	width=&#34;1014&#34;
	height=&#34;100&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/1681099842666_hu8fb0d0a3c83abecf36c375990db2efe0_51379_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/1681099842666_hu8fb0d0a3c83abecf36c375990db2efe0_51379_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;算法复杂度大小比较&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1014&#34;
		data-flex-basis=&#34;2433px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;递归式的时间（空间）复杂度：&lt;/p&gt;
&lt;p&gt;$$
递归的次数 \times 每次递归的时间（空间）复杂度
$$&lt;/p&gt;
&lt;h1 id=&#34;逻辑结构分类&#34;&gt;逻辑结构分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;线性结构
&lt;ul&gt;
&lt;li&gt;线性表（一般线性表）&lt;/li&gt;
&lt;li&gt;特殊线性表
&lt;ul&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线性表的推广
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;广义表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性结构
&lt;ul&gt;
&lt;li&gt;树结构
&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;多叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图结构
&lt;ul&gt;
&lt;li&gt;有向图&lt;/li&gt;
&lt;li&gt;无向图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;线性表&#34;&gt;线性表&lt;/h1&gt;
&lt;p&gt;&lt;u&gt;由 $n(n \geq 0)$ 个&lt;strong&gt;数据特性相同&lt;/strong&gt;的元素构成的&lt;strong&gt;有限序列&lt;/strong&gt;称为&lt;strong&gt;线性表&lt;/strong&gt;&lt;/u&gt;。$n=0$ 时，称为空表。非空表的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在唯一一个“第一个”元素。&lt;/li&gt;
&lt;li&gt;存在唯一一个“最后一个”元素。&lt;/li&gt;
&lt;li&gt;相邻元素之间存在序偶关系：
&lt;ul&gt;
&lt;li&gt;除第一个之外，结构中的每个数据元素均只有一个&lt;strong&gt;前驱&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;除最后一个之外，结构中的每个数据元素均只有一个&lt;strong&gt;后继&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性表的存储结构分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序存储；&lt;/li&gt;
&lt;li&gt;链式存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;顺序存储结构&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;线性表的&lt;strong&gt;顺序存储&lt;/strong&gt;是指用一组&lt;strong&gt;地址连续的存储单元&lt;/strong&gt;依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。在这种存储方式下，元素间的逻辑关系无须占用额外的空间来存储。&lt;/p&gt;
&lt;p&gt;其存储结构如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610120418.png&#34;
	width=&#34;130&#34;
	height=&#34;266&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610120418_hu2b33a584fc5a2d635ec65d6abeb2f0a4_3927_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610120418_hu2b33a584fc5a2d635ec65d6abeb2f0a4_3927_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;顺序表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;48&#34;
		data-flex-basis=&#34;117px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;假设线性表的每个元素占用的存储空间为$L$，$LOC(a_i)$为第$i$个元素的存储位置（$0 \le i \le n-1$，$n$为线性表的长度）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第$i+1$个元素和第$i$个元素的存储位置满足：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i+1})=LOC(a_i)+L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第$i$个元素的存储位置：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_i)=LOC(a_0) + i \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_i)=LOC(a_1) + (i-1) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序存储结构的线性表的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：&lt;strong&gt;可以随机存取表中的元素&lt;/strong&gt;，不需要额外的存储空间来表达元素之间的逻辑关系；&lt;/li&gt;
&lt;li&gt;缺点：&lt;strong&gt;插入和删除操作不方便、效率低、比较耗时&lt;/strong&gt;（&lt;strong&gt;插入和删除操作需要移动元素&lt;/strong&gt;），顺序表的长度是固定的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表为$n$的线性表中，有$n+1$个插入位置（不考虑插入是否会导致溢出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在第$i$个插入位置插入，需要移动$n+1-i$个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第1个位置插入（$a_1$）需要移动$n$个元素；&lt;/li&gt;
&lt;li&gt;在第$n+1$个位置插入（$a_n$后面）不需要移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设在第$i$个插入位置插入的概率为$p_i$，&lt;u&gt;等概率下&lt;/u&gt;（假如这$n+1$个插入位置插入的概率相同）&lt;u&gt;插入&lt;/u&gt;一个新元素需要移动的元素个数的&lt;u&gt;期望值$E_{insert}$&lt;/u&gt;为：&lt;/p&gt;
&lt;p&gt;$$
E_{insert} = \sum_{i=1}^{n+1}{ \Big( p_i \times (n-i+1) \Big) } = \cfrac{1}{n+1} \sum_{i=1}^{n+1}{(n-i+1)} = \cfrac{n+1}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
p_i = \cfrac{1}{n+1}
$$&lt;/p&gt;
&lt;p&gt;即，$E_{insert} = \cfrac{插入位置数-1}{2} = \cfrac{n+1}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表长为$n$的线性表中删除元素时，共有$n$个可删除的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除第$i$个元素$a_i$需要移动$n-i$个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除元素$a_1$需要移动$n-1$个元素；&lt;/li&gt;
&lt;li&gt;删除元素$a_n$不需要移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设$a_i$被删除的概率为$q_i$，&lt;u&gt;等概率下删除元素&lt;/u&gt;时需要移动的元素个数的&lt;u&gt;期望值$E_{delete}$&lt;/u&gt;为：&lt;/p&gt;
&lt;p&gt;$$
E_{delete} = \sum_{i=1}^{n}{\Big( q_i \times (n-i) \Big)} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i)} = \cfrac{n-1}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
q_i = \cfrac{1}{n}
$$&lt;/p&gt;
&lt;p&gt;即，$E_{delete} = \cfrac{删除位置数}{2} = \cfrac{n-1}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;插入操作时间复杂度&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况（在第$n+1$个位置插入）：$O(1)$；&lt;/li&gt;
&lt;li&gt;最坏情况（在第1个位置插入）：$O(n)$；&lt;/li&gt;
&lt;li&gt;平均复杂度：$O(n)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查找元素时间复杂度&lt;/strong&gt;（根据下标查找）：$O(1)$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;累加求和公式：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n} i = \cfrac{n(1+n)}{2}
$$&lt;/p&gt;
&lt;p&gt;即等差数列求和中的：&lt;/p&gt;
&lt;p&gt;$$
S_n = \cfrac{n(a_1 + a_n)}{2}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;链式存储结构&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;线性表的&lt;strong&gt;链式存储&lt;/strong&gt;是指&lt;strong&gt;通过指针链接起来&lt;/strong&gt;的结点来存储数据元素。&lt;/p&gt;
&lt;p&gt;其存储结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610469403.png&#34;
	width=&#34;403&#34;
	height=&#34;49&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610469403_hueeee19018a01756f2e48de06f8910c88_6757_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610469403_hueeee19018a01756f2e48de06f8910c88_6757_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;链式表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;822&#34;
		data-flex-basis=&#34;1973px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据域&lt;/strong&gt;：用于存储数据元素的&lt;strong&gt;值&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指针域&lt;/strong&gt;：用于存储当前元素的直接前驱或直接后继的&lt;strong&gt;位置信息&lt;/strong&gt;（直接前或后驱的&lt;strong&gt;指针&lt;/strong&gt;，称其为指针或链）。&lt;/p&gt;
&lt;p&gt;存储各数据元素的结点的&lt;u&gt;地址并不要求是连续的&lt;/u&gt;，因此存储数据元素的同时必须存储元素之间的逻辑关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链式表的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;结点空间只有在需要的时候才申请&lt;/u&gt;，无须事先分配；&lt;/li&gt;
&lt;li&gt;长度不固定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链式表结点之间通过指针域构成一个链表，&lt;u&gt;若结点中只有一个指针域，则称为线性链表&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610514354.png&#34;
	width=&#34;685&#34;
	height=&#34;64&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610514354_hu9c9f9d7fee45544c6864faab3f820061_7122_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680610514354_hu9c9f9d7fee45544c6864faab3f820061_7122_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;链式表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1070&#34;
		data-flex-basis=&#34;2568px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上图中的Head：一个指向链表第一个结点的针，称为头指针。使用它就可以顺序地访问到表中的任意一个元素。&lt;/p&gt;
&lt;p&gt;插入和删除操作时间复杂度（带不带头节点的复杂度都一样）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况（在$i=1$位置）：$O(1)$；&lt;/li&gt;
&lt;li&gt;最坏情况（在$n+1$位置插入/删除$n$位置）：$O(n)$&lt;/li&gt;
&lt;li&gt;平均复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链表操作的时间复杂度取决于指针遍历。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;栈&#34;&gt;栈&lt;/h1&gt;
&lt;p&gt;栈是一种&lt;strong&gt;后入先出&lt;/strong&gt;（Last In First Out，LIFO）的线性表。&lt;u&gt;栈只能通过访问它的一端来实现数据存储和检索。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;栈的基本操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入栈&lt;/strong&gt;：将元素置入栈顶；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出栈&lt;/strong&gt;：将元素从栈顶中取出。&lt;/li&gt;
&lt;li&gt;读取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;栈的出栈顺序一定和入栈顺序&lt;strong&gt;相反&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;顺序存储结构-1&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;栈的顺序存储结构也称为&lt;strong&gt;顺序栈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;顺序栈使用一个栈顶指针标记栈顶元素的索引位置。每次出栈时都需要重置栈顶指针，将栈顶指针向下移动，标记到新的栈顶元素。&lt;/p&gt;
&lt;p&gt;顺序栈的空间容量有限，所以每次入栈时都需要判断栈是否为满。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-1&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;栈的链式存储结构称为&lt;strong&gt;链栈&lt;/strong&gt;。链栈的头指针就是栈顶指针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680676944766.png&#34;
	width=&#34;238&#34;
	height=&#34;265&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680676944766_hu1bea4090283c9929deed80a707d4d0a3_11895_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680676944766_hu1bea4090283c9929deed80a707d4d0a3_11895_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;链栈的存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;215px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;栈的应用&#34;&gt;栈的应用&lt;/h2&gt;
&lt;p&gt;栈的典型应用包括&lt;strong&gt;表达式求值、括号匹配&lt;/strong&gt;等，在计算机语言的实现以及将递归过程转变为非递归过程的处理中，栈有重要的作用。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;队列&#34;&gt;队列&lt;/h1&gt;
&lt;p&gt;队列是一种&lt;strong&gt;先入先出&lt;/strong&gt;（First In First Out，FIFO）的线性表。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;队列只允许在表的一端插入元素，在表的另一端删除元素。&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;队头&lt;/strong&gt;（Front）：允许&lt;strong&gt;删除&lt;/strong&gt;元素的一端；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队尾&lt;/strong&gt;（Rear）：允许&lt;strong&gt;插入&lt;/strong&gt;元素的一端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;队列的基本操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入队&lt;/strong&gt;：将元素加入到队尾；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出队&lt;/strong&gt;：将元素加入到对头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;队列的入队顺序一定&lt;strong&gt;等于&lt;/strong&gt;出队顺序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用两个栈可以来模拟一个队列（从一个栈出栈后的元素入另一个栈后再出栈）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;顺序存储结构-2&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;队列的顺序存储结构称为&lt;strong&gt;顺序队列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;顺序队列设置两个指针：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队头指针：指向对头元素的下标；&lt;/li&gt;
&lt;li&gt;队尾指针：指向队尾元素的下标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果顺序队列只按照数组下标大小顺序来设置指针（对头指针的值永不大于队尾指针），那么在经过一段时间的操作后，对头指针有可能指向的并不是数组的第一个元素，此时队列的长度永远都到达不了数组的长度（空间无法被充分利用，实际使用的长度和逻辑长度不符）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680677900098.png&#34;
	width=&#34;959&#34;
	height=&#34;323&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680677900098_hua0e0c24049b10a1b1a22eff29a314663_53364_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680677900098_hua0e0c24049b10a1b1a22eff29a314663_53364_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;队列操作&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;296&#34;
		data-flex-basis=&#34;712px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们可以把数组想象为一个环型的结构（将最后一个元素和第一个元素连接起来，队头指针可以比队尾指针大）。如果此时队列的状态是上图中步骤$(e)$的状态，此时再插入元素，可以将元素放在数组索引0的位置，再让队尾指针始终保持在队列最后一个元素的索引之后即可。将这种队列称为&lt;strong&gt;循环队列&lt;/strong&gt;，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680678225885.png&#34;
	width=&#34;907&#34;
	height=&#34;202&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680678225885_hu78897751e6ca29164f26d83cde2f776e_48040_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680678225885_hu78897751e6ca29164f26d83cde2f776e_48040_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;循环队列&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;449&#34;
		data-flex-basis=&#34;1077px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-2&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;队列的链式存储也称为&lt;strong&gt;链队列&lt;/strong&gt;（&lt;strong&gt;链队&lt;/strong&gt;）。这里为了便于操作，可以给链队列添加一个头结点，并令头指针指向头结点。因此，队列为空的判定条件是头指针和尾指针的值相同，且
均指向头结点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680678441791.png&#34;
	width=&#34;278&#34;
	height=&#34;340&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680678441791_hud106655f2d3cb3393c4501ce0717f1de_16473_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680678441791_hud106655f2d3cb3393c4501ce0717f1de_16473_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;196px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;队列的应用&#34;&gt;队列的应用&lt;/h2&gt;
&lt;p&gt;队列结构常用于处理需要排队的场合，例如操作系统中处理打印任务的打印队列、离散事件的计算机模拟等。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;串&#34;&gt;串&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;串&lt;/strong&gt;（&lt;strong&gt;字符串&lt;/strong&gt;）是一种&lt;strong&gt;特殊的线性表&lt;/strong&gt;，其&lt;strong&gt;数据元素为字符&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;串具有自身的特性，运算时常常把一个串作为一个整体来处理。&lt;/p&gt;
&lt;p&gt;串的基本概念和操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空串&lt;/strong&gt;：长度为0的串；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子串&lt;/strong&gt;：由串中任意长度的连续字符构成的序列称为子串。含有子串的串称为主串。子串在主串中的位置是指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;串相等&lt;/strong&gt;：指两个串长度相等且对应序号的字符也相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;串比较&lt;/strong&gt;：两个串比较大小时以字符的ASCⅡ码值（或其他字符编码集合）作为依据。&lt;/p&gt;
&lt;p&gt;实质上，比较操作从两个串的第一个字符开始进行，字符的码值大者所在的串为大；若其中一个串先结束，则以串长较大者为大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝赋值：将一个串的值赋给另一个串；&lt;/li&gt;
&lt;li&gt;引用（地址）赋值：将一个串的引用（地址）赋给另一个串。那么这个串可以使用另一个串中的值，但是对这个串所做的操作，也会作用到另一个串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接串&lt;/strong&gt;：将一个串插入到另一个串尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;插入串&lt;/strong&gt;：将一个串插入到另一个串的任意位置中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;顺序存储结构-3&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;串的顺序存储结构是一种定长的串（类似顺序表）。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-3&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;串的链式存储结构可以方便地对串进行插入删除操作（类似链表）。&lt;/p&gt;
&lt;h2 id=&#34;串的模式匹配&#34;&gt;串的模式匹配&lt;/h2&gt;
&lt;p&gt;子串的定位操作通常称为串的模式匹配。子串也称为模式串。&lt;/p&gt;
&lt;p&gt;有关串模式匹配算法的详细讲解可以查看：&lt;a class=&#34;link&#34; href=&#34;../%e7%bb%8f%e5%85%b8%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d&#34; &gt;经典字符串匹配&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;朴素的模式匹配算法&#34;&gt;朴素的模式匹配算法&lt;/h3&gt;
&lt;p&gt;朴素的模式匹配算法也称为布鲁特一福斯算法（即暴力匹配算法），其基本思想是从主串的第一个字符起与模式串的第一个字符比较，若相等，则继续逐一对字符进行后续的比较，否则从主串第二个字符起与模式串的第一个字符重新比较，直到模式串中每个字符依次和主串中一个连续的字符序列相等时为止，此时称为匹配成功。如果不能在主串中找到与模式串相同的子串，则匹配失败。&lt;/p&gt;
&lt;p&gt;设主串和模式串的长度分别为$n$和$m$，算法时间复杂度和比较次数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最好情况：$O(m)$，次数为$m$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最坏情况：$O(n \times m)$，次数为$\cfrac{1}{2} m(n-m+2)$：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-m}{p_i\big( (i+1) \times m \big)} = \cfrac{m}{n-m+1} \sum_{i=0}^{n-m}{(i+1)} = \cfrac{1}{2} m(n-m+2)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均：$O(n+m)$，次数为$\cfrac{1}{2} (n+m)$：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-m}{p_i(i+m)} = \cfrac{1}{n-m+1} \sum_{i=0}^{n-m}{i+m} = \cfrac{1}{2} (n+m)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kmp-算法&#34;&gt;KMP 算法&lt;/h3&gt;
&lt;p&gt;KMP算法又称为改进的模式匹配算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;串的&lt;strong&gt;前缀&lt;/strong&gt;：包含第一个字符，且不包含最后一个字符的子串；&lt;/li&gt;
&lt;li&gt;串的&lt;strong&gt;后缀&lt;/strong&gt;：包含最后一个字符，且不包含第一个字符的子串。&lt;/li&gt;
&lt;li&gt;前缀集合：包含串的所有前缀的集合；&lt;/li&gt;
&lt;li&gt;后缀集合：包含串的所有后缀的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KMP的重点是求模式串字符的next值（失配指针$Next[\ i\ ]$），假设$a_{i-1}$为当前要求next值的模式串字符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前缀集合：&lt;/p&gt;
&lt;p&gt;$$
Prefix=\{p_0,p_0p_1,\cdots,p_0&amp;hellip;p_{i-1}\}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后缀集合：&lt;/p&gt;
&lt;p&gt;$$
Postfix=\{p_{i-1},p_{i-2}p_{i-1},\cdots,p_1&amp;hellip;p_{i-1}\}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;失配指针：&lt;/p&gt;
&lt;p&gt;$$
Next[i] =
\begin{cases}
-1 &amp;amp; 当\ i=0 时 \\
max &amp;amp; \{ k|0&amp;lt;k&amp;lt;i 且 &amp;ldquo;p_0\cdots p_{k-1}&amp;rdquo; = &amp;ldquo;p_{i-k}\cdots p_{i-1}&amp;rdquo; \} \\
0 &amp;amp; 其他情况
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Next[0] = -1$；&lt;/li&gt;
&lt;li&gt;$Next[i] = maxLen(Prefix \cap Postfix)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以解释为：&lt;/p&gt;
&lt;p&gt;$$
Next[\ i\ ] = 前i个子串的最长相同前后缀的长度
$$&lt;/p&gt;
&lt;p&gt;特殊情况：$Next[\ 1\ ] = 0$，因为其前缀集合和后缀集合都为空。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;失配表是用来指示匹配失败后指针该如何移动的。&lt;/p&gt;
&lt;p&gt;失配表的建立跟要匹配的串没有任何关系，仅跟模式串有关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;多维数组&#34;&gt;多维数组&lt;/h1&gt;
&lt;p&gt;多维数组是定长线性表在维数上的扩展，即线性表中的元素又是一个线性表。多维数组是一种“同构”的数据结构，其每个数据元素类型相同、结构一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一维数组：即线性表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二维数组（仅讨论顺序存储结构）：&lt;/p&gt;
&lt;p&gt;二维数组的存储结构（如下图），可以分为以行为主序（下图左边）和以列为主序（下图右边）两种。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680693946560.png&#34;
	width=&#34;451&#34;
	height=&#34;448&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680693946560_hu1932cb3790ae3468aeeee7cc636c93c8_34859_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680693946560_hu1932cb3790ae3468aeeee7cc636c93c8_34859_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;241px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二维数组为$A[n,m]$，$n$为行数，$m$为列数；&lt;/li&gt;
&lt;li&gt;数组元素$a_{i,j},\ 0 \le i \le n-1,\ 0 \le j \le m-1$；&lt;/li&gt;
&lt;li&gt;$LOC(a_{i,j})$为元素$a_{i,j}$的地址；&lt;/li&gt;
&lt;li&gt;$L$为单个元素的存储空间大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以行为主序优先存储：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i \times n + j) \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) \times n + (j-1) \big) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以列为主序优先存储：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i + j \times m) \times L
$$&lt;/p&gt;
&lt;p&gt;如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：&lt;/p&gt;
&lt;p&gt;$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) + (j-1) \times m \big) \times L
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优先存储说法问题：&lt;/p&gt;
&lt;p&gt;以行为主序优先存储的意思应该是在内存中按行存储。以列为主序优先存储的意思应该是在内存中按列存储。&lt;/p&gt;
&lt;p&gt;假设一个二维数组为：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; a_{13} &amp;amp; a_{14} \\
a_{21} &amp;amp; a_{22} &amp;amp; a_{23} &amp;amp; a_{24} \\
a_{31} &amp;amp; a_{32} &amp;amp; a_{33} &amp;amp; a_{34} \\
a_{41} &amp;amp; a_{42} &amp;amp; a_{43} &amp;amp; a_{44} \\
a_{51} &amp;amp; a_{52} &amp;amp; a_{53} &amp;amp; a_{54}
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;按照以行为主序优先存储的公式，它在内存中应该是分为了5个地址连续的数组来存储。即内存中，$[a_{11},a_{12},a_{13},a_{14}]$为一个数组，其后再接一个数组$[a_{12},a_{22},a_{23},a_{24}]$，以此类推，在内存中按照列的元素作为一个连续的一维数组单位，再按照第1行后接第2行作为整个连续的二维数组。它们在内存中的地址顺序是：&lt;/p&gt;
&lt;p&gt;$$
a_{11},a_{12},&amp;hellip;,a_{14},\\
a_{21},&amp;hellip;,a_{24},\\
a_{31},&amp;hellip;,a_{34},\\
a_{41},&amp;hellip;,a_{44},\\
a_{51},&amp;hellip;,a_{54}
$$&lt;/p&gt;
&lt;p&gt;那么以列为主序优先存储的地址顺序就为：&lt;/p&gt;
&lt;p&gt;$$
a_{11},a_{21},&amp;hellip;,a_{51},\\
a_{12},&amp;hellip;,a_{52},\\
a_{13},&amp;hellip;,a_{53},\\
a_{14},&amp;hellip;,a_{54}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般矩阵都用二维数组来表示，但是对于一些特殊矩阵，如对称矩阵、三角矩阵和对角矩阵。它们的非0元素的分布存在一定规律，所以可以将其压缩存储在一维数组中，并且它们的多个值相同的元素（按照对应特殊矩阵定义上的值相同，并非简单的值相同）只分配一个存储单位。&lt;/p&gt;
&lt;h2 id=&#34;对称矩阵&#34;&gt;对称矩阵&lt;/h2&gt;
&lt;p&gt;若矩阵$A_{n \times n}$中的元素特点为$a_{ij}=a_{ji}\ (1 \le i,j \le n)$，则称之为$n$阶对称矩阵。&lt;/p&gt;
&lt;p&gt;对称矩阵$A_{n \times n}$：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; \cdots &amp;amp; a_{1n} \\
a_{21} &amp;amp; a_{22} &amp;amp; \cdots &amp;amp; a_{2n} \\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
a_{n1} &amp;amp; a_{n2} &amp;amp; \cdots &amp;amp; a_{nn}
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;其中以对角线划分为三个区域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主对角线&lt;/strong&gt;：$a{11},a_{22},\cdots,a_{nn}$，共有$n$个元素；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上三角区&lt;/strong&gt;：对角线以上的所有元素，即：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
0 &amp;amp; a_{12} &amp;amp; a_{13} &amp;amp; \cdots &amp;amp; a_{1n} \\
0 &amp;amp; 0 &amp;amp; a_{23} &amp;amp; \cdots &amp;amp; a_{2n} \\
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; a_{(n-1)n} \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0
\end{vmatrix}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下三角区&lt;/strong&gt;：对角线以下的所有元素，和上三角区的个数相等并且重复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以将对称矩阵中，$n^2$个元素压缩存储到$\cfrac{n(n+1)}{2}$个元素的存储空间中。一般是存储下三角区和对角线。&lt;/p&gt;
&lt;p&gt;假设将$n$阶对称矩阵$A_{n \times n}$压缩存储到一维数组$B\left[ \cfrac{n(n+1)}{2} \right]$，则$B[k]\ (1 \le k \le \cfrac{n(n+1)}{2})$与矩阵元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$之间存在一一对应关系（以行为主序）：&lt;/p&gt;
&lt;p&gt;$$
k =
\begin{cases}
\cfrac{i(i-1)}{2} + j, &amp;amp; 当\ i \ge j \\
\cfrac{j(j-1)}{2} + i, &amp;amp; 当\ i &amp;lt; j
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;如果下标从0开始（第一个元素为$a_{00}$，$0 \le k \le \cfrac{n(n+1)}{2} - 1$，并且$0 \le i,j \le n-1$）：&lt;/p&gt;
&lt;p&gt;$$
k =
\begin{cases}
\cfrac{i(i+1)}{2} + j + 1, &amp;amp; 当\ i \ge j \\
\cfrac{j(j+1)}{2} + i + 1, &amp;amp; 当\ i &amp;lt; j
\end{cases}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么$length(B) = \cfrac{n(n+1)}{2}$（压缩存储的一维数组大小）：&lt;/p&gt;
&lt;p&gt;主对角线的元素的大小为$n$，下三角区的对角线大小分别为$n-1,n-2,&amp;hellip;,1$。即：
$$
length(B) = \sum_{i=1}^{n}{i} = \cfrac{n(n+1)}{2}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：《软件设计师教程（第五版）》中一维数组的下标$k$的取值范围错了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/1680698007514.png&#34;
	width=&#34;999&#34;
	height=&#34;344&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/1680698007514_hud68653e5fe46341035cf0f04b58f1fb8_157083_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/1680698007514_hud68653e5fe46341035cf0f04b58f1fb8_157083_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;对称矩阵&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;696px&#34;
	
&gt;
很明显不是$\left[ 1, \cfrac{n(n+1)}{2} \right)$，而应该是$\left[ 1, \cfrac{n(n+1)}{2} \right]$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;三对角矩阵&#34;&gt;三对角矩阵&lt;/h2&gt;
&lt;p&gt;对角矩阵是指矩阵中的&lt;u&gt;非0元素都集中在以主对角线为中心的带状区域中&lt;/u&gt;，即除了主对角线上和直接在对角线上、下方若干条对角线上的元素外，其余的矩阵元素都为0。三对角矩阵是对角矩阵中的一种，包括主对角线和在主对角线上、下方的各一条对角为非0元素：&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix}
a_{11} &amp;amp; a_{12} &amp;amp; 0      &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
a_{21} &amp;amp; a_{22} &amp;amp; a_{23} &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
0      &amp;amp; a_{32} &amp;amp; a_{33} &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
0      &amp;amp; 0      &amp;amp; a_{43} &amp;amp; \cdots &amp;amp; 0              &amp;amp; 0          \\
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots         &amp;amp; \vdots     \\
0      &amp;amp; 0      &amp;amp; 0      &amp;amp; \cdots &amp;amp; a_{(n-1)(n-1)} &amp;amp; a_{(n-1)n} \\
0      &amp;amp; 0      &amp;amp; 0      &amp;amp; \cdots &amp;amp; a_{n(n-1)}     &amp;amp; a_{nn}
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;设有$n$阶三对角矩阵$A_{n \times n}$，将其非0元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$存储在一维数组$B[k](1 \le k \le 3 \times n - 2)$中，则元素位置之间的对应关系为：&lt;/p&gt;
&lt;p&gt;$$
k = 3 \times (i-1) - 1 + j - i + 1 + 1 = 2i + j -2
$$&lt;/p&gt;
&lt;p&gt;如果下标从0开始（$0 \le k \le 3(n-1)$，并且$0 \le i,j \le n-1$）：&lt;/p&gt;
&lt;p&gt;$$
k = 3 \times i - 1 + j - i + 1 + 1 = 2i + j + 1
$$&lt;/p&gt;
&lt;h2 id=&#34;稀疏矩阵&#34;&gt;稀疏矩阵&lt;/h2&gt;
&lt;p&gt;在一个矩阵中，若&lt;u&gt;非0元素的个数远远少于0元素的个数，且非0元素的分布&lt;strong&gt;没有规律&lt;/strong&gt;&lt;/u&gt;，则称之为稀疏矩阵。&lt;/p&gt;
&lt;p&gt;对于稀疏矩阵，存储非0元素时&lt;strong&gt;必须同时存储其位置&lt;/strong&gt;（即行号和列号），用&lt;u&gt;三元组$(i,j,a_{ij})$可唯一确定矩阵$A$中的一个元素&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;可以用三元组表来存储这些三元组。稀疏矩阵的三元组表的顺序存储结构称为&lt;strong&gt;三元组顺序表&lt;/strong&gt;，常用的三元组表的链式存储结构是&lt;strong&gt;十字链表&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;树&#34;&gt;树&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;结构是一种&lt;strong&gt;非线性结构&lt;/strong&gt;，该结构中的一个数据元素可以有&lt;strong&gt;两个或两个以上的直接后继&lt;/strong&gt;元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;（Tree）是 $n(n\ge0)$ 个结点的有限集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空树&lt;/strong&gt;：$n=0$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非空树&lt;/strong&gt;：$n&amp;gt;0$，
&lt;ul&gt;
&lt;li&gt;有且仅有一个&lt;strong&gt;根结点&lt;/strong&gt;，&lt;/li&gt;
&lt;li&gt;除根节点外的其余结点可分为 $m(m&amp;gt;0)$ 个互不相交的集合，即&lt;strong&gt;子树&lt;/strong&gt;（SubTree）$T_1,T_2,\cdots,T_m$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;树的定义是&lt;strong&gt;递归&lt;/strong&gt;的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一棵树由若干棵子树构成；&lt;/li&gt;
&lt;li&gt;子树又由更小的子树构成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;h3 id=&#34;术语&#34;&gt;术语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;度&lt;/strong&gt;：结点拥有的子树数。整个树的度是树内各结点度的最大值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;叶结点&lt;/strong&gt;：度为 0 的结点，也称&lt;strong&gt;终端结点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非终端结点&lt;/strong&gt;：度不为 0 的结点，也称&lt;strong&gt;分支结点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部结点&lt;/strong&gt;：除根节点外的非终端结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子节点&lt;/strong&gt;：结点&lt;u&gt;子树的根结点&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;父结点&lt;/strong&gt;：与子结点相连的上一层的唯一一个结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兄弟结点&lt;/strong&gt;：同一个父节点的子节点之间互为兄弟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;祖先结点&lt;/strong&gt;：从根结点到该结点所经分支上的所有结点（包括其父节点，但不包括其本身）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子孙结点&lt;/strong&gt;：以某结点为根的子树中的所有结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堂兄弟结点&lt;/strong&gt;：父节点在同一层（但不是同一个）的结点互为堂兄弟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层次&lt;/strong&gt;：以根结点为第一层，根的子节点为第二层 …… 树中任意结点的层次等于其父节点的层次加 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树的高度&lt;/strong&gt;：树中结点的最大层次，也称&lt;strong&gt;树的深度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;森林&lt;/strong&gt;：是 $m(m\ge0)$ 棵互不相交的树的集合。树中每个结点的子树的集合即为森林。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树的类型&#34;&gt;树的类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有序树&lt;/strong&gt;：树中结点的各子树从左到右是有次序的，即不能互换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无序树&lt;/strong&gt;：树中结点的各子树相互之间可以互换，没有次序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树的性质&#34;&gt;树的性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设$n$个结点的树，$d_i \ (1 \le i \le n)$为该树中结点的度：&lt;/p&gt;
&lt;p&gt;$$
n = (\sum_{i=1}^{n}{d_i})+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;度为$m$的树中第$i$层上至多有$m^{i-1}$个结点（$i \ge 1$）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度为$h$的$m$度树至多有$\cfrac{m^h-1}{m-1}$个结点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;树的逻辑结构&#34;&gt;树的逻辑结构&lt;/h2&gt;
&lt;p&gt;树可以用二元组 $Tree=(root,F)$ 表示。其中 $root$ 是根结点，$F$ 是 $m(m\ge0)$ 棵子树的森林，即 $F=(T_1,T_2,\cdots,T_m)$，其中 $T_i=(r_i,F_i)$ 为根 $root$ 的第 $i$ 棵子树。&lt;/p&gt;
&lt;p&gt;树根与其子树森林之间的关系：
$$
RF = \{ &amp;lt;root,r_i&amp;gt;|i=1,2,4,m,\quad m&amp;gt;0 \}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;二叉树&#34;&gt;二叉树&lt;/h1&gt;
&lt;p&gt;二叉树是（$n \ge 0$）个结点的有限集合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空树：$n=0$；&lt;/li&gt;
&lt;li&gt;由一个根结点及两棵不相交的且分别称为左、右子树的二叉树所组成（两个子数顺序不可交换）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树同样具有递归性质。&lt;/p&gt;
&lt;p&gt;二叉树的性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第$i$层（$i \ge 1$）上&lt;u&gt;最多&lt;/u&gt;有$2^{i-1}$个结点。&lt;/p&gt;
&lt;p&gt;因为二叉树每个结点至多有两个分支（结点）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度为$k$的二叉树最多有$2^k-1$个结点（$k \ge 1$）。&lt;/p&gt;
&lt;p&gt;每层结点都取最大值后累加：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^{k}{2^{i-1}} = 2^k - 1
$$&lt;/p&gt;
&lt;p&gt;将深度为$k$且有$2^k-1$个结点的二叉树称为&lt;strong&gt;满二叉树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对满二叉树自上而下、从左至右进行编号（即层序遍历的顺序）。一个深度为$k$、有$n$个结点的二叉树，当且仅当其每一个结点都于深度为$k$的满二叉树中编号从1至$n$的结点一一对应时，称之为&lt;strong&gt;完全二叉树&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完全二叉树有一个隐藏关系：$n &amp;gt; 2^{k-1}-1$。即深度为$k$的完全二叉树，其结点数$n$必须要比深度为$k-1$的满二叉树至少多1个结点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;深度为$k$的满二叉树结点数$n$和其第$k$层结点数$m$的关系：&lt;/p&gt;
&lt;p&gt;$$
n = 2m-1
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任何一棵二叉树，若其终端结点数（度为0的结点数）为$n_0$，度2的结点数为$n_2$，则$n_0=n_2+1$。&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
终端结点数（度0结点数）=度2结点数+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有$n$个结点的完全二叉树的深度（高度）为：&lt;/p&gt;
&lt;p&gt;$$
\lfloor \log_2{n} \rfloor + 1;
$$&lt;/p&gt;
&lt;p&gt;或：&lt;/p&gt;
&lt;p&gt;$$
\lceil \log_2{(n+1)} \rceil
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树形态总数（卡特兰数）：&lt;/p&gt;
&lt;p&gt;$$
\cfrac{C^{n}_{2n}}{n+1}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;排列组合公式：&lt;/p&gt;
&lt;p&gt;$$
A^n_m = m \times (m-1) \times \cdots \times (m-n+1)
$$&lt;/p&gt;
&lt;p&gt;$m$是起点，$n$是次数。&lt;/p&gt;
&lt;p&gt;$$
C^n_m = \cfrac{A^n_m}{A^n_n}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;顺序存储结构-4&#34;&gt;顺序存储结构&lt;/h2&gt;
&lt;p&gt;用一组地址连续的存储单元存储二叉树中的结点。&lt;/p&gt;
&lt;p&gt;可以按照为完全二叉树编号的顺序（即层序遍历的顺序），将二叉树映射到顺序表中：&lt;/p&gt;
&lt;p&gt;若编号为$i$的结点（$i \ge 1$），则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$i=1$：根结点，没有双亲（父结点）；&lt;/li&gt;
&lt;li&gt;$i&amp;gt;1$：双亲为$\left\lfloor \cfrac{i}{2} \right\rfloor$；&lt;/li&gt;
&lt;li&gt;$i \le \cfrac{n}{2}$：左孩子编号为$2i$；&lt;/li&gt;
&lt;li&gt;$i \le \cfrac{n-1}{2}$：右孩子编号为$2i+1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完全二叉树适合采用顺序存储结构，而一般二叉树则不适合。&lt;/p&gt;
&lt;h2 id=&#34;链式存储结构-4&#34;&gt;链式存储结构&lt;/h2&gt;
&lt;p&gt;可以用&lt;strong&gt;三叉链表或二叉链表&lt;/strong&gt;来存储二叉树（一个结点含有3个或2个指针，其中必须有两个指针来分别存储左子树和右子树的根结点）。链表的头指针指向二叉树根结点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680770614240.png&#34;
	width=&#34;980&#34;
	height=&#34;337&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680770614240_hu74a2d83457551f99334a785fee2a7f2b_53953_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680770614240_hu74a2d83457551f99334a785fee2a7f2b_53953_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;二叉树的链表存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;697px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三叉链表仅仅是多了一个指向父结点的链表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设有$n$个结点的二叉树，则其&lt;strong&gt;空指针域数量&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于二叉链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总指针域个数：$2n$；&lt;/li&gt;
&lt;li&gt;分支数（子孙结点数，非空指针域个数）：$n-1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;$$
空指针域数=2n-(n-1)=n+1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于三叉链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总指针域个数：$3n$；&lt;/li&gt;
&lt;li&gt;分支数（子孙结点数）：$n-1$；&lt;/li&gt;
&lt;li&gt;指向父结点且非空的指针域个数：$n-1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即，非空指针域个数为：$2(n-1)$。&lt;/p&gt;
&lt;p&gt;可得：&lt;/p&gt;
&lt;p&gt;$$
空指针域数=3n-2(n-1)=n+2
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;遍历&#34;&gt;遍历&lt;/h2&gt;
&lt;p&gt;二叉树有以下遍历方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先序遍历：根左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问根结点；&lt;/li&gt;
&lt;li&gt;先序遍历左子树；&lt;/li&gt;
&lt;li&gt;先序遍历右子树。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中序遍历：左根右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中序遍历左子树；&lt;/li&gt;
&lt;li&gt;访问根结点；&lt;/li&gt;
&lt;li&gt;中序遍历右子树。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后序遍历：左右根&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后序遍历左子树；&lt;/li&gt;
&lt;li&gt;后序遍历右子树；&lt;/li&gt;
&lt;li&gt;访问根结点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后序遍历可以使用栈：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根结点入栈；&lt;/li&gt;
&lt;li&gt;右子树（如果有的话）按照步骤1至3顺序入栈（先入根结点，然后入右子树，再入左子树）；&lt;/li&gt;
&lt;li&gt;左子树（如果有的话）按照步骤1至3顺序入栈（先入根结点，然后入右子树，再入左子树）；&lt;/li&gt;
&lt;li&gt;将栈中所有元素出栈，出栈顺序即为后序遍历的顺序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;层序遍历：根据层序从上至下，从左到右遍历&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问根结点（第1层）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左到右访问第2层所有结点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左到右访问第3层所有结点；&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;直至访问到最后一层的所有结点（从左到右）。&lt;/p&gt;
&lt;p&gt;层序遍历可以使用队列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将根结点入队；&lt;/li&gt;
&lt;li&gt;将对头元素出队，然后将其左右子结点（如果有的话）依序入队；&lt;/li&gt;
&lt;li&gt;重复步骤2直至所有元素出队，出队顺序即为层序遍历顺序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;二叉树的遍历实质上是对一个非线性结构进行线性化的过程，它使得每个结点（除第一个和最后一个）在这些线性序列中有且仅有一个直接前驱和直接后继。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;平衡二叉树&#34;&gt;平衡二叉树&lt;/h2&gt;
&lt;p&gt;二叉树可以用于快速查找。例如比根结点小的在左子树，比根结点大的在右子树（二叉排序树）。那么每次查找，根据根结点就可以剔除一半的范围。&lt;/p&gt;
&lt;p&gt;但是如果二叉树左右子树的结点数量差别很大，那么每次查找并不一定能剔除一半的范围，查询效率大打折扣。&lt;/p&gt;
&lt;p&gt;设一个二叉树的左右子树高度之差的绝对值为$d$，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不平衡的二叉树：$d &amp;gt; 1$；&lt;/li&gt;
&lt;li&gt;平衡的二叉树：$d \le 1$。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;完全二叉树一定是平衡二叉树，平衡二叉树不一定是完全二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二叉排序树&#34;&gt;二叉排序树&lt;/h2&gt;
&lt;p&gt;二叉排序树的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;左子树&lt;/strong&gt;所有结点的关键字都&lt;strong&gt;小于&lt;/strong&gt;根结点；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右子树&lt;/strong&gt;所有根结点的关键字都&lt;strong&gt;大于&lt;/strong&gt;根结点；&lt;/li&gt;
&lt;li&gt;左右子树也都是二叉排序树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉排序树的&lt;strong&gt;中序遍历&lt;/strong&gt;（左根右）得到的是该二叉树的&lt;strong&gt;有序序列&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;线索二叉树&#34;&gt;线索二叉树&lt;/h2&gt;
&lt;p&gt;线索二叉树是在二叉树结点中保存了结点的前驱和后继的信息。&lt;/p&gt;
&lt;p&gt;如果使用指针来指向其前驱和后继，增加指针信息会降低存储空间的利用率。&lt;/p&gt;
&lt;p&gt;可以采用增加两个标志（&lt;code&gt;leftTag&lt;/code&gt;和&lt;code&gt;rightTag&lt;/code&gt;）来区分指针域指向的是左或右子结点还是前驱或后继：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;leftTag&lt;/td&gt;
        &lt;td&gt;leftChild&lt;/td&gt;
        &lt;td&gt;data&lt;/td&gt;
        &lt;td&gt;rightChild&lt;/td&gt;
        &lt;td&gt;rightTag&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;$$
leftTag =
\begin{cases}
True  &amp;amp; leftChild指向结点左孩子 \\
False &amp;amp; leftChild指向结点的直接前驱
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;$$
rightTag =
\begin{cases}
True  &amp;amp; rightChild指向结点右孩子 \\
False &amp;amp; rightChild指向结点的直接后继
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;若二叉树的二叉链表采用以上所示的结点结构，则相应的链表称为线索链表，其中指向结点前驱、后继的指针称为线索。&lt;/p&gt;
&lt;p&gt;对二叉树以某种次序遍历使其成为线索二叉树的过程称为线索化。&lt;/p&gt;
&lt;h2 id=&#34;哈夫曼树&#34;&gt;哈夫曼树&lt;/h2&gt;
&lt;p&gt;哈夫曼树即最优二叉树，是一类&lt;strong&gt;带权路径长度最短&lt;/strong&gt;的树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;：指从树中&lt;strong&gt;一个结点到另一个结点之间的通路&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径长度&lt;/strong&gt;：路径上的&lt;strong&gt;分支数目&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;树的路径长度&lt;/strong&gt;：指从树根到每一个叶子之间的路径长度之和；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结点的带权路径长度&lt;/strong&gt;：从该结点到树根之间的&lt;strong&gt;路径长度&lt;/strong&gt;与该结点&lt;strong&gt;权值&lt;/strong&gt;的乘积；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;树的带权路径长度&lt;/strong&gt;：树中所有叶子结点的带权路径长度之和。&lt;/p&gt;
&lt;p&gt;设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带权叶子结点数：$n$；&lt;/li&gt;
&lt;li&gt;叶子结点的权值：$w_k$；&lt;/li&gt;
&lt;li&gt;叶子结点到根的路径长度：$l_k$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则树的带权路径长度为：&lt;/p&gt;
&lt;p&gt;$$
WPL = \sum_{k=1}^{n}{w_kl_k}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈夫曼树是指权值为$w_1,w_2,\cdots,w_n$的$n$个叶子结点的二叉树中，带权路径长度最小的二叉树。&lt;/p&gt;
&lt;p&gt;构造最优二叉树的哈夫曼算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据给定的$n$个权值$\{ w_1,w_2,\cdots,w_n \}$，构成$n$棵二叉树集合$F=\{T_1,T_2,\cdots,T_n\}$，每棵树$T_i$有且仅有一个带权为$w_i$的根结点。&lt;/li&gt;
&lt;li&gt;在$F$中选取2棵权值最小的树作为左、右子树，构造一棵新二叉树。新二叉树的根结点权值为其左右子树根结点权值之和。&lt;/li&gt;
&lt;li&gt;从$F$中删除这2棵树，并将新树加入到$F$中。&lt;/li&gt;
&lt;li&gt;重复步骤2、3直到$F$中仅含一棵树为止，这棵树便是哈夫曼树。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈夫曼算法并未规定哪棵树作为左或右子树，所以哈夫曼树并不唯一，但$WPL$值是唯一的。&lt;/p&gt;
&lt;p&gt;给定$n$个权值后，哈夫曼树的结点数$m$就确定了：&lt;/p&gt;
&lt;p&gt;$$
m = 2 \times n - 1
$$&lt;/p&gt;
&lt;p&gt;所以可用一维数组存储哈夫曼树。&lt;/p&gt;
&lt;h3 id=&#34;哈夫曼编码&#34;&gt;哈夫曼编码&lt;/h3&gt;
&lt;p&gt;哈夫曼编码是一种不等长的编码，它用哈夫曼算法来构造出最优前缀码：&lt;/p&gt;
&lt;p&gt;给定&lt;strong&gt;字符集&lt;/strong&gt;$D=\{ d_1,d_2,\cdots,d_n \}$及&lt;strong&gt;字符的使用频率&lt;/strong&gt;$W=\{w_1,w_2,\cdots,w_n\}$。&lt;/p&gt;
&lt;p&gt;构造&lt;strong&gt;最优前缀码&lt;/strong&gt;的方法为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以$d_1,d_2,\cdots,d_n$作为叶子结点，$w_1,w_2,\cdots,w_n$作为叶子结点的权值，构造出一棵最优二叉树。&lt;/li&gt;
&lt;li&gt;将树中每个结点的左分支标上0，右分支标上1（左0右1）。&lt;/li&gt;
&lt;li&gt;每个叶子结点代表字符的编码就是从根到叶子的路径上组成的0、1串。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680836524813.png&#34;
	width=&#34;347&#34;
	height=&#34;334&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680836524813_hu78baa79acc8330412526e447ee3074d0_24961_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680836524813_hu78baa79acc8330412526e447ee3074d0_24961_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;哈夫曼编码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;249px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中，字符$a$字符$b$、$c$、$d$、$e$的编码分别为00、01、100、11、101。&lt;/p&gt;
&lt;h3 id=&#34;压缩比&#34;&gt;压缩比&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680959771881.png&#34;
	width=&#34;784&#34;
	height=&#34;489&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680959771881_hu4f7b4b1585cf7b1f2369bc9d93906f07_66292_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1680959771881_hu4f7b4b1585cf7b1f2369bc9d93906f07_66292_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;压缩比例题&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按照&lt;u&gt;出现频率&lt;/u&gt;计算&lt;u&gt;加权平均长度&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;$$
加权平均长度 = \sum_{i=1}^{5}{字符i的位数 \times 字符i出现频率}
$$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$$
1 \times 40% + 3 \times (10% + 20% + 16% + 14%) = 2.2
$$&lt;/p&gt;
&lt;p&gt;压缩后平均长度为2.2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算压缩比：&lt;/p&gt;
&lt;p&gt;$$
压缩比 = \cfrac{压缩前编码长度 - 压缩后平均长度}{压缩前编码长度}
$$&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编码5个字符至少需要3位：$2^2 &amp;lt; 5 &amp;lt; 2^3$，所以压缩前编码长度为3；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压缩比：&lt;/p&gt;
&lt;p&gt;$$
\cfrac{3-2.2}{3} \approx 0.27
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;哈夫曼编码方案是基于贪心策略的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;图&#34;&gt;图&lt;/h1&gt;
&lt;p&gt;在图中，任意两个结点之间都可能有直接的关系，所以图中&lt;u&gt;一个结点的前驱结点和后继结点的数目是没有限制的&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;图$G$是由集合$V$和$E$构成的二元组，记作$G=(V,E)$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顶点&lt;/strong&gt;：表示数据元素。$V$是图中顶点的非空有限集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边&lt;/strong&gt;：表示数据元素之间的关系。$E$是图中边的有限集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图可分为两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有向图&lt;/strong&gt;：有向图顶点之间的关系称为弧（或有向边），用$&amp;lt;v_i,v_j&amp;gt;$表示，$v_i$是&lt;strong&gt;弧尾&lt;/strong&gt;（始点或起点），$v_j$是&lt;strong&gt;弧头&lt;/strong&gt;（终点，箭头指向的顶点），即有向边是指&lt;u&gt;从弧尾指向弧头&lt;/u&gt;的一条边。$&amp;lt;v_i,v_j&amp;gt;$和$&amp;lt;v_j,v_i&amp;gt;$分别表示的是两条边。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无向图&lt;/strong&gt;：无向图顶点之间的关系用$(v_i,v_j)$表示。$(v_i,v_j)$和$(v_j,v_i)$表示的是同一条边。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;术语-1&#34;&gt;术语&lt;/h2&gt;
&lt;h3 id=&#34;完全图&#34;&gt;完全图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;完全图&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无向完全图&lt;/strong&gt;：指一个有$n$个顶点的无向图，其每一个顶点与其他$n-1$个顶点之间都有边。&lt;/p&gt;
&lt;p&gt;$n$个顶点的无向完全图共有$\cfrac{n(n-1)}{2}$条边：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^{n}{i} = \cfrac{n(n-1)}{2}
$$&lt;/p&gt;
&lt;p&gt;假设$n$个顶点的无向完全图，为他们编上1到$n$的编号，按照编号顺序计算边，第1个顶点跟其他$n-1$个顶点有$n$条边；第2个顶点跟其他$n-1$个顶点也有$n$条边，除去1条跟第1个顶点相连的边，有$n-1$条不一样的边；第3个顶点出去2条跟第1和第2个顶点相连的边，有$n-2$条不一样的边……以此类推，得出上方公式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有向完全图&lt;/strong&gt;：指一个有$n$个顶点的有向图，以其每一个顶点为始点与其他$n-1$个顶点之间都有弧。&lt;/p&gt;
&lt;p&gt;$n$个顶点的有向完全图共有$n(n-1)$条边：&lt;/p&gt;
&lt;p&gt;$$
\prod_{i=1}^{n}{n-1} = n(n-1)
$$&lt;/p&gt;
&lt;p&gt;有向完全图的$n$个顶点都有$n-1$条以其他顶点作为终点的弧（出度为$n-1$），并且这$n$个顶点的$n-1$条弧都是不同的弧，所以可推出上方公式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;度&#34;&gt;度&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;度&lt;/strong&gt;：顶点$v$的度是指关联于该顶点的边的数目，记作$D(v)$。&lt;/p&gt;
&lt;p&gt;若为有向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入度&lt;/strong&gt;：以该顶点为终点的有向边的数目，记为$ID(v)$；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出度&lt;/strong&gt;：以该顶点为起点的有向边的数目，记为$OD(v)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有向图度与入度、出度的关系：&lt;/p&gt;
&lt;p&gt;$$
D(v) = ID(v) + OD(v)
$$&lt;/p&gt;
&lt;p&gt;对于所有的图，顶点数$n$、边数$e$与各顶点的度之间有：&lt;/p&gt;
&lt;p&gt;$$
e = \cfrac{1}{2} \sum_{i=1}^{n}{D(v_i)}
$$&lt;/p&gt;
&lt;p&gt;即，所有顶点的度数之和 $= 2e$。&lt;/p&gt;
&lt;h3 id=&#34;路径&#34;&gt;路径&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无向图$G$中的路径：从顶点$v_p$到顶点$v_q$的路径是指存在一个顶点序列$v_p,v_{i1},v_{i2},\cdot,v_{in},v_q$，使得$(v_p,v_{i1}),(v_{i1},v_{i2}),\cdots,(v_{in},v_q) \in E(G)$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无向图$G$中的路径：从顶点$v_p$到顶点$v_q$的路径是指存在一个顶点序列$v_p,v_{i1},v_{i2},\cdot,v_{in},v_q$，使得$&amp;lt;v_p,v_{i1}&amp;gt;,&amp;lt;v_{i1},v_{i2}&amp;gt;,\cdots,&amp;lt;v_{in},v_q&amp;gt; \in E(G)$。&lt;/p&gt;
&lt;p&gt;无向图中的路径也是有方向的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;子图&#34;&gt;子图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;子图&lt;/strong&gt;：若有两个图$G=(V,E)$和$G&#39;=(V&#39;,E&#39;)$，如果$V&#39; \sube V$且$E&#39; \sube E$，则称$G&#39;$为$G$的子图。&lt;/p&gt;
&lt;h3 id=&#34;连通图&#34;&gt;连通图&lt;/h3&gt;
&lt;p&gt;对于无向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连通&lt;/strong&gt;：无向图中，若从顶点$v_i$到顶点$v_j$&lt;u&gt;有路径&lt;/u&gt;，则称顶点$v_i$和顶点$v_j$是联通的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连通图&lt;/strong&gt;：若无向图中&lt;u&gt;任意两个顶点都是联通的&lt;/u&gt;，称其为连通图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连通分量&lt;/strong&gt;：无向图$G$的&lt;strong&gt;极大连通子图&lt;/strong&gt;称为$G$的连通分量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$n$个结点的连通图，它的边的取值范围是$[n-1,\cfrac{n(n-1)}{2}]$。&lt;/p&gt;
&lt;p&gt;对于有向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强连通图&lt;/strong&gt;：在有向图$G$中，如果对于每一对顶点，$v_i,v_j\in V$ 且 $v_i \neq v_j$，从顶点$v_i$到顶点$v_j$和从顶点$v_j$到顶点$v_i$都存在路径，则称图$G$为强连通图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强连通分量&lt;/strong&gt;：有向图中的&lt;strong&gt;极大连通子图&lt;/strong&gt;称为有向图的强连通分量。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;连通图是无向图中的一种，所以一般也称为无向连通图。&lt;/p&gt;
&lt;p&gt;强连通图是有向图的一种，一般也称为有向强连通图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;网&#34;&gt;网&lt;/h3&gt;
&lt;p&gt;边（或弧）带权值的图称为网。&lt;/p&gt;
&lt;h3 id=&#34;有向树&#34;&gt;有向树&lt;/h3&gt;
&lt;p&gt;如果一个有向图恰&lt;u&gt;有一个顶点的入度为0（作为root），其余顶点的入度均为1&lt;/u&gt;，则是一棵有向树。&lt;/p&gt;
&lt;h2 id=&#34;基本存储结构&#34;&gt;基本存储结构&lt;/h2&gt;
&lt;p&gt;图的基本存储结构有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵表示法：使用矩阵存储顶点关系，适合存储边比较多的图；&lt;/li&gt;
&lt;li&gt;邻接链表表示法：使用多个单链表存储顶点关系，适合存储边比较少的图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;邻接矩阵表示法&#34;&gt;邻接矩阵表示法&lt;/h3&gt;
&lt;p&gt;图的邻接矩阵表示法是指&lt;u&gt;用矩阵来表示图中顶点之间的关系&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;对于具有$n$个顶点的图$G=(V,E)$，其邻接矩阵是一个$n$阶方阵，且满足：&lt;/p&gt;
&lt;p&gt;$$
A[i][j] =
\begin{cases}
1 &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt;是E中的边 \\
0 &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt;不是E中的边
\end{cases}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即，横$i$竖$j$，横出竖入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无向图的邻接矩阵是对称矩阵，有向图的邻接矩阵则不一定对称。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无向图：顶点$v_i$的度是邻接矩阵第$i$行（或列）中值不为0的元素个数；&lt;/li&gt;
&lt;li&gt;有向图：第$i$行的非0元素个数是顶点$v_i$的出度$OD(v_i)$；第$i$列的非0元素个数是顶点$v_i$的入度$ID(v_j)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网（赋权图）的邻接矩阵定义（$W_{ij}$是边或弧上的权值）：&lt;/p&gt;
&lt;p&gt;$$
A[i][j] =
\begin{cases}
W_{ij} &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt; \in E \\
\infin &amp;amp; 若(v_i,v_j)或&amp;lt;v_i,v_j&amp;gt; \notin E
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;邻接矩阵适合用于存储边比较多的图。&lt;/p&gt;
&lt;h3 id=&#34;邻接链表表示法&#34;&gt;邻接链表表示法&lt;/h3&gt;
&lt;p&gt;邻接链表表示法指的是&lt;u&gt;为图的每个顶点建立一个单链表&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;边结点（表结点）：&lt;/p&gt;
  &lt;table&gt;
      &lt;tr&gt;
          &lt;td&gt;adjvex&lt;/td&gt;
          &lt;td&gt;nextarc&lt;/td&gt;
          &lt;td&gt;info&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adjvex&lt;/code&gt;：指示与顶点$v_i$邻接的顶点的序号；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextarc&lt;/code&gt;：指示下一条边或弧的结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;：存储与边或弧有关的信息，如权值等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表头结点（顶点结点）：&lt;/p&gt;
  &lt;table&gt;
      &lt;tr&gt;
          &lt;td&gt;data&lt;/td&gt;
          &lt;td&gt;firstarc&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：存储顶点$v_i$的名或其他有关信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstarc&lt;/code&gt;：指示链表中的第一个结点（邻接顶点）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表头结点通常以顺序存储结构存储，以便随机访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于有向图，&lt;strong&gt;邻接链表&lt;/strong&gt;存储的是以当前结点作为&lt;strong&gt;起点&lt;/strong&gt;的弧；&lt;strong&gt;逆邻接链表&lt;/strong&gt;存储的是以当前结点作为&lt;strong&gt;终点&lt;/strong&gt;的弧。&lt;/p&gt;
&lt;p&gt;邻接链表适合用于存储边比较少的图。&lt;/p&gt;
&lt;h2 id=&#34;遍历-1&#34;&gt;遍历&lt;/h2&gt;
&lt;p&gt;图的遍历是指&lt;u&gt;从某个项点出发，沿着某条搜索路径对图中的所有项点进行访问且只访问一次的过程&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&#34;深度优先搜索&#34;&gt;深度优先搜索&lt;/h3&gt;
&lt;p&gt;深度优先搜索（Depth First Search，DFS）类似于树的先序遍历。从图$G$中任一结点$v$出发按深度优先搜索法进行遍历的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置搜索指针$p$，使$p$指向顶点$v$；&lt;/li&gt;
&lt;li&gt;访问$p$所指顶点，并使$p$指向与其&lt;u&gt;相邻接的且尚未被访问过&lt;/u&gt;的顶点。&lt;/li&gt;
&lt;li&gt;若$p$所指顶点存在，则重复步骤2，否则执行步骤4。&lt;/li&gt;
&lt;li&gt;沿着访问的次序和方向回溯到最后一个有未被访问过的邻接顶点的顶点，并使$p$指向这个未被访问的顶点，然后重复步骤2到4，直到所有的项点均被访问为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;时间复杂度（$n$为顶点数，$e$为边数）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵：$O(n^2)$；&lt;/li&gt;
&lt;li&gt;邻接链表：$O(n+e)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;/h3&gt;
&lt;p&gt;图的广度优先搜索（Breadth First Search，BFS）步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从图中的某个顶点$v$出发；&lt;/li&gt;
&lt;li&gt;访问$v$后，依次访问$v$的各个未被访问过的邻接点；&lt;/li&gt;
&lt;li&gt;分别从$v$的邻接点出发，依次访问它们的邻接点；&lt;/li&gt;
&lt;li&gt;按照$v$的邻接点访问的先后顺序，重复步骤2到4，直到图中所有已被访问的项点的邻接点都被访问到；&lt;/li&gt;
&lt;li&gt;若此时还有未被访问的顶点，则另选图中的一个未被访问的项点作为起点，重复上述过程，直到图中所有的顶点都被访问到为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;广度优先搜索可以引入队列来保存已访问过的顶点序列。即，每当一个顶点被访问后，就将其放入队列中；当队头顶点出队时，就访问其未被访问的邻接点并令这些邻接顶点入队。每个顶点最多入队一次。&lt;/p&gt;
&lt;p&gt;广度和深度优先搜索遍历图的&lt;u&gt;时间复杂度相同&lt;/u&gt;（$n$为顶点数，$e$为边数）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵：$O(n^2)$；&lt;/li&gt;
&lt;li&gt;邻接链表：$O(n+e)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;广度和深度优先搜索遍历图的不同之处在于：&lt;u&gt;顶点访问的次序不同&lt;/u&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;生成树&#34;&gt;生成树&lt;/h2&gt;
&lt;p&gt;连通图的生成树是该图的极小连通子图（都是$n-1$条边）。&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;非连通图&lt;/strong&gt;而言，每个连通分量中的顶点集和遍历时走过的边集一起构成若干棵生成树，把它们称为&lt;strong&gt;非连通图的生成树森林&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在图的生成树中任一加一条边，则必然形成回路。&lt;/p&gt;
&lt;p&gt;边数为$e$，$e \ge n$则必然形成回路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图的生成树不是唯一的。&lt;/p&gt;
&lt;p&gt;按深度和广度优先搜索进行遍历将得到不同的生成树，分别称为深度优先生成树和广度优先生成树。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最小生成树&#34;&gt;最小生成树&lt;/h3&gt;
&lt;p&gt;连通网的生成树的边也带权，把生成树各边的权值总和称为生成树的权。&lt;u&gt;权值最小的生成树称为最小生成树&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&#34;aov-网&#34;&gt;AOV 网&lt;/h2&gt;
&lt;p&gt;一个大工程项目可以分为许多较小子工程（称为活动）。有向图中，用顶点表示活动，弧表示活动之间的优先级关系（活动进行时的制约关系），称这样的有向图为&lt;u&gt;以顶点表示活动的网&lt;/u&gt;（Activity On Vertex network，AOV网）。&lt;/p&gt;
&lt;p&gt;在AOV网中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从顶点$v_i$到$v_j$有一条有向路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$v_i$是$v_j$的前驱，&lt;/li&gt;
&lt;li&gt;$v_j$是$v_i$的后继；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$&amp;lt;v_i,v_j&amp;gt;$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$v_i$是$v_j$的直接前驱，&lt;/li&gt;
&lt;li&gt;$v_j$是$v_i$的直接后继。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOV网中不应出现有向环。检测工程是否可行，首先应检查对应AOV网是否存在回路。不存在回路的有向图称为有向无环图（DAG，Directed Acycline Graph）。&lt;/p&gt;
&lt;h2 id=&#34;拓扑排序&#34;&gt;拓扑排序&lt;/h2&gt;
&lt;p&gt;检测AOV网是否是DAG的方法是对AOV网构造其&lt;u&gt;顶点的拓扑有序序列&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;拓扑排序是将AOV网中的所有顶点排成一个线性序列的过程，并且该序列满足：若在AOV网中从顶点$v_i$到$v_j$有一条路径，则在该线性序列中，$v_i$必在$v_j$之前。对AOV网进行拓扑排序的方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在AOV网中选择一个入度为0（没有前驱）的顶点且输出它。&lt;/li&gt;
&lt;li&gt;从网中删除该顶点及与该顶点有关的所有弧。&lt;/li&gt;
&lt;li&gt;重复上述两步，直到网中不存在入度为0的顶点为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两种结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有顶点已输出，说明网中不存在回路。&lt;/li&gt;
&lt;li&gt;尚有未输出的顶点，剩余顶点均有前驱顶点，表面网中存在回路。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有向无环图的拓扑序列中，顶点$v_i$在$v_j$之前，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能存在弧$&amp;lt;v_i,v_j&amp;gt;$，一定不存在弧$&amp;lt;v_j,v_i&amp;gt;$；&lt;/li&gt;
&lt;li&gt;可能存在$v_i$到$v_j$的路径，一定不存在$v_j$到$v_i$的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1681115534531.png&#34;
	width=&#34;133&#34;
	height=&#34;173&#34;
	srcset=&#34;https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1681115534531_hu9a36ad2327d0139feeb1c8e76c812997_7356_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/uTools_1681115534531_hu9a36ad2327d0139feeb1c8e76c812997_7356_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AOV网拓扑排序例子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;76&#34;
		data-flex-basis=&#34;184px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上图拓扑排序的结果为：6,1,4,3,2,5（结果并不唯一）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当有向图中无环时，也可以利用深度优先遍历进行逆拓扑排序。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>程序设计语言篇</title>
        <link>https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/</link>
        <pubDate>Thu, 30 Mar 2023 19:58:41 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;低级和高级语言&#34;&gt;低级和高级语言&lt;/h1&gt;
&lt;p&gt;程序设计语言根据硬件是否能识别区分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;低级语言&lt;/strong&gt;：二进制机器指令、汇编语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级语言&lt;/strong&gt;：面向各类应用的程序设计语言，更加接近自然语言。需要通过编译器或解释器（翻译）来让机器执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;编译和解释&#34;&gt;编译和解释&lt;/h1&gt;
&lt;p&gt;程序设计语言按照翻译的方式可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译&lt;/strong&gt;：需要通过&lt;strong&gt;编译器&lt;/strong&gt;（&lt;strong&gt;编译程序&lt;/strong&gt;）将&lt;u&gt;源程序（源代码）&lt;/u&gt;编译为包含二进制指令的&lt;u&gt;可执行文件（目标程序）&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;真正在机器上运行的是与源程序（逻辑）等价的目标程序。&lt;/p&gt;
&lt;p&gt;源程序和编译器都不再参与目标程序的运行过程。&lt;/p&gt;
&lt;p&gt;汇编程序也是属于编译执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：需要通过&lt;strong&gt;解释器&lt;/strong&gt;（&lt;strong&gt;解释程序&lt;/strong&gt;）将&lt;u&gt;源程序（源代码）&lt;/u&gt;中的指令解释为二进制指令后给机器执行。&lt;/p&gt;
&lt;p&gt;该过程不会产生独立的目标程序。&lt;/p&gt;
&lt;p&gt;并且解释器和源程序都会参与到程序的运行过程（运行控制）中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与编译方式相比，解释方式程序执行的速度慢，因为解释方式执行的程序，需要解释器在其中充当一个原程序与机器之前实时的翻译。&lt;/p&gt;
&lt;p&gt;脚本语言属于动态语言，其程序结构可以在运行中改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编译过程&#34;&gt;编译过程&lt;/h2&gt;
&lt;p&gt;编译程序的功能是把某高级语言书写的&lt;u&gt;源程序翻译成与之等价的目标程序&lt;/u&gt;（汇编语言或机
器语言)。&lt;/p&gt;
&lt;p&gt;编译程序的工作过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680232196718.png&#34;
	width=&#34;549&#34;
	height=&#34;466&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680232196718_hu22cb7da26b44a72475eca6b4da41107c_39469_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680232196718_hu22cb7da26b44a72475eca6b4da41107c_39469_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;编译过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;282px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中，以下几个阶段对于编译过程来说是必须的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;词法分析&lt;/li&gt;
&lt;li&gt;语法分析&lt;/li&gt;
&lt;li&gt;语义分析&lt;/li&gt;
&lt;li&gt;目标代码生成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下两个阶段对于编译过程来说不是必须的（可省略）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中间代码生成&lt;/li&gt;
&lt;li&gt;（中间或目标）代码优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;词法分析&#34;&gt;词法分析&lt;/h3&gt;
&lt;p&gt;源程序可以简单地被看成是一个&lt;u&gt;多行的字符串&lt;/u&gt;。&lt;strong&gt;词法分析&lt;/strong&gt;阶段的任务是&lt;u&gt;对源程序从前到后（从左到右）逐个字符地扫描，从中识别出一个个“单词”符号&lt;/u&gt;。&lt;strong&gt;“单词”符号&lt;/strong&gt;是程序设计语言的&lt;strong&gt;基本语法单位&lt;/strong&gt;，如关键字（或称保留字）、标识符、常数、运算符和分隔符（如标点符号、左右括号）等。&lt;/p&gt;
&lt;p&gt;词法分析程序输出的“单词”&lt;u&gt;常以&lt;strong&gt;二元组&lt;/strong&gt;的方式输出&lt;/u&gt;，即单词种别和单词自身的值。&lt;/p&gt;
&lt;p&gt;词法分析过程依据的是语言的&lt;u&gt;词法规则&lt;/u&gt;，即描述“单词”结构的规则。&lt;/p&gt;
&lt;h4 id=&#34;词法规则&#34;&gt;词法规则&lt;/h4&gt;
&lt;p&gt;词法分析根据词法规则将构成源程序的字符串转换成单词符号序列。词法规则可用3型文法（正规文法）或正规表达式描述。&lt;/p&gt;
&lt;h5 id=&#34;正规表达式&#34;&gt;正规表达式&lt;/h5&gt;
&lt;p&gt;正规表达式（正规式）有以下符号：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;闭包&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示其前面链接的符号或集合可以出现$[0, +\infty]$次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;·&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;连接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可省略，将多个符号或集合连接起来。表示逻辑与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;或&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示逻辑或。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/1680248469003.png&#34;
	width=&#34;990&#34;
	height=&#34;277&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/1680248469003_huaaba3cb8f1b33a18fcb91ebc2f451286_91806_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/1680248469003_huaaba3cb8f1b33a18fcb91ebc2f451286_91806_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;357&#34;
		data-flex-basis=&#34;857px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;设$U$、$V$和$W$均为正规式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680249034196.png&#34;
	width=&#34;974&#34;
	height=&#34;185&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680249034196_hu7097887f00dc6fb602c5be85b92d295e_40054_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680249034196_hu7097887f00dc6fb602c5be85b92d295e_40054_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;526&#34;
		data-flex-basis=&#34;1263px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;有限自动机&#34;&gt;有限自动机&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;有限自动机&lt;/strong&gt;是词法分析的一个工具（一种识别装置的抽象概念），它能正确地&lt;strong&gt;识别正规集&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确定的有限自动机&lt;/strong&gt;（Deterministic Finite Automata，DFA）：对每一个状态来说识别字符后转移的&lt;strong&gt;状态是唯一的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个DFA是一个&lt;strong&gt;五元组&lt;/strong&gt;$(S, \Sigma, f, s_0, Z)$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$S$：包含&lt;u&gt;状态的有限集&lt;/u&gt;（每个元素称为一个状态）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Sigma$：有穷&lt;u&gt;字母表&lt;/u&gt;，其每个元素称为一个&lt;u&gt;输入字符&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f$：$S \times \Sigma \to S$ 上的&lt;u&gt;单值部分映像&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;$$
f(A,a)=Q \qquad A \in S, a \in \Sigma
$$&lt;/p&gt;
&lt;p&gt;表示当前状态为$A$、输入为$a$时，将转换到下一状态$Q$，称$Q$为$A$的一个后继状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$s_0$：唯一的&lt;u&gt;开始状态&lt;/u&gt;，$s_0 \in S$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$Z$：非空的&lt;u&gt;终止状态集合&lt;/u&gt;，$Z \subseteq S$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFA可以用两种直观的方式表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态转换图&lt;/strong&gt;：简称为转换图，是一个有向图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DFA中的每个&lt;strong&gt;状态&lt;/strong&gt;对应转换图中的一个&lt;strong&gt;结点&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DFA中的每个&lt;strong&gt;转换函数&lt;/strong&gt;对应图中的一条&lt;strong&gt;有向弧&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;双圈表示的结点是终态结点。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终态也可以是初态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若转换函数为$f(A,a)=Q$，则该有向弧从结点$A$出发，进入结点$Q$,字符$a$是弧上的标记。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态转换矩阵&lt;/strong&gt;：用一个二位数组$M$表示。&lt;/p&gt;
&lt;p&gt;矩阵元素$M[A,a]$：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行下标&lt;/strong&gt;：表示状态。当前状态为$A$。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列下标&lt;/strong&gt;：表示输入的字符。当前输入为$a$。&lt;/li&gt;
&lt;li&gt;$M[A,a]$的值：当前状态为$A$、输入为$a$时，应该转换到的下一状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680251834262.png&#34;
	width=&#34;983&#34;
	height=&#34;160&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680251834262_hudda18d0f6413fec2c6bfff005f78095a_126189_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680251834262_hudda18d0f6413fec2c6bfff005f78095a_126189_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;614&#34;
		data-flex-basis=&#34;1474px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680251962756.png&#34;
	width=&#34;982&#34;
	height=&#34;585&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680251962756_hub668c80da120ede04799d85ae8f0770b_237616_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680251962756_hub668c80da120ede04799d85ae8f0770b_237616_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不确定的有限自动机&lt;/strong&gt;（Nondeterministic Finite Automata，NFA）：对每一个状态来说识别字符后转移的&lt;strong&gt;状态是不唯一的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;NFA也是一个&lt;strong&gt;五元组&lt;/strong&gt;$(S, \Sigma, f, s_0, Z)$。与DFA的区别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$f$是$S \times \Sigma \to 2^S$ 上的映像。&lt;/p&gt;
&lt;p&gt;对于$S$中的一个给定状态及输入符号，返回一个状态的集合。即当前状态的后继状态不一定是唯一的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有向弧上的标记可以是 $\varepsilon$（$\varepsilon$ 表示空）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;DFA是NFA的特例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680252743732.png&#34;
	width=&#34;918&#34;
	height=&#34;407&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680252743732_hu52e92fdc66cb95fd2f0c67685207a651_114412_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680252743732_hu52e92fdc66cb95fd2f0c67685207a651_114412_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;541px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;有限自动机识别成功的依据是路跑的通并且跑完后的终点是终态。&lt;/u&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有向弧中出现如 $a,b$，代表该有向弧输入的值可以为$a$&lt;strong&gt;或&lt;/strong&gt;$b$。即&lt;code&gt;,&lt;/code&gt;代表或。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;语法分析&#34;&gt;语法分析&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法分析&lt;/strong&gt;的任务是在词法分析的基础上，&lt;u&gt;根据语言的语法规则将单词符号序列分解成各类语法单位&lt;/u&gt;，如“表达式”“语句”和“程序”等。&lt;/p&gt;
&lt;p&gt;如果源程序中没有语法错误，语法分析后就能正确地&lt;u&gt;构造出其语法树&lt;/u&gt;；否则&lt;u&gt;指出语法错误&lt;/u&gt;，并&lt;u&gt;给出相应的诊断信息&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;例如对&lt;code&gt;id1 := id2 + id3 * 60&lt;/code&gt;进行语法分析后形成的语法树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680233200526.png&#34;
	width=&#34;888&#34;
	height=&#34;266&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680233200526_hub39a12f42925ee3f44c562351b5287d6_25864_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680233200526_hub39a12f42925ee3f44c562351b5287d6_25864_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;333&#34;
		data-flex-basis=&#34;801px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一般来说，根据表达式生成的语法树，运算符在表达式种优先级越高，它在语法树中的层次就越低，反之亦然。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;词法分析和语法分析在本质上都是对源程序的结构进行分析。&lt;/p&gt;
&lt;p&gt;到达语法分析阶段可以发现程序中所有的语法错误。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量的值是否正确；&lt;/li&gt;
&lt;li&gt;语句的形式是否正确；&lt;/li&gt;
&lt;li&gt;语句的结构是否合法；&lt;/li&gt;
&lt;li&gt;检查括号是否匹配；&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法分析方法有多种，根据产生语法树的方向，可分为&lt;strong&gt;自底向上&lt;/strong&gt;和&lt;strong&gt;自顶向下&lt;/strong&gt;两类。&lt;/p&gt;
&lt;h4 id=&#34;上下文无关文法&#34;&gt;上下文无关文法&lt;/h4&gt;
&lt;p&gt;程序设计语言的&lt;u&gt;绝大多数&lt;strong&gt;语法规则&lt;/strong&gt;可以采用&lt;strong&gt;上下文无关文法&lt;/strong&gt;进行描述&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;上下文无关文法属于乔姆斯基定义的2型文法。&lt;/p&gt;
&lt;p&gt;对于上下文无关文法，$G[S] = (V_N, V_T, P, S)$，其产生式的形式都是 $A \to \beta$，其中 $A \in V_n$，$\beta \in (V_N \cup V_T)^*$。即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$V_N$：非终结符号集合，&lt;/li&gt;
&lt;li&gt;$V_T$：终结符号集合，&lt;/li&gt;
&lt;li&gt;$P$：产生式集合，&lt;/li&gt;
&lt;li&gt;$S$：开始符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680255073014.png&#34;
	width=&#34;990&#34;
	height=&#34;393&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680255073014_hub03b05e46f3a2c7483ad3eeddb5269a8_262819_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680255073014_hub03b05e46f3a2c7483ad3eeddb5269a8_262819_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;251&#34;
		data-flex-basis=&#34;604px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上下文无关文法的推导过程可用树型结构描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680255429332.png&#34;
	width=&#34;210&#34;
	height=&#34;346&#34;
	srcset=&#34;https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680255429332_hu3ef184a27e7b53ced5b1ffcd5bd7d8dd_10720_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AF%87/uTools_1680255429332_hu3ef184a27e7b53ced5b1ffcd5bd7d8dd_10720_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;60&#34;
		data-flex-basis=&#34;145px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;由上下文无关文法的推导过程也可以看出它是自顶向下推导。&lt;/p&gt;
&lt;p&gt;对于上下文无关文法中的集合，有以下对应关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S \to P$&lt;/li&gt;
&lt;li&gt;$P \to V_N$&lt;/li&gt;
&lt;li&gt;$V_N \to V_T$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语义分析&#34;&gt;语义分析&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语义分析&lt;/strong&gt;阶段分析各语法结构的含义，&lt;u&gt;检查源程序是否包含静态语义错误&lt;/u&gt;，并&lt;u&gt;收集类型信息&lt;/u&gt;供后面的代码生成阶段使用。&lt;u&gt;只有语法和语义都正确的源程序才能翻译成正确的目标代码。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;语义分析的一个主要工作是&lt;u&gt;进行类型分析和检查&lt;/u&gt;。程序设计语言中的一个数据类型一般包含两个方面的内容：类型的载体及其上的运算。&lt;/p&gt;
&lt;p&gt;语义分析阶段的输入是上一个阶段（语法分析）所构造的语法树。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语义分析后语法树中可能会出现一些语义处理结点。例如&lt;code&gt;inttoreal&lt;/code&gt;，表示将一个整型数转换为浮点数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;语义分析不能发现程序中所有的语义错误。语义分析只能发现静态语义错误，动态语义错误需要在生成目标程序后运行时才能发现。&lt;/p&gt;
&lt;p&gt;有语义错误是可以编译成功的。例如&lt;code&gt;a/0&lt;/code&gt;，符合语法，也符合静态语义，编译器检验不出来这个是错的，只有运行才会报错，也就是动态语义，动态语义错误常见的还有死循环。&lt;/p&gt;
&lt;p&gt;PS：现在有些IDE会对一些常见的动态语义错误进行检查，在程序编译前提示给用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;中间代码生成&#34;&gt;中间代码生成&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;中间代码生成&lt;/strong&gt;阶段的工作是&lt;u&gt;根据语义分析的输出生成中间代码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;“中间代码”是一种简单且含义明确的记号系统，可以有若干种形式，它们的共同特征是与具体的机器无关。最常用的一种中间代码是与汇编语言的指令非常相似的三地址码，其实现方式常采用四元式。四元式的形式为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(运算符, 运算对象1, 运算对象2, 运算结果)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;语义分析和中间代码生成所依据的是语言的语义规则。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;中间代码生成阶段&lt;/u&gt;对于编译过程来说是&lt;u&gt;可省略的&lt;/u&gt;。但是&lt;u&gt;前面的三个阶段词法分析、语法分析和语义分析还有最后的目标代码生成是不可省略的&lt;/u&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;编译器前后端&#34;&gt;编译器前后端&lt;/h4&gt;
&lt;p&gt;对于编译过程的各个阶段，在逻辑上可以把它们划分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;词法分析&lt;/li&gt;
&lt;li&gt;语法分析&lt;/li&gt;
&lt;li&gt;语义分析&lt;/li&gt;
&lt;li&gt;中间代码生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;中间代码优化&lt;/li&gt;
&lt;li&gt;目标代码生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以中间代码为分水岭（中间代码作为前端的输出，然后再作为后端的输入来连接前后端），把编译器分成了与机器有关的部分（后端）和与机器无关的部分（前端）。如此一来，对于同一种程序设计语言的编译器，开发出一个前端之后，就可以针对不同的机器开发相应的后端，前、后端有机结合后就形成了该语言的一个编译器。当语言有改动时，只会涉及前端部分的维护。&lt;/p&gt;
&lt;p&gt;对于不同的程序设计语言，分别设计出相应的前端，然后将各个语言的前端与同一个后端相结合，就可以得到各个语言在某种机器上的编译器。&lt;/p&gt;
&lt;p&gt;使用中间代码，将编译器分为前后端的好处是，有利于编译程序的可移植性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译程序的可移植性提高了，那么相应的源程序（源代码）的可移植也会提高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;中缀和后缀表达式&#34;&gt;中缀和后缀表达式&lt;/h4&gt;
&lt;p&gt;中间代码有多种形式，其中树与后缀表示形式适用于解释器，而编译器多采用与机器指令格式较接近的四元式形式。&lt;/p&gt;
&lt;p&gt;根据生成的语法树，按照不同的方式遍历即可生成形式不同的表达式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中缀表达式：中序遍历（左-根-右）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后缀表达式：后序便利（左-右-根）。&lt;/p&gt;
&lt;p&gt;后缀转中缀用到了栈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;逆波兰式其实就是后缀式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码优化&#34;&gt;代码优化&lt;/h3&gt;
&lt;p&gt;由于编译器将源程序翻译成中间代码的工作是机械的、按固定模式进行的，因此，生成的中间代码往往在时间上和空间上有较大的浪费。&lt;u&gt;当需要生成高效的目标代码时，必须进行优化。&lt;/u&gt;优化过程&lt;u&gt;可以在中间代码生成阶段进行，也可以在目标代码生成阶段进行&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;由于中间代码不依赖于具体机器，此时&lt;u&gt;所做的优化一般建立在对程序的控制流和数据流分析的基础之上，与具体的机器无关&lt;/u&gt;。优化所依据的原则是&lt;strong&gt;程序的等价变换规则&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;目标代码生成&#34;&gt;目标代码生成&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;目标代码&lt;/strong&gt;生成阶段的任务是&lt;u&gt;把中间代码变换成特定机器上的绝对指令代码、可重定位的指令代码或汇编指令代码&lt;/u&gt;，这个阶段的工作&lt;strong&gt;与具体的机器密切相关&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;寄存器的分配：寄存器访问速度快，但数量有限，所以如何分配及使用寄存器是目标代码生成时需要着重考虑的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译过程中为变量分配的存储单元所用的地址是&lt;strong&gt;逻辑地址&lt;/strong&gt;，程序运行时再将逻辑地址映射为物理地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;符号表管理&#34;&gt;符号表管理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;符号表&lt;/strong&gt;的作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录源程序中各个符号的必要信息；&lt;/li&gt;
&lt;li&gt;辅助语义的正确性检查和代码生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在编译过程中需要对符号表进行快速有效地查找、插入、修改和删除等操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;符号表在前三个阶段构建&lt;/u&gt;：可以始于词法分析阶段，也可以放到语法分析和语义分析阶段&lt;/li&gt;
&lt;li&gt;符号表的使用有时会&lt;u&gt;延续到目标代码的运行阶段&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;编译过程中翻译主要考虑声明语句和可执行语句。对声明语句，主要是将所需的信息正确地填入符号表；对可执行语句，则是将其翻译成中间代码或目标代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;出错处理&#34;&gt;出错处理&lt;/h3&gt;
&lt;p&gt;编写的源程序中出现的错误分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态错误&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;编译阶段发现的程序错误，又可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法错误：有关语言结构上的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如单词拼写错误、标点符号错误、表达式中缺少操作数、括号不匹配等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态语义错误：运算符与运算对象类型不合法等错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态错误&lt;/strong&gt;（动态语义错误）：发生在程序运行时。&lt;/p&gt;
&lt;p&gt;常见的动态错误例如除数为0。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在编译时发现程序中的错误后，编译程序应采用适当的策略修复它们，使得分析过程能够继续下去，以便在一次编译过程中尽可能多地找出程序中的错误。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;程序设计语言的基本成分&#34;&gt;程序设计语言的基本成分&lt;/h1&gt;
&lt;p&gt;程序设计语言的基本成分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;li&gt;运算&lt;/li&gt;
&lt;li&gt;控制&lt;/li&gt;
&lt;li&gt;传输&lt;/li&gt;
&lt;li&gt;（函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据成分&#34;&gt;数据成分&lt;/h2&gt;
&lt;p&gt;数据成分包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标识符&lt;/strong&gt;：标识符通常是由字母、数字和下划线&lt;code&gt;_&lt;/code&gt;组成，并且不能由数字开头。&lt;/p&gt;
&lt;p&gt;一般有如下种类标识符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键字。&lt;/li&gt;
&lt;li&gt;变量名。&lt;/li&gt;
&lt;li&gt;函数名。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;现在，某些高级语言已经支持中文等字符来当作变量名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常量&lt;/strong&gt;：一般有&lt;u&gt;字面量&lt;/u&gt;（例如&lt;code&gt;123&lt;/code&gt;、&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;）和&lt;u&gt;不可变变量（在某些语言中也称其为常量）&lt;/u&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;常量也具有类型；&lt;/li&gt;
&lt;li&gt;常量也有对应的存储单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;变量&lt;/strong&gt;：用来存储数据或对象。有存储类别、类型、名称（变量名）、作用域和生存周期等属性（这些也是数据的属性）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全局量&lt;/strong&gt;：在程序代码中的&lt;u&gt;作用域（作用范围）为整个文件或程序&lt;/u&gt;的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;局部量&lt;/strong&gt;：在程序代码中的&lt;u&gt;作用域（作用范围）为定义它的函数或语句块中&lt;/u&gt;的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据类型&lt;/strong&gt;：按照数据组织形式的不同可将数据分为基本类型、用户定义类型、构造类型（C和C++）及其他类型等。&lt;/p&gt;
&lt;p&gt;许多程序设计语言都规定，程序中的数据都必须具有类型，其作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分配存储单元&lt;/strong&gt;：便于为数据合理分配存储单元；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查数据对象&lt;/strong&gt;：便于对参与表达式计算的数据对象进行（合法性）检查；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取值范围&lt;/strong&gt;：便于规定数据对象的取值范围及能够进行的运算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;动态数据结构，其数据的结构会在程序运行过程中改变，例如链表、二叉树等。&lt;/p&gt;
&lt;p&gt;动态数据结构的数据空间必须采用&lt;strong&gt;堆存储&lt;/strong&gt;分配策略，数据存放在&lt;strong&gt;堆区&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在C/C++中，全局变量的存储空间在静态数据区分配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;运算成分&#34;&gt;运算成分&lt;/h2&gt;
&lt;p&gt;大多数高级程序设计语言的基本运算可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算。&lt;/li&gt;
&lt;li&gt;关系运算。&lt;/li&gt;
&lt;li&gt;逻辑运算。&lt;/li&gt;
&lt;li&gt;位运算。&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制结构&#34;&gt;控制结构&lt;/h2&gt;
&lt;p&gt;有以下三种结构来构造程序中的控制逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序结构。&lt;/li&gt;
&lt;li&gt;选择结构。&lt;/li&gt;
&lt;li&gt;循环结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数高级语言都针对循环结构提供了&lt;code&gt;break&lt;/code&gt;、&lt;code&gt;continue&lt;/code&gt;等控制流跳转语句。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;传输成分&#34;&gt;传输成分&lt;/h2&gt;
&lt;p&gt;程序设计语言的传输成分指明语言允许的数据传输方式，如赋值处理、数据的输入和输出等。&lt;/p&gt;
&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;函数定义&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数首部：
&lt;ul&gt;
&lt;li&gt;返回值类型&lt;/li&gt;
&lt;li&gt;函数名&lt;/li&gt;
&lt;li&gt;形参表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数体：定义函数所实现的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;函数声明&lt;/strong&gt;：在C（C++）中，函数需要先声明后引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数调用&lt;/strong&gt;：在调用函数中使用被调函数实现的功能。函数调用的一般形式为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;函数名(实参表)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用函数与被调函数之间参数的传递有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;值调用&lt;/strong&gt;（Call by Value）：形参是实参的一份拷贝。即实参将值传递给形参，对形参值的更改并不会作用到实参上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引用调用&lt;/strong&gt;（Call by Reference）：形参是实参的一个别名。即函数中对形参的访问和修改实际上是对其相应实参所做的访问和修改。&lt;/p&gt;
&lt;p&gt;引用调用下，可以实现形参和实参之间数据的双向传递。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在进行函数调用和返回时，由系统使用栈区来进行控制和管理。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>计算机系统篇</title>
        <link>https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/</link>
        <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;计算机的基本单位&#34;&gt;计算机的基本单位&lt;/h1&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;td&gt;位（比特）&lt;br&gt;最小数据单位&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;bit、b&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;字节&lt;br&gt;最小存储单位&lt;/td&gt;
    &lt;td&gt;byte、B&lt;/td&gt;
    &lt;td&gt;1B = 8b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;千字节&lt;/td&gt;
    &lt;td&gt;KB&lt;/td&gt;
    &lt;td&gt;1KB = 1024B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;兆字节&lt;/td&gt;
    &lt;td&gt;MB&lt;/td&gt;
    &lt;td&gt;1MB = 1024KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;吉字节&lt;/td&gt;
    &lt;td&gt;GB&lt;/td&gt;
    &lt;td&gt;1GB = 1024MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;太字节&lt;/td&gt;
    &lt;td&gt;TB&lt;/td&gt;
    &lt;td&gt;1TB = 1024GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;计算机系统&#34;&gt;计算机系统&lt;/h1&gt;
&lt;p&gt;计算机系统由&lt;u&gt;硬件&lt;/u&gt;和&lt;u&gt;软件&lt;/u&gt;组成。&lt;/p&gt;
&lt;p&gt;计算机基本硬件系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器&lt;/li&gt;
&lt;li&gt;控制器&lt;/li&gt;
&lt;li&gt;存储器&lt;/li&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;中央处理单元&#34;&gt;中央处理单元&lt;/h1&gt;
&lt;p&gt;运算器、控制器等部件被集成在一起统称中央处理单元（CPU）。CPU是硬件系统的核心，用于数据的加工处理，能完成各种算术、逻辑运算及控制功能。&lt;/p&gt;
&lt;p&gt;中央处理单元（CPU）负责获取程序指令、对指令进行译码并加以执行。&lt;/p&gt;
&lt;p&gt;CPU的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;程序控制：通过执行指令来控制程序的执行顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作控制：CPU产生每条指令的（若干）操作信号并将操作信号送往对应的部件，控制相应的部件按指令的功能要求进行操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间控制：对各种操作进行时间上的控制，即指令执行过程中操作信号的出现时间、持续时间及出现的时间顺序都需要进行严格控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据处理：通过对数据进行算术运算及逻辑运算等方式进行加工处理，数据加工处理的结果被人们所利用。&lt;/p&gt;
&lt;p&gt;对数据的加工处理也是CPU最根本的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对系统内部和外部的中断（异常）做出响应，进行相应的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU的组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器&lt;/li&gt;
&lt;li&gt;控制器&lt;/li&gt;
&lt;li&gt;寄存器组&lt;/li&gt;
&lt;li&gt;内部总线&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运算器&#34;&gt;运算器&lt;/h2&gt;
&lt;p&gt;运算器组成部件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算术逻辑单元（ALU）：重要组成部件。负责处理数据，实现对数据的算术运算和逻辑运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;累加寄存器（AC，累加器）：是一个通用寄存器。存放操作数或者结果。&lt;/p&gt;
&lt;p&gt;其功能是当运算器的算术逻辑单元执行算术或逻辑运算时，为ALU提供一个工作区。例如，在执行一个减法运算前，先将被减数取出暂存在AC中，再从内存储器中取出减数，然后同AC的内容相减，将所得的结果送回AC中。
运算的结果是放在累加器中的，运算器中至少要有一个累加寄存器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据缓冲寄存器（DR）：暂存由内存读/写的一条指令或一个数据字，将不同时间段内读/写的数据隔离开来。&lt;/p&gt;
&lt;p&gt;DR的主要作用为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为CPU和内存、外部设备之间数据传送的中转站；&lt;/li&gt;
&lt;li&gt;作为CPU和内存、外围设备之间在操作速度上的缓冲；&lt;/li&gt;
&lt;li&gt;在单累加器结构的运算器中，数据缓冲寄存器还可兼作为操作数寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态条件寄存器（PSW）：保存了当前指令执行完成之后的状态（标志通常分别由1位触发器保存）。通常，一个算术操作产生一个运算结果，而一个逻辑操作产生一个判决。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制器&#34;&gt;控制器&lt;/h2&gt;
&lt;p&gt;控制器用于控制整个CPU的工作，它决定了计算机运行过程的
自动化。它不仅要保证程序的正确执行，而且要能够处理异常事件。&lt;/p&gt;
&lt;p&gt;指令控制逻辑要完&lt;u&gt;取指令&lt;/u&gt;、&lt;u&gt;分析指令&lt;/u&gt;和&lt;u&gt;执行指令&lt;/u&gt;的操作，其过程分为&lt;u&gt;取指令&lt;/u&gt;、&lt;u&gt;指令译码&lt;/u&gt;、&lt;u&gt;按指令操作码执行&lt;/u&gt;、&lt;u&gt;形成下一条指令地址&lt;/u&gt;等步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指令寄存器（IR）：暂存要执行的指令，该指令从内存中获取（通过缓冲寄存器）。&lt;/p&gt;
&lt;p&gt;当CPU执行一条指令时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把指令从内存储器取到缓冲寄存器中。&lt;/li&gt;
&lt;li&gt;送入IR暂存。&lt;/li&gt;
&lt;li&gt;指令译码器根据IR的内容产生各种微操作指令，控制其他的组成部件工作，完成所需的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序计数器（PC，指令计数器）：具有寄存信息和计数两种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在程序开始执行前，将程序的起始地址送入PC。
该地址在程序加载到内存时确定，因此PC的内容即是程序第一条指令的地址。&lt;/li&gt;
&lt;li&gt;执行指令时，CPU自动修改PC的内容，以便使其保持的总是将要执行的下一条指令的地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于大多数指令都是按顺序来执行的，所以修改的过程通常只是简单地对PC加1。&lt;/p&gt;
&lt;p&gt;执行转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到，或者根据转移指令给出的直接转移的地址得到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址寄存器（AR）：保存当前CPU所访问的内存单元的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令译码器（ID）：指令包含操作码和地址码两部分，而指令译码器就是对指令中的操作码字段进行分析解释，识别该指令规定的操作，向操作控制器发出具体的控制信号，控制各部件工作，完成所需的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据表示&#34;&gt;数据表示&lt;/h1&gt;
&lt;h2 id=&#34;原码&#34;&gt;原码&lt;/h2&gt;
&lt;p&gt;原码表示法又叫符号加绝对值表示法。最高位为符号位，0表示正号，1表示负号，其余的n-1位表示数值的绝对值。&lt;/p&gt;
&lt;p&gt;原码特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0的表示不唯一（有正负0）；&lt;/li&gt;
&lt;li&gt;加、减运算方式不统一；&lt;/li&gt;
&lt;li&gt;需额外对符号位进行处理，不利于硬件设计；&lt;/li&gt;
&lt;li&gt;当 $a &amp;lt; b$ 时，实现 $a-b$ 比较困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反码&#34;&gt;反码&lt;/h2&gt;
&lt;p&gt;最高位为符号位，0表示正号，1表示负号，其余的n-1位表示数值的绝对值。正数的反码与原码相同，负数的反码则是除符号位以外其余各位按位取反。&lt;/p&gt;
&lt;p&gt;原码特点：0的表示不唯一。&lt;/p&gt;
&lt;h2 id=&#34;补码&#34;&gt;补码&lt;/h2&gt;
&lt;p&gt;计算机中的补码是模2补码&lt;/p&gt;
&lt;p&gt;概念：在一个模运算（Moduler Arithmetic）系统中，同余（Congruence Modulo）的数等价。&lt;/p&gt;
&lt;p&gt;补码的定义：有 $n$ 位时，$[X]_补=(2^n+X)\mod{2^n}\quad (-2^{n-1}\leq X&amp;lt;2^{n-1})$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当 $X&amp;lt;0$ 时，补码有两种求法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各位取反，末位加 1。&lt;/li&gt;
&lt;li&gt;从第 2 个 1 开始往右各位取反。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 $X&amp;gt;0$ 时，补码与原码相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补码的减法：$Y-X=Y+[-X]_补$。&lt;/p&gt;
&lt;p&gt;特殊的补码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$[-2^{n-1}]_补=(2^n-2^{n-1})\mod{2^n}=(10\ldots0)_2\ (n-1 个0)$。&lt;/p&gt;
&lt;p&gt;这个数的最高位（符号位）即表示符号，又表示数值。如，-128。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$[-1]_补=2^n-1=(11\ldots1)_2\ (n个1)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$[+0]_补=[-0]_补=(00\ldots0)\ (n个0)$。
补码的0表示唯一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;移码&#34;&gt;移码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;移码就是将每个数值加上一个偏置常数（Excess/Bias）。&lt;/li&gt;
&lt;li&gt;通常，当编码位数为 $n$ 时，bias 取 $2^{n-1}$ 或 $2^{n-1}-1$。&lt;/li&gt;
&lt;li&gt;移码可以方便地进行大小的比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移码可以看成是在其补码的基础上对符号位取反。移码的0表示唯一。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实（个人认为）根据补码和移码的定义，可以将补码当作特殊的移码。其bias为$2^n$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;各种码制带符号数的范围&#34;&gt;各种码制带符号数的范围&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4.png&#34;
	width=&#34;1174&#34;
	height=&#34;273&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4_huf86084d3b2fa3b4510a57d1d605f45ba_75716_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4_huf86084d3b2fa3b4510a57d1d605f45ba_75716_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;带符号数的范围&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;430&#34;
		data-flex-basis=&#34;1032px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;浮点数&#34;&gt;浮点数&lt;/h2&gt;
&lt;p&gt;浮点数使用两个定点数来分别表示实数的尾数（F）和阶码（E）。其一般形式为：$N=2^E \times F$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个数的浮点表示不是唯一的。小数点位置改变，阶码也随着相应改变。&lt;/li&gt;
&lt;li&gt;浮点数所能表示的数值范围主要由阶码决定，所表示数值的精度则由尾数决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;规格化浮点数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尾数$M \ge 0$，其规格化尾数形式为$M=0.\times\times\times$，$\times$可为0也可为1。即$M$限定在了$[0.5,1]$。&lt;/li&gt;
&lt;li&gt;尾数$M \le 0$，其规格化尾数形式为$M=1.\times\times\times$，$\times$可为0也可为1。即$M$限定在了$[-1,-0.5]$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般浮点数阶码用R位的移码表示，尾数用M位的补码表示。这种表示的数值范围为：&lt;/p&gt;
&lt;p&gt;$$
-1 \times 2^{(2^{R-1}-1)} \sim +(1-2^{-M+1}) \times 2^{(2^{R-1}-1)}
$$&lt;/p&gt;
&lt;p&gt;现在所有通用计算机都采用 IEEE 754 来表示浮点数。IEEE 754 的尾数用原码表示，阶码还是用移码表示。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;寻址方式&#34;&gt;寻址方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;立即寻址：操作数就包含在指令中。&lt;/li&gt;
&lt;li&gt;直接寻址：操作数在内存，指令给出操作数的地址。&lt;/li&gt;
&lt;li&gt;寄存器寻址：操作数在寄存器，指令给出操作数的寄存器名（地址）。&lt;/li&gt;
&lt;li&gt;寄存器间接寻址：操作数在内存，寄存器存放操作数的地址，指令给出存放操作数地址的寄存器地址。&lt;/li&gt;
&lt;li&gt;间接寻址：指令中给出操作数地址（操作数地址在内存中）的地址。&lt;/li&gt;
&lt;li&gt;相对寻址：指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。&lt;/li&gt;
&lt;li&gt;变址寻址：操作数地址等于变址寄存器的内容加偏移量。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;校验码&#34;&gt;校验码&lt;/h1&gt;
&lt;p&gt;码距，是指一个编码系统中任意两个合法编码之间至少有多少个二进制位不同。码距为n的编码方案，在该编码方案中任意两个合法编码之间至少有n个二进制位不同。例如值1和2的编码分别为&lt;code&gt;0000 0001&lt;/code&gt;和&lt;code&gt;0000 0010&lt;/code&gt;他们最后两位不同，所以，码距为2。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个编码系统的码距$\ge 2$时，该编码系统具有&lt;u&gt;检错能力&lt;/u&gt;；&lt;/li&gt;
&lt;li&gt;一个编码系统的码距$\ge 3$时，该编码系统才&lt;u&gt;可能有纠错能力&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即，一个校验码要想能够检错和纠错那么它的码距至少是3。&lt;/p&gt;
&lt;h2 id=&#34;奇偶校验码&#34;&gt;奇偶校验码&lt;/h2&gt;
&lt;p&gt;奇偶校验（Parity Codes）是通过在编码中增加一位校验位来&lt;u&gt;使编码中1的个数为奇数（奇校验）或者为偶数（偶校验）&lt;/u&gt;。但该编码只能检错，但不能纠错。&lt;/p&gt;
&lt;p&gt;奇偶校验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;码距为2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仅检测出代码中奇数位数（奇数个0或1发生错误），不能发现偶数位数出错。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;奇数 + 偶数 = 奇数
奇数 + 奇数 = 偶数
偶数 + 偶数 = 偶数
偶数 + 奇数 = 奇数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即奇数可以改变奇偶性，偶数不能，所以当代码中偶数位出错时，奇偶性不变，无法发现错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用的奇偶校验码有3种：水平奇偶校验码、垂直奇偶校验码和水平垂直校验码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;海明码&#34;&gt;海明码&lt;/h2&gt;
&lt;p&gt;海明码（Hamming Code）是一种利用奇偶性来&lt;u&gt;检错和纠错&lt;/u&gt;的校验方法。海明码是在数据位之间的特定位置上插入k个校验位，通过扩大码距来实现检错和纠错。设数据位是$n$位，校验位是$k$位，则$n$和$k$必须满足以下关系：&lt;/p&gt;
&lt;p&gt;$$
2^k-1 \ge n+k
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该公式的字面意思为，$k$个校验位的最大值（$k$个校验位都为1），要比海明码的位数（$n+k$）要大。
海明码的码距为3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;海明码的编码规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$k$个校验位：$P_k, P_{k-1}, \cdots, P_1$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n$个数据位：$D_{n-1}, D_{n-2}, \cdots, D_1, D_0$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的海明码：$H_{n+k}, H_{n+k-1}, \cdots, H_1$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$H_j = P_i, j=2^{i-1}$。&lt;/li&gt;
&lt;li&gt;数据位依序插入到海明码中剩下的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;海明码中任一位都是由若干个校验位来检验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;校验数据位时：被校验的海明位的下标等于所有参与校验该位的校验位的下标之和。&lt;/li&gt;
&lt;li&gt;校验位由自身校验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679983905932.png&#34;
	width=&#34;1023&#34;
	height=&#34;1049&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679983905932_hu8233f94300cd2978c7262586b5e1abdc_350868_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679983905932_hu8233f94300cd2978c7262586b5e1abdc_350868_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;偶校验：$G_4G_3G_2G_1={(0000)}_{2}$则表示数据无错误，否则表示接收到的数据有错误。&lt;/p&gt;
&lt;p&gt;若出错，$G_4G_3G_2G_1$的十进制值指出来出错位置。如$G_4G_3G_2G_1=1010$，说明$H_{10}(D_5)$出错，将其取反即可纠错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;奇校验：$G_4G_3G_2G_1=(1111)_2$则表示数据无错误，否则表示接收到的数据有错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;循环冗余码&#34;&gt;循环冗余码&lt;/h2&gt;
&lt;p&gt;循环冗余校验码（Cyclic Redundancy Check，CRC）广泛应用于数据通信领域和磁介质存储系统中。它利用生成多项式为k个数据位产生个校验位来进行编码，其编码长度为k+r。CRC的代码格式为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679825785079.png&#34;
	width=&#34;613&#34;
	height=&#34;92&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679825785079_hue59488e391052e21a77b5920f121b7a3_12188_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679825785079_hue59488e391052e21a77b5920f121b7a3_12188_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;666&#34;
		data-flex-basis=&#34;1599px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;若CRC码的字长为n，又可称其为（n,k）码，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;左边为信息码（数据），占k位；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右边为校验码，占n-k位。&lt;/p&gt;
&lt;p&gt;校验码是由信息码产生的，校验码位数越多，该代码的校验能力就越强。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在求CRC编码时，采用的是模2运算。模2加减运算的规则是按位运算，不发生借位和进位。&lt;/p&gt;
&lt;p&gt;CRC码距为2，可以检错不能纠错。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;计算机指令集&#34;&gt;计算机指令集&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;RISC&lt;br&gt;精简指令集（计算机）&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;CISC&lt;br&gt;复杂指令集（计算机）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令种类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;少、精简&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多、复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令复杂度&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低（简单）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高（复杂）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令长度&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;固定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;变化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;寻址方式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;少&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复杂多样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实现（译码方式）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;硬布线控制逻辑（组合逻辑控制器）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;微程序控制技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通用寄存器数量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多、大量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;流水线技术&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;流水线技术&#34;&gt;流水线技术&lt;/h1&gt;
&lt;p&gt;计算机中的流水线技术（Pipelining）是把一个重复的过程分解为若干个子过程，每个子过程与其他子过程并行进行。&lt;/p&gt;
&lt;p&gt;若要执行$n$条指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序执行总时间：&lt;/p&gt;
&lt;p&gt;$$
顺序执行总时间=单条指令执行的时间\times n
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线执行总时间：&lt;/p&gt;
&lt;p&gt;$$
流水线执行总时间=一条指令执行的时间+流水线周期 \times (n-1)
$$&lt;/p&gt;
&lt;p&gt;流水线（操作）周期为执行时间最长的一段操作的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连续输入$n$条指令的吞吐率：&lt;/p&gt;
&lt;p&gt;$$
吞吐率=\cfrac {n}{总执行时间}
$$&lt;/p&gt;
&lt;p&gt;如果是流水线的吞吐率，则总执行时间为流水线执行总时间。
流水线的吞吐率是最长流水段操作时间的倒数。即：&lt;/p&gt;
&lt;p&gt;$$
最长流水段操作时间=\cfrac {流水线执行总时间}{n}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加速比：&lt;/p&gt;
&lt;p&gt;$$
加速比 = \cfrac{顺序执行总时间}{流水线执行总时间}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;存储器&#34;&gt;存储器&lt;/h1&gt;
&lt;p&gt;按存储器所处位置可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存（主存）：在主机内或主板上，存放机器当前运行所需的程序和数据，以便向CPU提供信息。（相对外存）容量小、速度快。&lt;/li&gt;
&lt;li&gt;外存（辅存）：存放当前不参加运行的大量信息，在需要时调入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按存储器的构成材料分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁存储器&lt;/li&gt;
&lt;li&gt;半导体存储器&lt;/li&gt;
&lt;li&gt;光存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按存储器工作方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读/写存储器（RAM）。&lt;/li&gt;
&lt;li&gt;只读存储器：ROM、PROM、EPROM、EEPROM等。
&lt;ul&gt;
&lt;li&gt;固定只读存储器（ROM）：厂家生产时就写好数据在其中。只能读（用户）不能写。一般用于存放BIOS和微程序控制。&lt;/li&gt;
&lt;li&gt;可编程读只读存储器（PROM）：其内容可以由用户一次性地写入，写入后不能再修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按访问方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按地址访问：&lt;/p&gt;
&lt;p&gt;可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机存储器&lt;/li&gt;
&lt;li&gt;顺序存储器&lt;/li&gt;
&lt;li&gt;直接存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按内容访问：例如相联存储器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟存储器由主存与辅存组成。&lt;/p&gt;
&lt;p&gt;DRAM（动态随机存储器）构成主存 DRAM需要周期性地刷新保持信息。&lt;/p&gt;
&lt;p&gt;SRAM（静态随机存储器）构成Cache（缓存）。&lt;/p&gt;
&lt;p&gt;闪存类似U盘，掉电后信息不会丢失。以块为单位进行删除。闪存是EPROM的一种类型，可以代替ROM存储器。闪存不可以代替主存。&lt;/p&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;高速缓存用来存放当前最活跃的程序和数据，其特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位于CPU与主存之间；容量一般在几千字节到几兆字节之间；&lt;/li&gt;
&lt;li&gt;速度一般比主存快5~10倍，由快速半导体存储器构成；&lt;/li&gt;
&lt;li&gt;其内容是主存局部域的副本，对程序员来说是透明的（看不到或可以忽略）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cache存储器部分用来存放主存的部分拷贝（副本）信息。控制部分的功能是判断CPU要访问的信息是否在Cache存储器中，若在即为命中，若不在则没有命中。命中时直接对Cache存储器寻址；未命中时，要按照替换原则决定主存的一块信息放到Cache存储器的哪一块里。&lt;/p&gt;
&lt;h2 id=&#34;缓存地址映射&#34;&gt;缓存地址映射&lt;/h2&gt;
&lt;p&gt;CPU工作时，送出的是主存单元的地址。为从Cache存储器中读/写信息，就需要将主存地址转成Cache存储器的地址，这种地址转换即为地址映像。&lt;/p&gt;
&lt;p&gt;高速缓存中的地址映像方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接映像：主存的块与Cache块的对应关系是固定的。冲突多、关系固定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679884025087.png&#34;
	width=&#34;825&#34;
	height=&#34;526&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679884025087_hu5b011bac95c34a4b59523b3fc3e9bdf5_66159_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679884025087_hu5b011bac95c34a4b59523b3fc3e9bdf5_66159_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;376px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全相联映像：允许主存的任一块调入Cache存储器的任一块。冲突少、关系不固定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679884252415.png&#34;
	width=&#34;730&#34;
	height=&#34;538&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679884252415_hu0e33dbcf5fa3fed2f738b321711ef11e_91734_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679884252415_hu0e33dbcf5fa3fed2f738b321711ef11e_91734_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组相联映像：将缓存和主存先分为组，组下再分为块。组与组采用直接映像，组内的块采用全相联映像。冲突较少，是直接映像与全相联映像的折中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;发生块冲突从多到少的顺序：直接映像 &amp;gt; 组相联映像 &amp;gt; 全相联映像。&lt;/p&gt;
&lt;p&gt;地址映像都是由硬件自动完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;中断&#34;&gt;中断&lt;/h1&gt;
&lt;p&gt;计算机在执行程序过程中，当遇到急需处理的事件时，暂停当前正在运行的程序，转去执行有关服务程序，处理完后自动返回源程序，这个过程称为中断。&lt;/p&gt;
&lt;p&gt;中断是一种非常重要的技术，&lt;u&gt;输入输出&lt;/u&gt;设备和&lt;u&gt;主机交换数据&lt;/u&gt;、&lt;u&gt;分时操作&lt;/u&gt;、&lt;u&gt;实时系统&lt;/u&gt;、&lt;u&gt;计算机网络&lt;/u&gt;和&lt;u&gt;分布式计算机系统&lt;/u&gt;中都要用到这种技术。为了提高响应中断的速度，通常把所有中断服务程序的入口地址（或称为中断向量）汇集为中断向量表。&lt;/p&gt;
&lt;h2 id=&#34;输入输出控制方式&#34;&gt;输入输出控制方式&lt;/h2&gt;
&lt;p&gt;程序查询方式（程序直接控制方式）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888001780.png&#34;
	width=&#34;754&#34;
	height=&#34;1174&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888001780_hud6ebe6012cde16108d1ee611e4248e31_240258_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888001780_hud6ebe6012cde16108d1ee611e4248e31_240258_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;64&#34;
		data-flex-basis=&#34;154px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU和I/O只能串行工作。CPU需要一直轮询检查，长期处于忙等状态，CPU利用率低。&lt;/li&gt;
&lt;li&gt;一次只能读/写一个字。&lt;/li&gt;
&lt;li&gt;由CPU将数放入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中断驱动方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888578058.png&#34;
	width=&#34;787&#34;
	height=&#34;1134&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888578058_huafad4d8f462045fe6ed8d3f6574e2433_264777_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888578058_huafad4d8f462045fe6ed8d3f6574e2433_264777_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;166px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O设备通过中断信号主动向CPU报告I/O操作已完成。&lt;/li&gt;
&lt;li&gt;CPU和I/O可并行工作。&lt;/li&gt;
&lt;li&gt;CPU利用率得到提升。&lt;/li&gt;
&lt;li&gt;一次只能读/写一个字。&lt;/li&gt;
&lt;li&gt;由CPU将数据放入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMA方式（直接存储器存储方式）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888972074.png&#34;
	width=&#34;816&#34;
	height=&#34;723&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888972074_hu524534b10c6d25022b5676913927ee92_146843_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/uTools_1679888972074_hu524534b10c6d25022b5676913927ee92_146843_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;112&#34;
		data-flex-basis=&#34;270px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU和I/O可并行工作。&lt;/li&gt;
&lt;li&gt;仅在传送数据块多开始和结束时才需要CPU的干预。&lt;/li&gt;
&lt;li&gt;由外设直接将数据放入内存。&lt;/li&gt;
&lt;li&gt;一次读写的单位为&amp;quot;块&amp;quot;而不是字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMA传输数据比中断驱动方式传输数据要快一点。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;总线&#34;&gt;总线&lt;/h1&gt;
&lt;p&gt;总线是连接计算机有关部件的一组信号线，是计算机中用来传送信息代码的公共通道。&lt;/p&gt;
&lt;p&gt;采用总线结构主要有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化系统结构，便于系统设计制造；&lt;/li&gt;
&lt;li&gt;大大减少了连线数目，便于布线，减小体积，提高系统的可靠性；&lt;/li&gt;
&lt;li&gt;便于接口设计，所有与总线连接的设备均采用类似的接口；&lt;/li&gt;
&lt;li&gt;便于系统的扩充、更新与灵活配置，易于实现系统的模块化；&lt;/li&gt;
&lt;li&gt;便于设备的软件设计；&lt;/li&gt;
&lt;li&gt;便于故障诊断和维修，同时也降低了成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在计算机系统中采用总线结构，便于实现系统的积木化构造，同时可以减少信息传输线的数量。&lt;/p&gt;
&lt;p&gt;微机中的总线分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据总线&lt;/li&gt;
&lt;li&gt;地址总线&lt;/li&gt;
&lt;li&gt;控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见总线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISA总线。&lt;/li&gt;
&lt;li&gt;EISA总线。&lt;/li&gt;
&lt;li&gt;PCI总线：PCI总线是目前微型机上广泛采用的内总线，采用并行传输方式。&lt;/li&gt;
&lt;li&gt;PCI Express 总线。&lt;/li&gt;
&lt;li&gt;前端总线。&lt;/li&gt;
&lt;li&gt;RS-232C。&lt;/li&gt;
&lt;li&gt;SCSI总线：小型计算机系统接口（SCSI）是一条并行外总线。&lt;/li&gt;
&lt;li&gt;SATA。&lt;/li&gt;
&lt;li&gt;USB。&lt;/li&gt;
&lt;li&gt;IEEE-1394。&lt;/li&gt;
&lt;li&gt;IEEE-488总线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址总线宽度：例如，内存容量4GB，$4GB=2^{2+10+10+10}B=2^32B$。所以内存单元的地址宽度为32位，即地址总线宽度为32位。&lt;/p&gt;
&lt;p&gt;数据总线宽度：例如字长为32的机器，那么其数据总线的宽度要为32。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;加密技术与认证技术&#34;&gt;加密技术与认证技术&lt;/h1&gt;
&lt;h2 id=&#34;加密技术&#34;&gt;加密技术&lt;/h2&gt;
&lt;p&gt;加密技术用于防止第三方窃听。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对称加密：只有一把密钥。加密和解密用同一把密钥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥分发有缺陷。&lt;/li&gt;
&lt;li&gt;加密解密速度很快。&lt;/li&gt;
&lt;li&gt;适合加量大量明文数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称加密：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密和解密不是同一把密钥。&lt;/li&gt;
&lt;li&gt;一共有两把密钥，分别是公钥和私钥。&lt;/li&gt;
&lt;li&gt;用公钥加密只能用私钥解密，用私钥加密只能用公钥解密。&lt;/li&gt;
&lt;li&gt;不能通过一把密钥推出另一把密钥。&lt;/li&gt;
&lt;li&gt;用接收方的公钥加密明文可以实现防止窃听的效果。&lt;/li&gt;
&lt;li&gt;密钥分发没有缺陷。&lt;/li&gt;
&lt;li&gt;加密解密速度很慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;认证技术&#34;&gt;认证技术&lt;/h2&gt;
&lt;p&gt;认证技术用于防止篡改、假冒和否认。&lt;/p&gt;
&lt;p&gt;摘要（防止篡改）：将发送的明文进行Hash算法后得到摘要放在密文后一起发送过去，与接收方解密后的明文进行相同的Hash算法得到的摘要进行对比如果一致，侧没有篡改，否则有篡改。&lt;/p&gt;
&lt;p&gt;数字签名（防止假冒和否认）：&lt;/p&gt;
&lt;p&gt;发送方用自己的&lt;u&gt;私钥对摘要进行签名&lt;/u&gt;（加密）。得到数字签名放在密文后一起发送过去。&lt;/p&gt;
&lt;p&gt;接收方用发送方的&lt;u&gt;公钥对数字签名进行验证&lt;/u&gt;（解密）。如果验证成功则该消息没有被假冒且不能否认，否则该消息的真实性为假冒发送。&lt;/p&gt;
&lt;h2 id=&#34;数字证书&#34;&gt;数字证书&lt;/h2&gt;
&lt;p&gt;数字证书是第三方CA机构使用自己的私钥对用户的公钥签名（加密），来保证这个公钥不被篡改。然后接收方用CA的公钥验证（解密），从而得到用户的公钥。&lt;/p&gt;
&lt;h2 id=&#34;加密算法&#34;&gt;加密算法&lt;/h2&gt;
&lt;p&gt;对称密钥（私钥、私有密钥加密）算法（共享密钥加密算法）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DES&lt;/li&gt;
&lt;li&gt;3DES&lt;/li&gt;
&lt;li&gt;RC-5&lt;/li&gt;
&lt;li&gt;IDEA&lt;/li&gt;
&lt;li&gt;AES&lt;/li&gt;
&lt;li&gt;RC4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非对称密钥（公钥、公开密钥加密）算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;ECC&lt;/li&gt;
&lt;li&gt;DSA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他加密算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hash函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SHA-1安全散列算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MD5摘要算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出结果为128位&lt;/li&gt;
&lt;li&gt;摘要算法防止发送的报文被篡改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加密可以阻止被动攻击，认证可以阻止主动攻击（不可以处理被动攻击）。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;系统可靠度&#34;&gt;系统可靠度&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F.png&#34;
	width=&#34;1157&#34;
	height=&#34;400&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F_huc533c9ebe7073a641e0c4f0ca26fe76d_129377_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F_huc533c9ebe7073a641e0c4f0ca26fe76d_129377_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;289&#34;
		data-flex-basis=&#34;694px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F.png&#34;
	width=&#34;1133&#34;
	height=&#34;376&#34;
	srcset=&#34;https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F_hu0151f1bd7a524d241456bee3273c718e_125234_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F_hu0151f1bd7a524d241456bee3273c718e_125234_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;723px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
