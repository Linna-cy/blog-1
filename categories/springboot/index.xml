<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spring Boot on Linner&#39;s Blog</title>
        <link>https://blog.linner.asia/categories/springboot/</link>
        <description>Recent content in Spring Boot on Linner&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Mon, 24 Jul 2023 02:58:36 +0800</lastBuildDate><atom:link href="https://blog.linner.asia/categories/springboot/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nacos Server 部署</title>
        <link>https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Mon, 24 Jul 2023 02:58:36 +0800</pubDate>
        
        <guid>https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;h1 id=&#34;本地部署&#34;&gt;本地部署&lt;/h1&gt;
&lt;p&gt;Nacos是一个开源项目，已经在Github上开源。在本地搭建Nacos需要访问&lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/nacos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nacos项目仓库&lt;/a&gt;，你可以选择将该项目&lt;code&gt;clone&lt;/code&gt;到本地自己打包后部署，也可以选择直接访问&lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/nacos/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nacos的Releases页面&lt;/a&gt;下载已经打包好的项目压缩文件进行部署。你也可以访问&lt;a class=&#34;link&#34; href=&#34;https://nacos.io/zh-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nacos官网&lt;/a&gt;查看如何部署。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clone&lt;/code&gt;到本地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/alibaba/naco
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问&lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/nacos/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nacos的Releases页面&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690139609912.png&#34;
	width=&#34;1715&#34;
	height=&#34;946&#34;
	srcset=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690139609912_hu86e6ea65c0f914ccbc11f612a283b7c3_105804_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690139609912_hu86e6ea65c0f914ccbc11f612a283b7c3_105804_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Nacos的Releases页面&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;选择自己想要的版本（如&lt;code&gt;2.2.3&lt;/code&gt;）进行下载：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690139697680.png&#34;
	width=&#34;1021&#34;
	height=&#34;252&#34;
	srcset=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690139697680_hu238209dbd7e7edea6cbefc72c75697e4_16456_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690139697680_hu238209dbd7e7edea6cbefc72c75697e4_16456_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;405&#34;
		data-flex-basis=&#34;972px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;无论是选择下载&lt;code&gt;.zip&lt;/code&gt;还是&lt;code&gt;.tar.gz&lt;/code&gt;后缀的压缩包都可以。但是在Linux环境下选择下载&lt;code&gt;.tar.gz&lt;/code&gt;为佳。&lt;/p&gt;
&lt;p&gt;Linux中解压&lt;code&gt;.tar.gz&lt;/code&gt;的命令如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tar -zxvf 压缩包文件名.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将下载好的压缩包解压到任意非中文目录下。解压好的目录结构大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690140191883.png&#34;
	width=&#34;116&#34;
	height=&#34;198&#34;
	srcset=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690140191883_huac34f4d75264a53499ebd21b42fc33c6_3510_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690140191883_huac34f4d75264a53499ebd21b42fc33c6_3510_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Nacos目录结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;58&#34;
		data-flex-basis=&#34;140px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;target&lt;/code&gt;：存放Nacos&lt;code&gt;jar&lt;/code&gt;包的目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logs&lt;/code&gt;：存放日志文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;conf&lt;/code&gt;：存放项目的配置文件（如&lt;code&gt;application.properties&lt;/code&gt;等）以及搭建存放Nacos配置信息的数据库的&lt;code&gt;.sql&lt;/code&gt;脚本文件（如&lt;code&gt;nacos-mysql.sql&lt;/code&gt;等）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bin&lt;/code&gt;：存放启动和关闭Nacos Server的脚本文件以及一些其它的文件。&lt;/p&gt;
&lt;p&gt;在Windows系统中启动和关闭Nacos使用的是&lt;code&gt;.cmd&lt;/code&gt;文件，即&lt;code&gt;startup.cmd&lt;/code&gt;和&lt;code&gt;shutdown.cmd&lt;/code&gt;，分别对应启动和关闭。在Linux系统中使用的是&lt;code&gt;.sh&lt;/code&gt;文件，&lt;code&gt;startup.sh&lt;/code&gt;启动，&lt;code&gt;shutdown.sh&lt;/code&gt;关闭。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;startup.cmd&lt;/code&gt;或&lt;code&gt;startup.sh&lt;/code&gt;默认为集群模式，可以添加参数&lt;code&gt;-m standalone&lt;/code&gt;使用单机模式启动。&lt;/p&gt;
&lt;p&gt;Windows系统：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cd&lt;/span&gt; Nacos的路径\bin
.\startup.cmd -m standalone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linux系统：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd Nacos的路径/bin
./startup.sh -m standalone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在Windows系统和Linux系统上进行本地简单地部署Nacos并没有区别，这里不再分别进行赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;访问&lt;a class=&#34;link&#34; href=&#34;http://localhsot:8848/nacos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhsot:8848/nacos&lt;/a&gt;即可。默认的用户名和密码均为&lt;code&gt;nacos&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;启动成功后的Nacos大概长这样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690143487422.png&#34;
	width=&#34;1919&#34;
	height=&#34;682&#34;
	srcset=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690143487422_huf4bff7825cff8f337a67d731239778ec_48987_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690143487422_huf4bff7825cff8f337a67d731239778ec_48987_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Nacos 页面&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;基于-mysql-数据库部署&#34;&gt;基于 MySQL 数据库部署&lt;/h1&gt;
&lt;p&gt;Nacos可以使用MySQL数据库存放配置信息。首先需要确保你的电脑上有MySQL。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：使用MySQL搭建Nacos的数据库，推荐使用MySQL 5，因为Nacos的MySQL驱动版本可以不支持MySQL 8。如果非要使用MySQL 8，可以在Nacos中升级MySQL的驱动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先在MySQL中新建一个数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; nacos;
USE nacos;
&lt;span style=&#34;color:#66d9ef&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nacos的路径/bin/mysql-schema.sql&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建成功后的Nacos数据库如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690142171755.png&#34;
	width=&#34;184&#34;
	height=&#34;290&#34;
	srcset=&#34;https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690142171755_hu81e38a67256d0926adb373d5d724b666_6212_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/nacos-server-%E9%83%A8%E7%BD%B2/uTools_1690142171755_hu81e38a67256d0926adb373d5d724b666_6212_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Nacos数据库的表&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;63&#34;
		data-flex-basis=&#34;152px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;接着修改在&lt;code&gt;conf&lt;/code&gt;目录里的&lt;code&gt;application.properties&lt;/code&gt;文件（如果没有，就将&lt;code&gt;application.properties.example&lt;/code&gt;文件复制一份，改名为&lt;code&gt;application.properties&lt;/code&gt;）。需要修改的配置如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 数据源
spring.datasource.platform=mysql
# 数据库数量
db.num=1
# 连接第1个数据库的url（替换成自己的）
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC
# 连接第1个数据库的用户和密码（替换成自己的）
db.user.0=root
db.password.0=root

# 数据库驱动（如果其它配置正确，但无法启动时，修改该配置）
# db.driver-class-name=com.mysql.cj.jdbc.Driver
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来重启Nacos即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./shutdown.sh &lt;span style=&#34;color:#75715e&#34;&gt;# 也可以直接 CTRL+C 结束&lt;/span&gt;
./startup.sh -m standalone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;部署-nacos-集群&#34;&gt;部署 Nacos 集群&lt;/h1&gt;
&lt;p&gt;在本地部署Nacos集群首先将Nacos整个应用目录复制，要在集群中部署几个Nacos就复制几份。接着再分别修改它们的配置文件&lt;code&gt;application.properties&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如要部署两个Nacos，做负载均衡：&lt;/p&gt;
&lt;p&gt;第一个Nacos的配置文件可以如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 服务端口
server.port=8841

# 数据库配置
spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC
db.user.0=root
db.password.0=root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个Nacos的配置文件可以如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 服务端口
server.port=8842

# 数据库配置
spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC
db.user.0=root
db.password.0=root
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;因为是部署在本地（即一台机器上），所以两个Nacos的端口不能相同（否则会发生冲突）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着使用&lt;code&gt;startup.cmd&lt;/code&gt;或&lt;code&gt;startup.sh&lt;/code&gt;分别启动这两个Nacos（这里要使用集群模式启动，Nacos默认使用集群模式启动，所以不能加上&lt;code&gt;-m standalone&lt;/code&gt;参数）。&lt;/p&gt;
&lt;p&gt;此时分别访问这两个服务（例如使用&lt;a class=&#34;link&#34; href=&#34;http://localhost:8841/nacos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:8841/nacos&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;http://localhost:8842/nacos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:8842/nacos&lt;/a&gt;访问），都能正常使用。&lt;/p&gt;
&lt;p&gt;最后需要给这个Nacos集群加个路由（例如使用Nginx）。Nginx的配置如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Nacos 集群
upstream nacos-cluster {
    server nacos-cluster-test-1:8848;
    server nacos-cluster-test-2:8848;
}

# Nacos 服务
server {
    listen 8849;

    server_name localhost;

    location /nacos {
        proxy_pass http://nacos-cluster;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加完配置后重启Nginx即可，这里不做赘述。&lt;/p&gt;
&lt;p&gt;配置完后访问&lt;a class=&#34;link&#34; href=&#34;http://localhsot:8848/nacos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhsot:8849/nacos&lt;/a&gt;即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;基于-docker-部署&#34;&gt;基于 Docker 部署&lt;/h1&gt;
&lt;p&gt;使用Docker部署，首先需要下载Nacos的镜像。Nacos官方提供了对应的镜像&lt;code&gt;nacos/nacos-server&lt;/code&gt;。使用下方命令下载该容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull nacos/nacos-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;上方的命令拉取（下载）的是版本为&lt;code&gt;latest&lt;/code&gt;。要拉取对应版本的镜像，可以查看Docker官方提供的网站&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hub.docker.com&lt;/a&gt;，在其中搜索&lt;code&gt;nacos-server&lt;/code&gt;并点击&lt;code&gt;tags&lt;/code&gt;查找对应的版本（&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/r/nacos/nacos-server/tags&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;点击快速查找Nacos Server版本&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例如拉取&lt;code&gt;v1.4.6&lt;/code&gt;版本的&lt;code&gt;nacos/nacos-server&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull nacos/nacos-server:v1.4.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;nacos/nacos-server&lt;/code&gt;拉取完成后就可以创建对应容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name nacos-server &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 容器名称&lt;/span&gt;
    -p 8848:8848 &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 端口映射，分号左边为本地端口，分号右边为容器的内部端口&lt;/span&gt;
    --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e MODE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standalone &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 指定为单机模式（使用Docker创建的Docker容器默认也为集群模式，所以需要指定单机模式）&lt;/span&gt;
    -e PREFER_HOST_MODE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hostname &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v /home/nacos/nacos-server/logs:/home/nacos/logs &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 文件挂载，分号左边为本地目录，分号右边为容器内部的目录，这里是进行日志文件目录映射&lt;/span&gt;
    -v /home/nacos/nacos-server/conf/:/home/nacos/conf/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 配置文件映射&lt;/span&gt;
    -e JVM_XMS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m -e JVM_XMX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    nacos/nacos-server &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建容器所使用的镜像&lt;/span&gt;
    /usr/sbin/init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问&lt;a class=&#34;link&#34; href=&#34;http://localhsot:8848/nacos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhsot:8848/nacos&lt;/a&gt;即可。默认的用户名和密码均为&lt;code&gt;nacos&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果是在Windows中使用Docker Desktop部署，目录映射的路径应该这样写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;docker run -d \
    --name nacos-server \
    -p 8848:8848 \
    --privileged=true \
    -e MODE=standalone \
    -e PREFER_HOST_MODE=hostname \
    -v /d/docker-volume/nacos/nacos-server/logs:/home/nacos/logs \
    -v /d/docker-volume/nacos/nacos-server/conf/:/home/nacos/conf/ \
    -e JVM_XMS=256m -e JVM_XMX=256m \
    nacos/nacos-server \
    /usr/sbin/init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;基于-docker-使用-mysql-部署&#34;&gt;基于 Docker 使用 MySQL 部署&lt;/h1&gt;
&lt;p&gt;根据如上方法创建Nacos容器，然后修改映射到本地的配置文件。例如修改&lt;code&gt;/home/nacos/nacos-server/conf&lt;/code&gt;下的&lt;code&gt;application.properties&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 数据库配置（根据你的配置环境修改）
spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC
db.user.0=root
db.password.0=root
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注：这个MySQL需要使用&lt;code&gt;mysql-schema.sql&lt;/code&gt;创建&lt;code&gt;nacos&lt;/code&gt;数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果MySQL也是使用Docker创建的，可以给Nacos容器和MySQL容器添加一个Docker Network，并将它们都加入这个Network中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建Docker Network：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker network create nacos-network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分别将Nacos容器和MySQL容器加入Docker Network（假设MySQL的容器名为&lt;code&gt;mysql&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker network connect nacos-network nacos-server
docker network connect nacos-network mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之后在加入这个Network的容器中，可以将它们的容器名当作IP地址来使用。所以在&lt;code&gt;nacos-server&lt;/code&gt;中可以将&lt;code&gt;db.url&lt;/code&gt;修改为如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;db.url.0=jdbc:mysql://mysql:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;使用Docker创建的MySQL容器同样需要创建&lt;code&gt;nacos&lt;/code&gt;数据库。可以通过文件挂载的方式将&lt;code&gt;mysql-schema.sql&lt;/code&gt;挂载到容器中，或者通过其它文件传输方式传输到容器中。
在容器中创建数据库可以在本机输入命令（假设&lt;code&gt;mysql-schema.sql&lt;/code&gt;导入到了容器的&lt;code&gt;root&lt;/code&gt;目录中）：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -ti mysql mysql -uroot -proot -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE DATABASE nacos; USE nacos; SOURCE /root/mysql-schema.sql;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上方命令第一个&lt;code&gt;mysql&lt;/code&gt;是指容器名称，第二个是指容器中的&lt;code&gt;mysql&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;或者是在本地使用Docker登录MySQL后进行操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -ti mysql mysql -uroot -p
&lt;span style=&#34;color:#75715e&#34;&gt;# 然后输入你的密码，回车&lt;/span&gt;
mysql&amp;gt; CREATE DATABASE nacos;
mysql&amp;gt; USE nacos;
mysql&amp;gt; SOURCE /root/mysql-schema.sql;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注：使用Docker部署Nacos，并使用MySQL数据库，按照上述方法直接修改配置文件可能不生效（可能会导致Nacos容器无法启动）。其实使用Docker部署并使用MySQL数据库还有一个简便的方法（见下方）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果上述方式无法生效，可以先删除该容器后通过在创建容器的Docker命令中直接指定MySQL服务的配置信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name nacos-server &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -p 8848:8848 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --network nacos-network&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在创建容器时指定Network&lt;/span&gt;
    --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e SPRING_DATASOURCE_PLATFORM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mysql &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 指定数据源类型为MySQL&lt;/span&gt;
    -e MYSQL_SERVICE_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mysql &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MySQL服务器的地址（这里加入了Network所以可以直接使用容器名称来当Host）&lt;/span&gt;
    -e MYSQL_SERVICE_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MySQL服务端口&lt;/span&gt;
    -e MYSQL_SERVICE_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MySQL用户名&lt;/span&gt;
    -e MYSQL_SERVICE_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MySQL密码&lt;/span&gt;
    -e MYSQL_SERVICE_DB_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nacos &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MySQL的数据库名称&lt;/span&gt;
    -e PREFER_HOST_MODE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hostname &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v /d/27120/docker-volume/nacos/%name%/logs:/home/nacos/logs &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v /d/27120/docker-volume/nacos/%name%/conf/:/home/nacos/conf/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e JVM_XMS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m -e JVM_XMX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    nacos/nacos-server &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /usr/sbin/init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;基于-docker-搭建-nacos-集群&#34;&gt;基于 Docker 搭建 Nacos 集群&lt;/h1&gt;
&lt;p&gt;基于Docker搭建Nacos集群，首先可以创建一个用于创建集群模式Nacos的脚本&lt;code&gt;create_nacos.sh&lt;/code&gt;（使用MySQL）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$2

docker run -d &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name $name &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -p $port:8848 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --network nacos-network &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e SPRING_DATASOURCE_PLATFORM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mysql &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e MYSQL_SERVICE_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mysql &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e MYSQL_SERVICE_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e MYSQL_SERVICE_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e MYSQL_SERVICE_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e MYSQL_SERVICE_DB_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nacos_config &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e PREFER_HOST_MODE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hostname &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v /home/nacos/$name/logs:/home/nacos/logs &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v /home/nacos/$name/conf/:/home/nacos/conf/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e JVM_XMS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m -e JVM_XMX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256m &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    nacos/nacos-server &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /usr/sbin/init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如创建两个Nacos容器（在本地创建两个容器，端口不能重复）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./create_nacos.sh nacos1 &lt;span style=&#34;color:#ae81ff&#34;&gt;8841&lt;/span&gt;
./create_nacos.sh nacos2 &lt;span style=&#34;color:#ae81ff&#34;&gt;8842&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着将它们加入&lt;code&gt;nacos-network&lt;/code&gt;后重启（如果这两个Nacos容器没有停止运行的话，可以忽略）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker restart nacos1
docker restart nacos2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着配置Nginx的方法和之前描述的方式类似。如果Nginx是使用Docker创建的，也可以将该Nginx容器加入&lt;code&gt;nacos-network&lt;/code&gt;，然后直接使用容器的名称作为Host即可。&lt;/p&gt;
&lt;p&gt;最后访问Nginx即可。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SpringBoot 基础</title>
        <link>https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;springboot-简介&#34;&gt;SpringBoot 简介&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;SpringBoot&lt;/code&gt; 是由 &lt;code&gt;Pivotal&lt;/code&gt; 团队提供的全新框架，其设计目的是用来简化 &lt;code&gt;Spring&lt;/code&gt; 应用的初始搭建以及开发过程。&lt;/p&gt;
&lt;p&gt;SpringBoot开发分为如下几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建新模块，选择Spring初始化，并配置模块相关基础信息。&lt;/li&gt;
&lt;li&gt;选择当前模块需要使用的技术集。&lt;/li&gt;
&lt;li&gt;开发控制器类。&lt;/li&gt;
&lt;li&gt;运行自动生成的Application类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringBoot有两个机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖管理机制。&lt;/li&gt;
&lt;li&gt;自动配置机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;项目创建及配置&#34;&gt;项目创建及配置&lt;/h1&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677287557076.png&#34;
	width=&#34;1572&#34;
	height=&#34;1265&#34;
	srcset=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677287557076_hucd4aac900581b1995c287cf4f4416d47_189645_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677287557076_hucd4aac900581b1995c287cf4f4416d47_189645_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;298px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677239012598.png&#34;
	width=&#34;1573&#34;
	height=&#34;1269&#34;
	srcset=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677239012598_hu287bfba592488efe9276e55c8851be90_134021_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677239012598_hu287bfba592488efe9276e55c8851be90_134021_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;297px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在创建好的工程中不需要创建配置类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建好的项目会自动生成其他的一些文件（这些文件目前来说没有任何作用），可以将这些文件删除。&lt;/p&gt;
&lt;p&gt;可以删除的目录和文件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.mvn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HELP.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvnw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvnw.cmd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;项目依赖&#34;&gt;项目依赖&lt;/h2&gt;
&lt;p&gt;在项目中的&lt;code&gt;pom.xml&lt;/code&gt;中有如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.5&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 这里的版本被修改过，按照上方创建的工程版本应该是 3.0.3 --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该代码指定了一个父工程，父工程中的东西在该工程中可以继承过来使用。&lt;/p&gt;
&lt;p&gt;并且使用Spring Initializr创建的项目会自动在&lt;code&gt;pom.xml&lt;/code&gt;中导入所需的起步依赖（包含&lt;code&gt;starter&lt;/code&gt;的依赖）。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;pom.xml&lt;/code&gt;中还有如下起步依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Springboot Web 开发所需的起步依赖 --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Springboot 整合Junit的起步依赖 --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;引导类&#34;&gt;引导类&lt;/h2&gt;
&lt;p&gt;创建的每个SpringBoot项目都包含一个引导类，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SpringbootDemoApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringbootDemoApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引导类是项目的入口，运行&lt;code&gt;main()&lt;/code&gt;就可以启动项目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引导类默认只会扫描当前包下同级的类和包（包下的的类）。&lt;/p&gt;
&lt;p&gt;如果Controller包与引导类的包同级（例如&lt;code&gt;com.linner.controller&lt;/code&gt;与&lt;code&gt;com.linner.springbootdemo&lt;/code&gt;），此时引导类可以正常启动，但是由于扫描不到Cotroller包，接口无法访问。有三种解决方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将Controller包移动到引导类的包下（此处为&lt;code&gt;springbootdemo&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将引导类移动到项目组包下（此处为&lt;code&gt;com.linner&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在创建工程时，修改软件包名。&lt;/p&gt;
&lt;p&gt;Spring Initializr默认软件包名为项目组名.项目名（此处为&lt;code&gt;com.linner.springbootdemo&lt;/code&gt;）。此处创建的项目将其修改为项目组名（&lt;code&gt;com.linner&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;SpringApplication.run(...)&lt;/code&gt; 的返回值是当前项目的&lt;code&gt;ApplicationContext&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;切换-web-服务器&#34;&gt;切换 Web 服务器&lt;/h2&gt;
&lt;p&gt;如果要使用Jetty服务器，我们需要先在&lt;code&gt;pom.xml&lt;/code&gt;中使用&lt;code&gt;&amp;lt;exclusion&amp;gt;&lt;/code&gt;标签排除默认的Tomcat服务器，然后再导入使用Jetty服务器所需的坐标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jetty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;p&gt;SpringBoot有两种配置文件格式，它们都在&lt;code&gt;resources&lt;/code&gt;目录下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;properties&lt;/code&gt;格式：&lt;/p&gt;
&lt;p&gt;文件名为&lt;code&gt;application.properties&lt;/code&gt;，格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 端口
server.port=81
# 访问路径
server.servlet.context-path=/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yaml&lt;/code&gt;格式：&lt;/p&gt;
&lt;p&gt;文件名为&lt;code&gt;application.yml&lt;/code&gt;或&lt;code&gt;application.yaml&lt;/code&gt;，格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# 端口&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;servlet&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# 访问路径&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;context-path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;yaml格式的键值对中，键后面的冒号后（值的前面）一定要加空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SpringBoot程序的配置文件必须是&lt;code&gt;application&lt;/code&gt;，只是后缀名不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上三个配置文件可以同时存在，它们的优先级从高到低为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;application.properties&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Idea可以快速地编辑配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677291010274.png&#34;
	width=&#34;481&#34;
	height=&#34;581&#34;
	srcset=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677291010274_hu6c7a33389c12226ae70308dde30125e2_37781_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677291010274_hu6c7a33389c12226ae70308dde30125e2_37781_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;198px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677291147353.png&#34;
	width=&#34;1651&#34;
	height=&#34;389&#34;
	srcset=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677291147353_hu621d83afb44f065ed2ec5279b956c7a2_60719_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677291147353_hu621d83afb44f065ed2ec5279b956c7a2_60719_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;424&#34;
		data-flex-basis=&#34;1018px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;yaml-语法&#34;&gt;yaml 语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大小写敏感。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性层级关系使用多行描述，每行结尾使用冒号结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）。&lt;/p&gt;
&lt;p&gt;空格的个数并不重要，只要保证同层级的左侧对齐即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性值前面添加空格（属性名与属性值之间使用&lt;code&gt;:&lt;/code&gt;+空格作为分隔）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; 表示注释。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据前面要加空格与冒号隔开。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;list&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;Java&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;Spring&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;读取配置数据&#34;&gt;读取配置数据&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;@Value(&amp;quot;表达式&amp;quot;)&lt;/code&gt;可以从配置文件中读取数据，注解中用于读取属性名引用方式是：&lt;code&gt;${一级属性名.二级属性名……}&lt;/code&gt;。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${server.port}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${list[0]}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String java&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;gerConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SpringBoot还可以使用 &lt;code&gt;@Autowired&lt;/code&gt; 注解注入 &lt;code&gt;Environment&lt;/code&gt; 对象的方式读取数据。这种方式 &lt;code&gt;SpringBoot&lt;/code&gt; 会将配置文件中所有的数据封装到 &lt;code&gt;Environment&lt;/code&gt; 对象中，如果需要使用哪个数据只需要通过调用 &lt;code&gt;Environment&lt;/code&gt; 对象的 &lt;code&gt;getProperty(String name)&lt;/code&gt; 方法获取。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Environment env&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;gerConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server.port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自定义对象&#34;&gt;自定义对象&lt;/h3&gt;
&lt;p&gt;SpringBoot提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在实体类上添加&lt;code&gt;@Component&lt;/code&gt;注解。&lt;/p&gt;
&lt;p&gt;表示将实体类 &lt;code&gt;bean&lt;/code&gt; 的创建交给 &lt;code&gt;Spring&lt;/code&gt; 管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注解表示加载配置文件。&lt;/p&gt;
&lt;p&gt;在该注解中也可以使用 &lt;code&gt;prefix&lt;/code&gt; 属性指定只加载指定键的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Controller中进行注入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;p&gt;添加依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在配置文件中添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;myconfig&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SpringBoot&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;666&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实体类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prefix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myconfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// getter and setter...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Controller：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; MyConfig myConfig&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/myconfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MyConfig &lt;span style=&#34;color:#a6e22e&#34;&gt;getMyConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;多环境配置&#34;&gt;多环境配置&lt;/h3&gt;
&lt;p&gt;由于开发环境、测试环境、生产环境的配置都不相同。所以SpringBoot给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yaml&lt;/code&gt;格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 开发&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;activate&lt;/span&gt;:
      &lt;span style=&#34;color:#75715e&#34;&gt;# 配置环境名&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;on-profile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dev&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# spring.profiles 配置已弃用&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
---
&lt;span style=&#34;color:#75715e&#34;&gt;# 生产&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;activate&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;on-profile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pro&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#给生产环境起的名字&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;
---
&lt;span style=&#34;color:#75715e&#34;&gt;# 测试&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;activate&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;on-profile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#给测试环境起的名字&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;
---
&lt;span style=&#34;color:#75715e&#34;&gt;# 设置启用的环境&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;profiles&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;active&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#表示使用的是开发环境的配置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;properties&lt;/code&gt;格式：&lt;/p&gt;
&lt;p&gt;使用多文件方式，文件名以&lt;code&gt;application-&lt;/code&gt;开头。如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;application-dev.properties&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;server.port=80
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;application-pro.properties&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;server.port=81
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;application-test.properties&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;server.port=82
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringBoot只会默认加载名为 &lt;code&gt;application.properties&lt;/code&gt; 的配置文件，所以需要在 &lt;code&gt;application.properties&lt;/code&gt; 配置文件中设置启用哪个配置文件。如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.profiles.active=pro
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringBoot提供了在运行&lt;code&gt;jar&lt;/code&gt;时设置开启指定的环境的方式。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java –jar springbootdemo.jar –-spring.profiles.active&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;临时修改端口号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java –jar springbootdemo.jar –-server.port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;命令行设置的端口号优先级高于配置文件。
&lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot官网&lt;/a&gt;已经对配置的优先级进行了说明：
&lt;img src=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/image-20210917193910191.png&#34;
	width=&#34;1680&#34;
	height=&#34;792&#34;
	srcset=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/image-20210917193910191_hub0a1d35a0358d95a9acb0998fc4d2a1d_228625_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/image-20210917193910191_hub0a1d35a0358d95a9acb0998fc4d2a1d_228625_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;509px&#34;
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置文件分类&#34;&gt;配置文件分类&lt;/h3&gt;
&lt;p&gt;SpringBoot定义了配置文件不同的放置的位置。而放在不同位置的优先级是不同的。SpringBoot中4级配置文件放置位置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;classpath：application.yml&lt;/li&gt;
&lt;li&gt;classpath：config/application.yml&lt;/li&gt;
&lt;li&gt;file：application.yml&lt;/li&gt;
&lt;li&gt;file：config/application.yml&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;级别越高优先级越高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;第三方资源整合&#34;&gt;第三方资源整合&lt;/h1&gt;
&lt;h2 id=&#34;整合-junit&#34;&gt;整合 Junit&lt;/h2&gt;
&lt;p&gt;SpringBoot整合了Junit并可将其作为起步依赖整合到项目中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SpringBoot整合Junit分为三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在测试类上添加 &lt;code&gt;@SpringBootTest&lt;/code&gt; 注解。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;@Autowired&lt;/code&gt; 注入要测试的资源。&lt;/li&gt;
&lt;li&gt;定义测试方法进行测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example：&lt;/p&gt;
&lt;p&gt;编写Service：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Book save ...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试&lt;code&gt;BookService&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SpringbootDemoApplicationTests&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BookService bookService&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testSave&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        bookService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;由于引导类默认扫描当前包下的类和包，所以测试类（或者测试类的包）和引导类要在同个包下。&lt;/p&gt;
&lt;p&gt;否则，可以使用&lt;code&gt;@SpringBootTest&lt;/code&gt;注解的&lt;code&gt;classes&lt;/code&gt;属性指定引导类的字节码对象。如：&lt;code&gt;@SpringBootTest(classes = {SpringbootDemoApplication.class})&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;整合-mybatis&#34;&gt;整合 MyBatis&lt;/h2&gt;
&lt;p&gt;在整合MyBatis前先建一个用于测试的数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NAMES&lt;/span&gt; utf8mb4;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;-- Table structure for book_tb
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;  (
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; int &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) CHARACTER &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; utf8mb3 &lt;span style=&#34;color:#66d9ef&#34;&gt;COLLATE&lt;/span&gt; utf8mb3_bin &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; BTREE
) ENGINE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; InnoDB CHARACTER &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; utf8mb3 &lt;span style=&#34;color:#66d9ef&#34;&gt;COLLATE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; utf8mb3_bin ROW_FORMAT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Dynamic&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;-- Records of book_tb
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;郑嘉伦&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;钱璐&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;黄安琪&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;龙宇宁&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;姜宇宁&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;book_tb&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;赵嘉伦&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;导入依赖：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在创建项目时，通过Spring Initializr导入依赖：
&lt;img src=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677302021447.png&#34;
	width=&#34;1575&#34;
	height=&#34;1466&#34;
	srcset=&#34;https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677302021447_hub274beed4d034c3ddb809f27d46dc304_154471_480x0_resize_box_3.png 480w, https://blog.linner.asia/p/springboot-%E5%9F%BA%E7%A1%80/1677302021447_hub274beed4d034c3ddb809f27d46dc304_154471_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;pom.xml&lt;/code&gt;中导入坐标：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.mysql&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写数据库配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;datasource&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;driver-class-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;com.mysql.jdbc.Driver&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jdbc:mysql://localhost:3306/spring_db&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;root&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;SpringBoot版本低于2.4.3（不含），Mysql驱动版本大于8.0时，需要在url连接串中配置时区 &lt;code&gt;jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC&lt;/code&gt;，或在MySQL数据库端配置时区解决此问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义实体类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// getter、setter and toString
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义DAO接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Mapper&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// SpringBoot定义DAO接口类
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookDao&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Select&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM book_tb WHERE id = #{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Book &lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义Test类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SpringbootMybatisApplicationTests&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BookDao bookDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testGetById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Book book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bookDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;book&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-druid-数据源&#34;&gt;使用 Druid 数据源&lt;/h3&gt;
&lt;p&gt;SpringBoot有默认的数据源，但是也可以指定使用Druid数据源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;导入Druid依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;druid&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.16&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;application.yml&lt;/code&gt;配置文件配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;datasource&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;driver-class-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;com.mysql.cj.jdbc.Driver&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;root&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;com.alibaba.druid.pool.DruidDataSource&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
